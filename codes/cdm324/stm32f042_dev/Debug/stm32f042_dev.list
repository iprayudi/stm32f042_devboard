
stm32f042_dev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ab0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e20  08003b70  08003b70  00013b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004990  08004990  00020678  2**0
                  CONTENTS
  4 .ARM          00000000  08004990  08004990  00020678  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004990  08004990  00020678  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004990  08004990  00014990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004994  08004994  00014994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000678  20000000  08004998  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a80  20000678  08005010  00020678  2**3
                  ALLOC
 10 ._user_heap_stack 00000200  200010f8  08005010  000210f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020678  2**0
                  CONTENTS, READONLY
 12 .debug_info   000128c5  00000000  00000000  000206a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003069  00000000  00000000  00032f65  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00009e4b  00000000  00000000  00035fce  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000be8  00000000  00000000  0003fe20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000010c0  00000000  00000000  00040a08  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00016823  00000000  00000000  00041ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000d133  00000000  00000000  000582eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00079564  00000000  00000000  0006541e  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000de982  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002760  00000000  00000000  000dea00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000678 	.word	0x20000678
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003b58 	.word	0x08003b58

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000067c 	.word	0x2000067c
 8000104:	08003b58 	.word	0x08003b58

08000108 <__gnu_thumb1_case_sqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5609      	ldrsb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__gnu_thumb1_case_uqi>:
 800011c:	b402      	push	{r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	5c09      	ldrb	r1, [r1, r0]
 8000126:	0049      	lsls	r1, r1, #1
 8000128:	448e      	add	lr, r1
 800012a:	bc02      	pop	{r1}
 800012c:	4770      	bx	lr
 800012e:	46c0      	nop			; (mov r8, r8)

08000130 <__udivsi3>:
 8000130:	2200      	movs	r2, #0
 8000132:	0843      	lsrs	r3, r0, #1
 8000134:	428b      	cmp	r3, r1
 8000136:	d374      	bcc.n	8000222 <__udivsi3+0xf2>
 8000138:	0903      	lsrs	r3, r0, #4
 800013a:	428b      	cmp	r3, r1
 800013c:	d35f      	bcc.n	80001fe <__udivsi3+0xce>
 800013e:	0a03      	lsrs	r3, r0, #8
 8000140:	428b      	cmp	r3, r1
 8000142:	d344      	bcc.n	80001ce <__udivsi3+0x9e>
 8000144:	0b03      	lsrs	r3, r0, #12
 8000146:	428b      	cmp	r3, r1
 8000148:	d328      	bcc.n	800019c <__udivsi3+0x6c>
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d30d      	bcc.n	800016c <__udivsi3+0x3c>
 8000150:	22ff      	movs	r2, #255	; 0xff
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	ba12      	rev	r2, r2
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d302      	bcc.n	8000162 <__udivsi3+0x32>
 800015c:	1212      	asrs	r2, r2, #8
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	d065      	beq.n	800022e <__udivsi3+0xfe>
 8000162:	0b03      	lsrs	r3, r0, #12
 8000164:	428b      	cmp	r3, r1
 8000166:	d319      	bcc.n	800019c <__udivsi3+0x6c>
 8000168:	e000      	b.n	800016c <__udivsi3+0x3c>
 800016a:	0a09      	lsrs	r1, r1, #8
 800016c:	0bc3      	lsrs	r3, r0, #15
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x46>
 8000172:	03cb      	lsls	r3, r1, #15
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b83      	lsrs	r3, r0, #14
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x52>
 800017e:	038b      	lsls	r3, r1, #14
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b43      	lsrs	r3, r0, #13
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x5e>
 800018a:	034b      	lsls	r3, r1, #13
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b03      	lsrs	r3, r0, #12
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x6a>
 8000196:	030b      	lsls	r3, r1, #12
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0ac3      	lsrs	r3, r0, #11
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x76>
 80001a2:	02cb      	lsls	r3, r1, #11
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a83      	lsrs	r3, r0, #10
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x82>
 80001ae:	028b      	lsls	r3, r1, #10
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a43      	lsrs	r3, r0, #9
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x8e>
 80001ba:	024b      	lsls	r3, r1, #9
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a03      	lsrs	r3, r0, #8
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x9a>
 80001c6:	020b      	lsls	r3, r1, #8
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	d2cd      	bcs.n	800016a <__udivsi3+0x3a>
 80001ce:	09c3      	lsrs	r3, r0, #7
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xa8>
 80001d4:	01cb      	lsls	r3, r1, #7
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0983      	lsrs	r3, r0, #6
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xb4>
 80001e0:	018b      	lsls	r3, r1, #6
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0943      	lsrs	r3, r0, #5
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xc0>
 80001ec:	014b      	lsls	r3, r1, #5
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0903      	lsrs	r3, r0, #4
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xcc>
 80001f8:	010b      	lsls	r3, r1, #4
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	08c3      	lsrs	r3, r0, #3
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xd8>
 8000204:	00cb      	lsls	r3, r1, #3
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0883      	lsrs	r3, r0, #2
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xe4>
 8000210:	008b      	lsls	r3, r1, #2
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0843      	lsrs	r3, r0, #1
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xf0>
 800021c:	004b      	lsls	r3, r1, #1
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	1a41      	subs	r1, r0, r1
 8000224:	d200      	bcs.n	8000228 <__udivsi3+0xf8>
 8000226:	4601      	mov	r1, r0
 8000228:	4152      	adcs	r2, r2
 800022a:	4610      	mov	r0, r2
 800022c:	4770      	bx	lr
 800022e:	e7ff      	b.n	8000230 <__udivsi3+0x100>
 8000230:	b501      	push	{r0, lr}
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f8f0 	bl	8000418 <__aeabi_idiv0>
 8000238:	bd02      	pop	{r1, pc}
 800023a:	46c0      	nop			; (mov r8, r8)

0800023c <__aeabi_uidivmod>:
 800023c:	2900      	cmp	r1, #0
 800023e:	d0f7      	beq.n	8000230 <__udivsi3+0x100>
 8000240:	e776      	b.n	8000130 <__udivsi3>
 8000242:	4770      	bx	lr

08000244 <__divsi3>:
 8000244:	4603      	mov	r3, r0
 8000246:	430b      	orrs	r3, r1
 8000248:	d47f      	bmi.n	800034a <__divsi3+0x106>
 800024a:	2200      	movs	r2, #0
 800024c:	0843      	lsrs	r3, r0, #1
 800024e:	428b      	cmp	r3, r1
 8000250:	d374      	bcc.n	800033c <__divsi3+0xf8>
 8000252:	0903      	lsrs	r3, r0, #4
 8000254:	428b      	cmp	r3, r1
 8000256:	d35f      	bcc.n	8000318 <__divsi3+0xd4>
 8000258:	0a03      	lsrs	r3, r0, #8
 800025a:	428b      	cmp	r3, r1
 800025c:	d344      	bcc.n	80002e8 <__divsi3+0xa4>
 800025e:	0b03      	lsrs	r3, r0, #12
 8000260:	428b      	cmp	r3, r1
 8000262:	d328      	bcc.n	80002b6 <__divsi3+0x72>
 8000264:	0c03      	lsrs	r3, r0, #16
 8000266:	428b      	cmp	r3, r1
 8000268:	d30d      	bcc.n	8000286 <__divsi3+0x42>
 800026a:	22ff      	movs	r2, #255	; 0xff
 800026c:	0209      	lsls	r1, r1, #8
 800026e:	ba12      	rev	r2, r2
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d302      	bcc.n	800027c <__divsi3+0x38>
 8000276:	1212      	asrs	r2, r2, #8
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	d065      	beq.n	8000348 <__divsi3+0x104>
 800027c:	0b03      	lsrs	r3, r0, #12
 800027e:	428b      	cmp	r3, r1
 8000280:	d319      	bcc.n	80002b6 <__divsi3+0x72>
 8000282:	e000      	b.n	8000286 <__divsi3+0x42>
 8000284:	0a09      	lsrs	r1, r1, #8
 8000286:	0bc3      	lsrs	r3, r0, #15
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x4c>
 800028c:	03cb      	lsls	r3, r1, #15
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b83      	lsrs	r3, r0, #14
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x58>
 8000298:	038b      	lsls	r3, r1, #14
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b43      	lsrs	r3, r0, #13
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x64>
 80002a4:	034b      	lsls	r3, r1, #13
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b03      	lsrs	r3, r0, #12
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x70>
 80002b0:	030b      	lsls	r3, r1, #12
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0ac3      	lsrs	r3, r0, #11
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x7c>
 80002bc:	02cb      	lsls	r3, r1, #11
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a83      	lsrs	r3, r0, #10
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x88>
 80002c8:	028b      	lsls	r3, r1, #10
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a43      	lsrs	r3, r0, #9
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x94>
 80002d4:	024b      	lsls	r3, r1, #9
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a03      	lsrs	r3, r0, #8
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0xa0>
 80002e0:	020b      	lsls	r3, r1, #8
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	d2cd      	bcs.n	8000284 <__divsi3+0x40>
 80002e8:	09c3      	lsrs	r3, r0, #7
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xae>
 80002ee:	01cb      	lsls	r3, r1, #7
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0983      	lsrs	r3, r0, #6
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xba>
 80002fa:	018b      	lsls	r3, r1, #6
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0943      	lsrs	r3, r0, #5
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xc6>
 8000306:	014b      	lsls	r3, r1, #5
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0903      	lsrs	r3, r0, #4
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xd2>
 8000312:	010b      	lsls	r3, r1, #4
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	08c3      	lsrs	r3, r0, #3
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xde>
 800031e:	00cb      	lsls	r3, r1, #3
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0883      	lsrs	r3, r0, #2
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xea>
 800032a:	008b      	lsls	r3, r1, #2
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0843      	lsrs	r3, r0, #1
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xf6>
 8000336:	004b      	lsls	r3, r1, #1
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	1a41      	subs	r1, r0, r1
 800033e:	d200      	bcs.n	8000342 <__divsi3+0xfe>
 8000340:	4601      	mov	r1, r0
 8000342:	4152      	adcs	r2, r2
 8000344:	4610      	mov	r0, r2
 8000346:	4770      	bx	lr
 8000348:	e05d      	b.n	8000406 <__divsi3+0x1c2>
 800034a:	0fca      	lsrs	r2, r1, #31
 800034c:	d000      	beq.n	8000350 <__divsi3+0x10c>
 800034e:	4249      	negs	r1, r1
 8000350:	1003      	asrs	r3, r0, #32
 8000352:	d300      	bcc.n	8000356 <__divsi3+0x112>
 8000354:	4240      	negs	r0, r0
 8000356:	4053      	eors	r3, r2
 8000358:	2200      	movs	r2, #0
 800035a:	469c      	mov	ip, r3
 800035c:	0903      	lsrs	r3, r0, #4
 800035e:	428b      	cmp	r3, r1
 8000360:	d32d      	bcc.n	80003be <__divsi3+0x17a>
 8000362:	0a03      	lsrs	r3, r0, #8
 8000364:	428b      	cmp	r3, r1
 8000366:	d312      	bcc.n	800038e <__divsi3+0x14a>
 8000368:	22fc      	movs	r2, #252	; 0xfc
 800036a:	0189      	lsls	r1, r1, #6
 800036c:	ba12      	rev	r2, r2
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d30c      	bcc.n	800038e <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d308      	bcc.n	800038e <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d304      	bcc.n	800038e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	d03a      	beq.n	80003fe <__divsi3+0x1ba>
 8000388:	1192      	asrs	r2, r2, #6
 800038a:	e000      	b.n	800038e <__divsi3+0x14a>
 800038c:	0989      	lsrs	r1, r1, #6
 800038e:	09c3      	lsrs	r3, r0, #7
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x154>
 8000394:	01cb      	lsls	r3, r1, #7
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0983      	lsrs	r3, r0, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x160>
 80003a0:	018b      	lsls	r3, r1, #6
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0943      	lsrs	r3, r0, #5
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x16c>
 80003ac:	014b      	lsls	r3, r1, #5
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0903      	lsrs	r3, r0, #4
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x178>
 80003b8:	010b      	lsls	r3, r1, #4
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	08c3      	lsrs	r3, r0, #3
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x184>
 80003c4:	00cb      	lsls	r3, r1, #3
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0883      	lsrs	r3, r0, #2
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x190>
 80003d0:	008b      	lsls	r3, r1, #2
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	d2d9      	bcs.n	800038c <__divsi3+0x148>
 80003d8:	0843      	lsrs	r3, r0, #1
 80003da:	428b      	cmp	r3, r1
 80003dc:	d301      	bcc.n	80003e2 <__divsi3+0x19e>
 80003de:	004b      	lsls	r3, r1, #1
 80003e0:	1ac0      	subs	r0, r0, r3
 80003e2:	4152      	adcs	r2, r2
 80003e4:	1a41      	subs	r1, r0, r1
 80003e6:	d200      	bcs.n	80003ea <__divsi3+0x1a6>
 80003e8:	4601      	mov	r1, r0
 80003ea:	4663      	mov	r3, ip
 80003ec:	4152      	adcs	r2, r2
 80003ee:	105b      	asrs	r3, r3, #1
 80003f0:	4610      	mov	r0, r2
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x1b4>
 80003f4:	4240      	negs	r0, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d500      	bpl.n	80003fc <__divsi3+0x1b8>
 80003fa:	4249      	negs	r1, r1
 80003fc:	4770      	bx	lr
 80003fe:	4663      	mov	r3, ip
 8000400:	105b      	asrs	r3, r3, #1
 8000402:	d300      	bcc.n	8000406 <__divsi3+0x1c2>
 8000404:	4240      	negs	r0, r0
 8000406:	b501      	push	{r0, lr}
 8000408:	2000      	movs	r0, #0
 800040a:	f000 f805 	bl	8000418 <__aeabi_idiv0>
 800040e:	bd02      	pop	{r1, pc}

08000410 <__aeabi_idivmod>:
 8000410:	2900      	cmp	r1, #0
 8000412:	d0f8      	beq.n	8000406 <__divsi3+0x1c2>
 8000414:	e716      	b.n	8000244 <__divsi3>
 8000416:	4770      	bx	lr

08000418 <__aeabi_idiv0>:
 8000418:	4770      	bx	lr
 800041a:	46c0      	nop			; (mov r8, r8)

0800041c <__aeabi_cdrcmple>:
 800041c:	4684      	mov	ip, r0
 800041e:	1c10      	adds	r0, r2, #0
 8000420:	4662      	mov	r2, ip
 8000422:	468c      	mov	ip, r1
 8000424:	1c19      	adds	r1, r3, #0
 8000426:	4663      	mov	r3, ip
 8000428:	e000      	b.n	800042c <__aeabi_cdcmpeq>
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdcmpeq>:
 800042c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800042e:	f000 fd83 	bl	8000f38 <__ledf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	d401      	bmi.n	800043a <__aeabi_cdcmpeq+0xe>
 8000436:	2100      	movs	r1, #0
 8000438:	42c8      	cmn	r0, r1
 800043a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800043c <__aeabi_dcmpeq>:
 800043c:	b510      	push	{r4, lr}
 800043e:	f000 fcdb 	bl	8000df8 <__eqdf2>
 8000442:	4240      	negs	r0, r0
 8000444:	3001      	adds	r0, #1
 8000446:	bd10      	pop	{r4, pc}

08000448 <__aeabi_dcmplt>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 fd75 	bl	8000f38 <__ledf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	db01      	blt.n	8000456 <__aeabi_dcmplt+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_dcmple>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f000 fd6b 	bl	8000f38 <__ledf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	dd01      	ble.n	800046a <__aeabi_dcmple+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_dcmpgt>:
 8000470:	b510      	push	{r4, lr}
 8000472:	f000 fcfd 	bl	8000e70 <__gedf2>
 8000476:	2800      	cmp	r0, #0
 8000478:	dc01      	bgt.n	800047e <__aeabi_dcmpgt+0xe>
 800047a:	2000      	movs	r0, #0
 800047c:	bd10      	pop	{r4, pc}
 800047e:	2001      	movs	r0, #1
 8000480:	bd10      	pop	{r4, pc}
 8000482:	46c0      	nop			; (mov r8, r8)

08000484 <__aeabi_dcmpge>:
 8000484:	b510      	push	{r4, lr}
 8000486:	f000 fcf3 	bl	8000e70 <__gedf2>
 800048a:	2800      	cmp	r0, #0
 800048c:	da01      	bge.n	8000492 <__aeabi_dcmpge+0xe>
 800048e:	2000      	movs	r0, #0
 8000490:	bd10      	pop	{r4, pc}
 8000492:	2001      	movs	r0, #1
 8000494:	bd10      	pop	{r4, pc}
 8000496:	46c0      	nop			; (mov r8, r8)

08000498 <__aeabi_fadd>:
 8000498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800049a:	4647      	mov	r7, r8
 800049c:	46ce      	mov	lr, r9
 800049e:	0243      	lsls	r3, r0, #9
 80004a0:	0a5b      	lsrs	r3, r3, #9
 80004a2:	0044      	lsls	r4, r0, #1
 80004a4:	0fc2      	lsrs	r2, r0, #31
 80004a6:	469c      	mov	ip, r3
 80004a8:	0048      	lsls	r0, r1, #1
 80004aa:	00dd      	lsls	r5, r3, #3
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	0e24      	lsrs	r4, r4, #24
 80004b0:	0a5b      	lsrs	r3, r3, #9
 80004b2:	0e00      	lsrs	r0, r0, #24
 80004b4:	b580      	push	{r7, lr}
 80004b6:	4698      	mov	r8, r3
 80004b8:	0026      	movs	r6, r4
 80004ba:	4691      	mov	r9, r2
 80004bc:	0fc9      	lsrs	r1, r1, #31
 80004be:	00db      	lsls	r3, r3, #3
 80004c0:	1a27      	subs	r7, r4, r0
 80004c2:	428a      	cmp	r2, r1
 80004c4:	d029      	beq.n	800051a <__aeabi_fadd+0x82>
 80004c6:	2f00      	cmp	r7, #0
 80004c8:	dd15      	ble.n	80004f6 <__aeabi_fadd+0x5e>
 80004ca:	2800      	cmp	r0, #0
 80004cc:	d14a      	bne.n	8000564 <__aeabi_fadd+0xcc>
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d000      	beq.n	80004d4 <__aeabi_fadd+0x3c>
 80004d2:	e095      	b.n	8000600 <__aeabi_fadd+0x168>
 80004d4:	08ed      	lsrs	r5, r5, #3
 80004d6:	2cff      	cmp	r4, #255	; 0xff
 80004d8:	d100      	bne.n	80004dc <__aeabi_fadd+0x44>
 80004da:	e088      	b.n	80005ee <__aeabi_fadd+0x156>
 80004dc:	026b      	lsls	r3, r5, #9
 80004de:	0a5b      	lsrs	r3, r3, #9
 80004e0:	b2e6      	uxtb	r6, r4
 80004e2:	025b      	lsls	r3, r3, #9
 80004e4:	05f6      	lsls	r6, r6, #23
 80004e6:	0a58      	lsrs	r0, r3, #9
 80004e8:	4330      	orrs	r0, r6
 80004ea:	07d2      	lsls	r2, r2, #31
 80004ec:	4310      	orrs	r0, r2
 80004ee:	bc0c      	pop	{r2, r3}
 80004f0:	4690      	mov	r8, r2
 80004f2:	4699      	mov	r9, r3
 80004f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80004f6:	2f00      	cmp	r7, #0
 80004f8:	d000      	beq.n	80004fc <__aeabi_fadd+0x64>
 80004fa:	e087      	b.n	800060c <__aeabi_fadd+0x174>
 80004fc:	1c60      	adds	r0, r4, #1
 80004fe:	b2c0      	uxtb	r0, r0
 8000500:	2801      	cmp	r0, #1
 8000502:	dc00      	bgt.n	8000506 <__aeabi_fadd+0x6e>
 8000504:	e0b6      	b.n	8000674 <__aeabi_fadd+0x1dc>
 8000506:	1aee      	subs	r6, r5, r3
 8000508:	0172      	lsls	r2, r6, #5
 800050a:	d500      	bpl.n	800050e <__aeabi_fadd+0x76>
 800050c:	e0c5      	b.n	800069a <__aeabi_fadd+0x202>
 800050e:	2e00      	cmp	r6, #0
 8000510:	d13d      	bne.n	800058e <__aeabi_fadd+0xf6>
 8000512:	2200      	movs	r2, #0
 8000514:	2600      	movs	r6, #0
 8000516:	2300      	movs	r3, #0
 8000518:	e7e3      	b.n	80004e2 <__aeabi_fadd+0x4a>
 800051a:	2f00      	cmp	r7, #0
 800051c:	dc00      	bgt.n	8000520 <__aeabi_fadd+0x88>
 800051e:	e096      	b.n	800064e <__aeabi_fadd+0x1b6>
 8000520:	2800      	cmp	r0, #0
 8000522:	d05d      	beq.n	80005e0 <__aeabi_fadd+0x148>
 8000524:	2cff      	cmp	r4, #255	; 0xff
 8000526:	d060      	beq.n	80005ea <__aeabi_fadd+0x152>
 8000528:	2280      	movs	r2, #128	; 0x80
 800052a:	04d2      	lsls	r2, r2, #19
 800052c:	4313      	orrs	r3, r2
 800052e:	2f1b      	cmp	r7, #27
 8000530:	dd00      	ble.n	8000534 <__aeabi_fadd+0x9c>
 8000532:	e0ec      	b.n	800070e <__aeabi_fadd+0x276>
 8000534:	2220      	movs	r2, #32
 8000536:	1bd2      	subs	r2, r2, r7
 8000538:	0018      	movs	r0, r3
 800053a:	4093      	lsls	r3, r2
 800053c:	40f8      	lsrs	r0, r7
 800053e:	1e5a      	subs	r2, r3, #1
 8000540:	4193      	sbcs	r3, r2
 8000542:	4303      	orrs	r3, r0
 8000544:	18ed      	adds	r5, r5, r3
 8000546:	016b      	lsls	r3, r5, #5
 8000548:	d57b      	bpl.n	8000642 <__aeabi_fadd+0x1aa>
 800054a:	3401      	adds	r4, #1
 800054c:	2cff      	cmp	r4, #255	; 0xff
 800054e:	d100      	bne.n	8000552 <__aeabi_fadd+0xba>
 8000550:	e0b7      	b.n	80006c2 <__aeabi_fadd+0x22a>
 8000552:	2201      	movs	r2, #1
 8000554:	2607      	movs	r6, #7
 8000556:	402a      	ands	r2, r5
 8000558:	086b      	lsrs	r3, r5, #1
 800055a:	4d9a      	ldr	r5, [pc, #616]	; (80007c4 <__aeabi_fadd+0x32c>)
 800055c:	401d      	ands	r5, r3
 800055e:	4315      	orrs	r5, r2
 8000560:	402e      	ands	r6, r5
 8000562:	e029      	b.n	80005b8 <__aeabi_fadd+0x120>
 8000564:	2cff      	cmp	r4, #255	; 0xff
 8000566:	d0b5      	beq.n	80004d4 <__aeabi_fadd+0x3c>
 8000568:	2280      	movs	r2, #128	; 0x80
 800056a:	04d2      	lsls	r2, r2, #19
 800056c:	4313      	orrs	r3, r2
 800056e:	2f1b      	cmp	r7, #27
 8000570:	dd00      	ble.n	8000574 <__aeabi_fadd+0xdc>
 8000572:	e0b2      	b.n	80006da <__aeabi_fadd+0x242>
 8000574:	2220      	movs	r2, #32
 8000576:	1bd2      	subs	r2, r2, r7
 8000578:	0019      	movs	r1, r3
 800057a:	4093      	lsls	r3, r2
 800057c:	40f9      	lsrs	r1, r7
 800057e:	1e5a      	subs	r2, r3, #1
 8000580:	4193      	sbcs	r3, r2
 8000582:	430b      	orrs	r3, r1
 8000584:	1aed      	subs	r5, r5, r3
 8000586:	016b      	lsls	r3, r5, #5
 8000588:	d55b      	bpl.n	8000642 <__aeabi_fadd+0x1aa>
 800058a:	01ad      	lsls	r5, r5, #6
 800058c:	09ae      	lsrs	r6, r5, #6
 800058e:	0030      	movs	r0, r6
 8000590:	f000 fdaa 	bl	80010e8 <__clzsi2>
 8000594:	3805      	subs	r0, #5
 8000596:	4086      	lsls	r6, r0
 8000598:	4284      	cmp	r4, r0
 800059a:	dc65      	bgt.n	8000668 <__aeabi_fadd+0x1d0>
 800059c:	1b04      	subs	r4, r0, r4
 800059e:	0033      	movs	r3, r6
 80005a0:	2020      	movs	r0, #32
 80005a2:	3401      	adds	r4, #1
 80005a4:	40e3      	lsrs	r3, r4
 80005a6:	1b04      	subs	r4, r0, r4
 80005a8:	40a6      	lsls	r6, r4
 80005aa:	1e75      	subs	r5, r6, #1
 80005ac:	41ae      	sbcs	r6, r5
 80005ae:	4333      	orrs	r3, r6
 80005b0:	2607      	movs	r6, #7
 80005b2:	001d      	movs	r5, r3
 80005b4:	2400      	movs	r4, #0
 80005b6:	401e      	ands	r6, r3
 80005b8:	2201      	movs	r2, #1
 80005ba:	464b      	mov	r3, r9
 80005bc:	401a      	ands	r2, r3
 80005be:	2e00      	cmp	r6, #0
 80005c0:	d004      	beq.n	80005cc <__aeabi_fadd+0x134>
 80005c2:	230f      	movs	r3, #15
 80005c4:	402b      	ands	r3, r5
 80005c6:	2b04      	cmp	r3, #4
 80005c8:	d000      	beq.n	80005cc <__aeabi_fadd+0x134>
 80005ca:	3504      	adds	r5, #4
 80005cc:	016b      	lsls	r3, r5, #5
 80005ce:	d400      	bmi.n	80005d2 <__aeabi_fadd+0x13a>
 80005d0:	e780      	b.n	80004d4 <__aeabi_fadd+0x3c>
 80005d2:	3401      	adds	r4, #1
 80005d4:	b2e6      	uxtb	r6, r4
 80005d6:	2cff      	cmp	r4, #255	; 0xff
 80005d8:	d12f      	bne.n	800063a <__aeabi_fadd+0x1a2>
 80005da:	26ff      	movs	r6, #255	; 0xff
 80005dc:	2300      	movs	r3, #0
 80005de:	e780      	b.n	80004e2 <__aeabi_fadd+0x4a>
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d152      	bne.n	800068a <__aeabi_fadd+0x1f2>
 80005e4:	2cff      	cmp	r4, #255	; 0xff
 80005e6:	d000      	beq.n	80005ea <__aeabi_fadd+0x152>
 80005e8:	e774      	b.n	80004d4 <__aeabi_fadd+0x3c>
 80005ea:	000a      	movs	r2, r1
 80005ec:	08ed      	lsrs	r5, r5, #3
 80005ee:	2d00      	cmp	r5, #0
 80005f0:	d0f3      	beq.n	80005da <__aeabi_fadd+0x142>
 80005f2:	2380      	movs	r3, #128	; 0x80
 80005f4:	03db      	lsls	r3, r3, #15
 80005f6:	432b      	orrs	r3, r5
 80005f8:	025b      	lsls	r3, r3, #9
 80005fa:	0a5b      	lsrs	r3, r3, #9
 80005fc:	26ff      	movs	r6, #255	; 0xff
 80005fe:	e770      	b.n	80004e2 <__aeabi_fadd+0x4a>
 8000600:	3f01      	subs	r7, #1
 8000602:	2f00      	cmp	r7, #0
 8000604:	d0be      	beq.n	8000584 <__aeabi_fadd+0xec>
 8000606:	2cff      	cmp	r4, #255	; 0xff
 8000608:	d1b1      	bne.n	800056e <__aeabi_fadd+0xd6>
 800060a:	e763      	b.n	80004d4 <__aeabi_fadd+0x3c>
 800060c:	2c00      	cmp	r4, #0
 800060e:	d047      	beq.n	80006a0 <__aeabi_fadd+0x208>
 8000610:	28ff      	cmp	r0, #255	; 0xff
 8000612:	d069      	beq.n	80006e8 <__aeabi_fadd+0x250>
 8000614:	2480      	movs	r4, #128	; 0x80
 8000616:	04e4      	lsls	r4, r4, #19
 8000618:	427a      	negs	r2, r7
 800061a:	4325      	orrs	r5, r4
 800061c:	2a1b      	cmp	r2, #27
 800061e:	dd00      	ble.n	8000622 <__aeabi_fadd+0x18a>
 8000620:	e0c5      	b.n	80007ae <__aeabi_fadd+0x316>
 8000622:	002c      	movs	r4, r5
 8000624:	2620      	movs	r6, #32
 8000626:	40d4      	lsrs	r4, r2
 8000628:	1ab2      	subs	r2, r6, r2
 800062a:	4095      	lsls	r5, r2
 800062c:	1e6a      	subs	r2, r5, #1
 800062e:	4195      	sbcs	r5, r2
 8000630:	4325      	orrs	r5, r4
 8000632:	1b5d      	subs	r5, r3, r5
 8000634:	0004      	movs	r4, r0
 8000636:	4689      	mov	r9, r1
 8000638:	e7a5      	b.n	8000586 <__aeabi_fadd+0xee>
 800063a:	01ab      	lsls	r3, r5, #6
 800063c:	0a5b      	lsrs	r3, r3, #9
 800063e:	e750      	b.n	80004e2 <__aeabi_fadd+0x4a>
 8000640:	2400      	movs	r4, #0
 8000642:	2201      	movs	r2, #1
 8000644:	464b      	mov	r3, r9
 8000646:	401a      	ands	r2, r3
 8000648:	076b      	lsls	r3, r5, #29
 800064a:	d1ba      	bne.n	80005c2 <__aeabi_fadd+0x12a>
 800064c:	e742      	b.n	80004d4 <__aeabi_fadd+0x3c>
 800064e:	2f00      	cmp	r7, #0
 8000650:	d13b      	bne.n	80006ca <__aeabi_fadd+0x232>
 8000652:	3401      	adds	r4, #1
 8000654:	b2e0      	uxtb	r0, r4
 8000656:	2801      	cmp	r0, #1
 8000658:	dd4a      	ble.n	80006f0 <__aeabi_fadd+0x258>
 800065a:	2cff      	cmp	r4, #255	; 0xff
 800065c:	d0bd      	beq.n	80005da <__aeabi_fadd+0x142>
 800065e:	2607      	movs	r6, #7
 8000660:	18ed      	adds	r5, r5, r3
 8000662:	086d      	lsrs	r5, r5, #1
 8000664:	402e      	ands	r6, r5
 8000666:	e7a7      	b.n	80005b8 <__aeabi_fadd+0x120>
 8000668:	2307      	movs	r3, #7
 800066a:	4d57      	ldr	r5, [pc, #348]	; (80007c8 <__aeabi_fadd+0x330>)
 800066c:	1a24      	subs	r4, r4, r0
 800066e:	4035      	ands	r5, r6
 8000670:	401e      	ands	r6, r3
 8000672:	e7a1      	b.n	80005b8 <__aeabi_fadd+0x120>
 8000674:	2c00      	cmp	r4, #0
 8000676:	d11b      	bne.n	80006b0 <__aeabi_fadd+0x218>
 8000678:	2d00      	cmp	r5, #0
 800067a:	d16e      	bne.n	800075a <__aeabi_fadd+0x2c2>
 800067c:	2b00      	cmp	r3, #0
 800067e:	d100      	bne.n	8000682 <__aeabi_fadd+0x1ea>
 8000680:	e09a      	b.n	80007b8 <__aeabi_fadd+0x320>
 8000682:	000a      	movs	r2, r1
 8000684:	001d      	movs	r5, r3
 8000686:	003c      	movs	r4, r7
 8000688:	e724      	b.n	80004d4 <__aeabi_fadd+0x3c>
 800068a:	3f01      	subs	r7, #1
 800068c:	2f00      	cmp	r7, #0
 800068e:	d100      	bne.n	8000692 <__aeabi_fadd+0x1fa>
 8000690:	e758      	b.n	8000544 <__aeabi_fadd+0xac>
 8000692:	2cff      	cmp	r4, #255	; 0xff
 8000694:	d000      	beq.n	8000698 <__aeabi_fadd+0x200>
 8000696:	e74a      	b.n	800052e <__aeabi_fadd+0x96>
 8000698:	e7a7      	b.n	80005ea <__aeabi_fadd+0x152>
 800069a:	1b5e      	subs	r6, r3, r5
 800069c:	4689      	mov	r9, r1
 800069e:	e776      	b.n	800058e <__aeabi_fadd+0xf6>
 80006a0:	2d00      	cmp	r5, #0
 80006a2:	d11c      	bne.n	80006de <__aeabi_fadd+0x246>
 80006a4:	000a      	movs	r2, r1
 80006a6:	28ff      	cmp	r0, #255	; 0xff
 80006a8:	d01f      	beq.n	80006ea <__aeabi_fadd+0x252>
 80006aa:	0004      	movs	r4, r0
 80006ac:	001d      	movs	r5, r3
 80006ae:	e711      	b.n	80004d4 <__aeabi_fadd+0x3c>
 80006b0:	2d00      	cmp	r5, #0
 80006b2:	d15d      	bne.n	8000770 <__aeabi_fadd+0x2d8>
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d117      	bne.n	80006e8 <__aeabi_fadd+0x250>
 80006b8:	2380      	movs	r3, #128	; 0x80
 80006ba:	2200      	movs	r2, #0
 80006bc:	03db      	lsls	r3, r3, #15
 80006be:	26ff      	movs	r6, #255	; 0xff
 80006c0:	e70f      	b.n	80004e2 <__aeabi_fadd+0x4a>
 80006c2:	000a      	movs	r2, r1
 80006c4:	26ff      	movs	r6, #255	; 0xff
 80006c6:	2300      	movs	r3, #0
 80006c8:	e70b      	b.n	80004e2 <__aeabi_fadd+0x4a>
 80006ca:	2c00      	cmp	r4, #0
 80006cc:	d121      	bne.n	8000712 <__aeabi_fadd+0x27a>
 80006ce:	2d00      	cmp	r5, #0
 80006d0:	d166      	bne.n	80007a0 <__aeabi_fadd+0x308>
 80006d2:	28ff      	cmp	r0, #255	; 0xff
 80006d4:	d1e9      	bne.n	80006aa <__aeabi_fadd+0x212>
 80006d6:	001d      	movs	r5, r3
 80006d8:	e787      	b.n	80005ea <__aeabi_fadd+0x152>
 80006da:	2301      	movs	r3, #1
 80006dc:	e752      	b.n	8000584 <__aeabi_fadd+0xec>
 80006de:	1c7a      	adds	r2, r7, #1
 80006e0:	d0a7      	beq.n	8000632 <__aeabi_fadd+0x19a>
 80006e2:	43fa      	mvns	r2, r7
 80006e4:	28ff      	cmp	r0, #255	; 0xff
 80006e6:	d199      	bne.n	800061c <__aeabi_fadd+0x184>
 80006e8:	000a      	movs	r2, r1
 80006ea:	001d      	movs	r5, r3
 80006ec:	24ff      	movs	r4, #255	; 0xff
 80006ee:	e6f1      	b.n	80004d4 <__aeabi_fadd+0x3c>
 80006f0:	2e00      	cmp	r6, #0
 80006f2:	d121      	bne.n	8000738 <__aeabi_fadd+0x2a0>
 80006f4:	2d00      	cmp	r5, #0
 80006f6:	d04f      	beq.n	8000798 <__aeabi_fadd+0x300>
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d04c      	beq.n	8000796 <__aeabi_fadd+0x2fe>
 80006fc:	18ed      	adds	r5, r5, r3
 80006fe:	016b      	lsls	r3, r5, #5
 8000700:	d59e      	bpl.n	8000640 <__aeabi_fadd+0x1a8>
 8000702:	4b31      	ldr	r3, [pc, #196]	; (80007c8 <__aeabi_fadd+0x330>)
 8000704:	3607      	adds	r6, #7
 8000706:	402e      	ands	r6, r5
 8000708:	2401      	movs	r4, #1
 800070a:	401d      	ands	r5, r3
 800070c:	e754      	b.n	80005b8 <__aeabi_fadd+0x120>
 800070e:	2301      	movs	r3, #1
 8000710:	e718      	b.n	8000544 <__aeabi_fadd+0xac>
 8000712:	28ff      	cmp	r0, #255	; 0xff
 8000714:	d0df      	beq.n	80006d6 <__aeabi_fadd+0x23e>
 8000716:	2480      	movs	r4, #128	; 0x80
 8000718:	04e4      	lsls	r4, r4, #19
 800071a:	427f      	negs	r7, r7
 800071c:	4325      	orrs	r5, r4
 800071e:	2f1b      	cmp	r7, #27
 8000720:	dc4d      	bgt.n	80007be <__aeabi_fadd+0x326>
 8000722:	2620      	movs	r6, #32
 8000724:	1bf6      	subs	r6, r6, r7
 8000726:	002c      	movs	r4, r5
 8000728:	40b5      	lsls	r5, r6
 800072a:	40fc      	lsrs	r4, r7
 800072c:	1e6a      	subs	r2, r5, #1
 800072e:	4195      	sbcs	r5, r2
 8000730:	4325      	orrs	r5, r4
 8000732:	18ed      	adds	r5, r5, r3
 8000734:	0004      	movs	r4, r0
 8000736:	e706      	b.n	8000546 <__aeabi_fadd+0xae>
 8000738:	2d00      	cmp	r5, #0
 800073a:	d0cc      	beq.n	80006d6 <__aeabi_fadd+0x23e>
 800073c:	2b00      	cmp	r3, #0
 800073e:	d100      	bne.n	8000742 <__aeabi_fadd+0x2aa>
 8000740:	e753      	b.n	80005ea <__aeabi_fadd+0x152>
 8000742:	2180      	movs	r1, #128	; 0x80
 8000744:	4660      	mov	r0, ip
 8000746:	03c9      	lsls	r1, r1, #15
 8000748:	4208      	tst	r0, r1
 800074a:	d003      	beq.n	8000754 <__aeabi_fadd+0x2bc>
 800074c:	4640      	mov	r0, r8
 800074e:	4208      	tst	r0, r1
 8000750:	d100      	bne.n	8000754 <__aeabi_fadd+0x2bc>
 8000752:	001d      	movs	r5, r3
 8000754:	2101      	movs	r1, #1
 8000756:	4011      	ands	r1, r2
 8000758:	e747      	b.n	80005ea <__aeabi_fadd+0x152>
 800075a:	2b00      	cmp	r3, #0
 800075c:	d100      	bne.n	8000760 <__aeabi_fadd+0x2c8>
 800075e:	e6b9      	b.n	80004d4 <__aeabi_fadd+0x3c>
 8000760:	1aea      	subs	r2, r5, r3
 8000762:	0150      	lsls	r0, r2, #5
 8000764:	d525      	bpl.n	80007b2 <__aeabi_fadd+0x31a>
 8000766:	2607      	movs	r6, #7
 8000768:	1b5d      	subs	r5, r3, r5
 800076a:	402e      	ands	r6, r5
 800076c:	4689      	mov	r9, r1
 800076e:	e723      	b.n	80005b8 <__aeabi_fadd+0x120>
 8000770:	24ff      	movs	r4, #255	; 0xff
 8000772:	2b00      	cmp	r3, #0
 8000774:	d100      	bne.n	8000778 <__aeabi_fadd+0x2e0>
 8000776:	e6ad      	b.n	80004d4 <__aeabi_fadd+0x3c>
 8000778:	2280      	movs	r2, #128	; 0x80
 800077a:	4660      	mov	r0, ip
 800077c:	03d2      	lsls	r2, r2, #15
 800077e:	4210      	tst	r0, r2
 8000780:	d004      	beq.n	800078c <__aeabi_fadd+0x2f4>
 8000782:	4640      	mov	r0, r8
 8000784:	4210      	tst	r0, r2
 8000786:	d101      	bne.n	800078c <__aeabi_fadd+0x2f4>
 8000788:	001d      	movs	r5, r3
 800078a:	4689      	mov	r9, r1
 800078c:	2201      	movs	r2, #1
 800078e:	464b      	mov	r3, r9
 8000790:	24ff      	movs	r4, #255	; 0xff
 8000792:	401a      	ands	r2, r3
 8000794:	e69e      	b.n	80004d4 <__aeabi_fadd+0x3c>
 8000796:	002b      	movs	r3, r5
 8000798:	08dd      	lsrs	r5, r3, #3
 800079a:	000a      	movs	r2, r1
 800079c:	2400      	movs	r4, #0
 800079e:	e69d      	b.n	80004dc <__aeabi_fadd+0x44>
 80007a0:	1c7a      	adds	r2, r7, #1
 80007a2:	d0c6      	beq.n	8000732 <__aeabi_fadd+0x29a>
 80007a4:	43ff      	mvns	r7, r7
 80007a6:	28ff      	cmp	r0, #255	; 0xff
 80007a8:	d1b9      	bne.n	800071e <__aeabi_fadd+0x286>
 80007aa:	001d      	movs	r5, r3
 80007ac:	e71d      	b.n	80005ea <__aeabi_fadd+0x152>
 80007ae:	2501      	movs	r5, #1
 80007b0:	e73f      	b.n	8000632 <__aeabi_fadd+0x19a>
 80007b2:	1e15      	subs	r5, r2, #0
 80007b4:	d000      	beq.n	80007b8 <__aeabi_fadd+0x320>
 80007b6:	e744      	b.n	8000642 <__aeabi_fadd+0x1aa>
 80007b8:	2200      	movs	r2, #0
 80007ba:	2300      	movs	r3, #0
 80007bc:	e691      	b.n	80004e2 <__aeabi_fadd+0x4a>
 80007be:	2501      	movs	r5, #1
 80007c0:	e7b7      	b.n	8000732 <__aeabi_fadd+0x29a>
 80007c2:	46c0      	nop			; (mov r8, r8)
 80007c4:	7dffffff 	.word	0x7dffffff
 80007c8:	fbffffff 	.word	0xfbffffff

080007cc <__aeabi_fmul>:
 80007cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ce:	464e      	mov	r6, r9
 80007d0:	4657      	mov	r7, sl
 80007d2:	4645      	mov	r5, r8
 80007d4:	46de      	mov	lr, fp
 80007d6:	b5e0      	push	{r5, r6, r7, lr}
 80007d8:	0243      	lsls	r3, r0, #9
 80007da:	0a5b      	lsrs	r3, r3, #9
 80007dc:	0045      	lsls	r5, r0, #1
 80007de:	b083      	sub	sp, #12
 80007e0:	1c0f      	adds	r7, r1, #0
 80007e2:	4699      	mov	r9, r3
 80007e4:	0e2d      	lsrs	r5, r5, #24
 80007e6:	0fc6      	lsrs	r6, r0, #31
 80007e8:	2d00      	cmp	r5, #0
 80007ea:	d057      	beq.n	800089c <__aeabi_fmul+0xd0>
 80007ec:	2dff      	cmp	r5, #255	; 0xff
 80007ee:	d024      	beq.n	800083a <__aeabi_fmul+0x6e>
 80007f0:	2080      	movs	r0, #128	; 0x80
 80007f2:	00db      	lsls	r3, r3, #3
 80007f4:	04c0      	lsls	r0, r0, #19
 80007f6:	4318      	orrs	r0, r3
 80007f8:	2300      	movs	r3, #0
 80007fa:	4681      	mov	r9, r0
 80007fc:	469a      	mov	sl, r3
 80007fe:	469b      	mov	fp, r3
 8000800:	3d7f      	subs	r5, #127	; 0x7f
 8000802:	027c      	lsls	r4, r7, #9
 8000804:	007a      	lsls	r2, r7, #1
 8000806:	0ffb      	lsrs	r3, r7, #31
 8000808:	0a64      	lsrs	r4, r4, #9
 800080a:	0e12      	lsrs	r2, r2, #24
 800080c:	4698      	mov	r8, r3
 800080e:	d023      	beq.n	8000858 <__aeabi_fmul+0x8c>
 8000810:	2aff      	cmp	r2, #255	; 0xff
 8000812:	d04b      	beq.n	80008ac <__aeabi_fmul+0xe0>
 8000814:	00e3      	lsls	r3, r4, #3
 8000816:	2480      	movs	r4, #128	; 0x80
 8000818:	2000      	movs	r0, #0
 800081a:	04e4      	lsls	r4, r4, #19
 800081c:	3a7f      	subs	r2, #127	; 0x7f
 800081e:	431c      	orrs	r4, r3
 8000820:	18ad      	adds	r5, r5, r2
 8000822:	1c6b      	adds	r3, r5, #1
 8000824:	4647      	mov	r7, r8
 8000826:	9301      	str	r3, [sp, #4]
 8000828:	4653      	mov	r3, sl
 800082a:	4077      	eors	r7, r6
 800082c:	003a      	movs	r2, r7
 800082e:	2b0f      	cmp	r3, #15
 8000830:	d848      	bhi.n	80008c4 <__aeabi_fmul+0xf8>
 8000832:	497d      	ldr	r1, [pc, #500]	; (8000a28 <__aeabi_fmul+0x25c>)
 8000834:	009b      	lsls	r3, r3, #2
 8000836:	58cb      	ldr	r3, [r1, r3]
 8000838:	469f      	mov	pc, r3
 800083a:	2b00      	cmp	r3, #0
 800083c:	d000      	beq.n	8000840 <__aeabi_fmul+0x74>
 800083e:	e085      	b.n	800094c <__aeabi_fmul+0x180>
 8000840:	3308      	adds	r3, #8
 8000842:	469a      	mov	sl, r3
 8000844:	3b06      	subs	r3, #6
 8000846:	469b      	mov	fp, r3
 8000848:	027c      	lsls	r4, r7, #9
 800084a:	007a      	lsls	r2, r7, #1
 800084c:	0ffb      	lsrs	r3, r7, #31
 800084e:	25ff      	movs	r5, #255	; 0xff
 8000850:	0a64      	lsrs	r4, r4, #9
 8000852:	0e12      	lsrs	r2, r2, #24
 8000854:	4698      	mov	r8, r3
 8000856:	d1db      	bne.n	8000810 <__aeabi_fmul+0x44>
 8000858:	2c00      	cmp	r4, #0
 800085a:	d000      	beq.n	800085e <__aeabi_fmul+0x92>
 800085c:	e090      	b.n	8000980 <__aeabi_fmul+0x1b4>
 800085e:	4652      	mov	r2, sl
 8000860:	2301      	movs	r3, #1
 8000862:	431a      	orrs	r2, r3
 8000864:	4692      	mov	sl, r2
 8000866:	2001      	movs	r0, #1
 8000868:	e7db      	b.n	8000822 <__aeabi_fmul+0x56>
 800086a:	464c      	mov	r4, r9
 800086c:	4658      	mov	r0, fp
 800086e:	0017      	movs	r7, r2
 8000870:	2802      	cmp	r0, #2
 8000872:	d024      	beq.n	80008be <__aeabi_fmul+0xf2>
 8000874:	2803      	cmp	r0, #3
 8000876:	d100      	bne.n	800087a <__aeabi_fmul+0xae>
 8000878:	e0cf      	b.n	8000a1a <__aeabi_fmul+0x24e>
 800087a:	2200      	movs	r2, #0
 800087c:	2300      	movs	r3, #0
 800087e:	2801      	cmp	r0, #1
 8000880:	d14d      	bne.n	800091e <__aeabi_fmul+0x152>
 8000882:	0258      	lsls	r0, r3, #9
 8000884:	05d2      	lsls	r2, r2, #23
 8000886:	0a40      	lsrs	r0, r0, #9
 8000888:	07ff      	lsls	r7, r7, #31
 800088a:	4310      	orrs	r0, r2
 800088c:	4338      	orrs	r0, r7
 800088e:	b003      	add	sp, #12
 8000890:	bc3c      	pop	{r2, r3, r4, r5}
 8000892:	4690      	mov	r8, r2
 8000894:	4699      	mov	r9, r3
 8000896:	46a2      	mov	sl, r4
 8000898:	46ab      	mov	fp, r5
 800089a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800089c:	2b00      	cmp	r3, #0
 800089e:	d15b      	bne.n	8000958 <__aeabi_fmul+0x18c>
 80008a0:	2304      	movs	r3, #4
 80008a2:	469a      	mov	sl, r3
 80008a4:	3b03      	subs	r3, #3
 80008a6:	2500      	movs	r5, #0
 80008a8:	469b      	mov	fp, r3
 80008aa:	e7aa      	b.n	8000802 <__aeabi_fmul+0x36>
 80008ac:	35ff      	adds	r5, #255	; 0xff
 80008ae:	2c00      	cmp	r4, #0
 80008b0:	d160      	bne.n	8000974 <__aeabi_fmul+0x1a8>
 80008b2:	4652      	mov	r2, sl
 80008b4:	2302      	movs	r3, #2
 80008b6:	431a      	orrs	r2, r3
 80008b8:	4692      	mov	sl, r2
 80008ba:	2002      	movs	r0, #2
 80008bc:	e7b1      	b.n	8000822 <__aeabi_fmul+0x56>
 80008be:	22ff      	movs	r2, #255	; 0xff
 80008c0:	2300      	movs	r3, #0
 80008c2:	e7de      	b.n	8000882 <__aeabi_fmul+0xb6>
 80008c4:	464b      	mov	r3, r9
 80008c6:	0c1b      	lsrs	r3, r3, #16
 80008c8:	469c      	mov	ip, r3
 80008ca:	464b      	mov	r3, r9
 80008cc:	0426      	lsls	r6, r4, #16
 80008ce:	0c36      	lsrs	r6, r6, #16
 80008d0:	0418      	lsls	r0, r3, #16
 80008d2:	4661      	mov	r1, ip
 80008d4:	0033      	movs	r3, r6
 80008d6:	0c22      	lsrs	r2, r4, #16
 80008d8:	4664      	mov	r4, ip
 80008da:	0c00      	lsrs	r0, r0, #16
 80008dc:	4343      	muls	r3, r0
 80008de:	434e      	muls	r6, r1
 80008e0:	4350      	muls	r0, r2
 80008e2:	4354      	muls	r4, r2
 80008e4:	1980      	adds	r0, r0, r6
 80008e6:	0c1a      	lsrs	r2, r3, #16
 80008e8:	1812      	adds	r2, r2, r0
 80008ea:	4296      	cmp	r6, r2
 80008ec:	d903      	bls.n	80008f6 <__aeabi_fmul+0x12a>
 80008ee:	2180      	movs	r1, #128	; 0x80
 80008f0:	0249      	lsls	r1, r1, #9
 80008f2:	468c      	mov	ip, r1
 80008f4:	4464      	add	r4, ip
 80008f6:	041b      	lsls	r3, r3, #16
 80008f8:	0c1b      	lsrs	r3, r3, #16
 80008fa:	0410      	lsls	r0, r2, #16
 80008fc:	18c0      	adds	r0, r0, r3
 80008fe:	0183      	lsls	r3, r0, #6
 8000900:	1e5e      	subs	r6, r3, #1
 8000902:	41b3      	sbcs	r3, r6
 8000904:	0e80      	lsrs	r0, r0, #26
 8000906:	4318      	orrs	r0, r3
 8000908:	0c13      	lsrs	r3, r2, #16
 800090a:	191b      	adds	r3, r3, r4
 800090c:	019b      	lsls	r3, r3, #6
 800090e:	4303      	orrs	r3, r0
 8000910:	001c      	movs	r4, r3
 8000912:	0123      	lsls	r3, r4, #4
 8000914:	d579      	bpl.n	8000a0a <__aeabi_fmul+0x23e>
 8000916:	2301      	movs	r3, #1
 8000918:	0862      	lsrs	r2, r4, #1
 800091a:	401c      	ands	r4, r3
 800091c:	4314      	orrs	r4, r2
 800091e:	9a01      	ldr	r2, [sp, #4]
 8000920:	327f      	adds	r2, #127	; 0x7f
 8000922:	2a00      	cmp	r2, #0
 8000924:	dd4d      	ble.n	80009c2 <__aeabi_fmul+0x1f6>
 8000926:	0763      	lsls	r3, r4, #29
 8000928:	d004      	beq.n	8000934 <__aeabi_fmul+0x168>
 800092a:	230f      	movs	r3, #15
 800092c:	4023      	ands	r3, r4
 800092e:	2b04      	cmp	r3, #4
 8000930:	d000      	beq.n	8000934 <__aeabi_fmul+0x168>
 8000932:	3404      	adds	r4, #4
 8000934:	0123      	lsls	r3, r4, #4
 8000936:	d503      	bpl.n	8000940 <__aeabi_fmul+0x174>
 8000938:	4b3c      	ldr	r3, [pc, #240]	; (8000a2c <__aeabi_fmul+0x260>)
 800093a:	9a01      	ldr	r2, [sp, #4]
 800093c:	401c      	ands	r4, r3
 800093e:	3280      	adds	r2, #128	; 0x80
 8000940:	2afe      	cmp	r2, #254	; 0xfe
 8000942:	dcbc      	bgt.n	80008be <__aeabi_fmul+0xf2>
 8000944:	01a3      	lsls	r3, r4, #6
 8000946:	0a5b      	lsrs	r3, r3, #9
 8000948:	b2d2      	uxtb	r2, r2
 800094a:	e79a      	b.n	8000882 <__aeabi_fmul+0xb6>
 800094c:	230c      	movs	r3, #12
 800094e:	469a      	mov	sl, r3
 8000950:	3b09      	subs	r3, #9
 8000952:	25ff      	movs	r5, #255	; 0xff
 8000954:	469b      	mov	fp, r3
 8000956:	e754      	b.n	8000802 <__aeabi_fmul+0x36>
 8000958:	0018      	movs	r0, r3
 800095a:	f000 fbc5 	bl	80010e8 <__clzsi2>
 800095e:	464a      	mov	r2, r9
 8000960:	1f43      	subs	r3, r0, #5
 8000962:	2576      	movs	r5, #118	; 0x76
 8000964:	409a      	lsls	r2, r3
 8000966:	2300      	movs	r3, #0
 8000968:	426d      	negs	r5, r5
 800096a:	4691      	mov	r9, r2
 800096c:	1a2d      	subs	r5, r5, r0
 800096e:	469a      	mov	sl, r3
 8000970:	469b      	mov	fp, r3
 8000972:	e746      	b.n	8000802 <__aeabi_fmul+0x36>
 8000974:	4652      	mov	r2, sl
 8000976:	2303      	movs	r3, #3
 8000978:	431a      	orrs	r2, r3
 800097a:	4692      	mov	sl, r2
 800097c:	2003      	movs	r0, #3
 800097e:	e750      	b.n	8000822 <__aeabi_fmul+0x56>
 8000980:	0020      	movs	r0, r4
 8000982:	f000 fbb1 	bl	80010e8 <__clzsi2>
 8000986:	1f43      	subs	r3, r0, #5
 8000988:	1a2d      	subs	r5, r5, r0
 800098a:	409c      	lsls	r4, r3
 800098c:	3d76      	subs	r5, #118	; 0x76
 800098e:	2000      	movs	r0, #0
 8000990:	e747      	b.n	8000822 <__aeabi_fmul+0x56>
 8000992:	2380      	movs	r3, #128	; 0x80
 8000994:	2700      	movs	r7, #0
 8000996:	03db      	lsls	r3, r3, #15
 8000998:	22ff      	movs	r2, #255	; 0xff
 800099a:	e772      	b.n	8000882 <__aeabi_fmul+0xb6>
 800099c:	4642      	mov	r2, r8
 800099e:	e766      	b.n	800086e <__aeabi_fmul+0xa2>
 80009a0:	464c      	mov	r4, r9
 80009a2:	0032      	movs	r2, r6
 80009a4:	4658      	mov	r0, fp
 80009a6:	e762      	b.n	800086e <__aeabi_fmul+0xa2>
 80009a8:	2380      	movs	r3, #128	; 0x80
 80009aa:	464a      	mov	r2, r9
 80009ac:	03db      	lsls	r3, r3, #15
 80009ae:	421a      	tst	r2, r3
 80009b0:	d022      	beq.n	80009f8 <__aeabi_fmul+0x22c>
 80009b2:	421c      	tst	r4, r3
 80009b4:	d120      	bne.n	80009f8 <__aeabi_fmul+0x22c>
 80009b6:	4323      	orrs	r3, r4
 80009b8:	025b      	lsls	r3, r3, #9
 80009ba:	0a5b      	lsrs	r3, r3, #9
 80009bc:	4647      	mov	r7, r8
 80009be:	22ff      	movs	r2, #255	; 0xff
 80009c0:	e75f      	b.n	8000882 <__aeabi_fmul+0xb6>
 80009c2:	2301      	movs	r3, #1
 80009c4:	1a9a      	subs	r2, r3, r2
 80009c6:	2a1b      	cmp	r2, #27
 80009c8:	dc21      	bgt.n	8000a0e <__aeabi_fmul+0x242>
 80009ca:	0023      	movs	r3, r4
 80009cc:	9901      	ldr	r1, [sp, #4]
 80009ce:	40d3      	lsrs	r3, r2
 80009d0:	319e      	adds	r1, #158	; 0x9e
 80009d2:	408c      	lsls	r4, r1
 80009d4:	001a      	movs	r2, r3
 80009d6:	0023      	movs	r3, r4
 80009d8:	1e5c      	subs	r4, r3, #1
 80009da:	41a3      	sbcs	r3, r4
 80009dc:	4313      	orrs	r3, r2
 80009de:	075a      	lsls	r2, r3, #29
 80009e0:	d004      	beq.n	80009ec <__aeabi_fmul+0x220>
 80009e2:	220f      	movs	r2, #15
 80009e4:	401a      	ands	r2, r3
 80009e6:	2a04      	cmp	r2, #4
 80009e8:	d000      	beq.n	80009ec <__aeabi_fmul+0x220>
 80009ea:	3304      	adds	r3, #4
 80009ec:	015a      	lsls	r2, r3, #5
 80009ee:	d411      	bmi.n	8000a14 <__aeabi_fmul+0x248>
 80009f0:	019b      	lsls	r3, r3, #6
 80009f2:	0a5b      	lsrs	r3, r3, #9
 80009f4:	2200      	movs	r2, #0
 80009f6:	e744      	b.n	8000882 <__aeabi_fmul+0xb6>
 80009f8:	2380      	movs	r3, #128	; 0x80
 80009fa:	464a      	mov	r2, r9
 80009fc:	03db      	lsls	r3, r3, #15
 80009fe:	4313      	orrs	r3, r2
 8000a00:	025b      	lsls	r3, r3, #9
 8000a02:	0a5b      	lsrs	r3, r3, #9
 8000a04:	0037      	movs	r7, r6
 8000a06:	22ff      	movs	r2, #255	; 0xff
 8000a08:	e73b      	b.n	8000882 <__aeabi_fmul+0xb6>
 8000a0a:	9501      	str	r5, [sp, #4]
 8000a0c:	e787      	b.n	800091e <__aeabi_fmul+0x152>
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2300      	movs	r3, #0
 8000a12:	e736      	b.n	8000882 <__aeabi_fmul+0xb6>
 8000a14:	2201      	movs	r2, #1
 8000a16:	2300      	movs	r3, #0
 8000a18:	e733      	b.n	8000882 <__aeabi_fmul+0xb6>
 8000a1a:	2380      	movs	r3, #128	; 0x80
 8000a1c:	03db      	lsls	r3, r3, #15
 8000a1e:	4323      	orrs	r3, r4
 8000a20:	025b      	lsls	r3, r3, #9
 8000a22:	0a5b      	lsrs	r3, r3, #9
 8000a24:	22ff      	movs	r2, #255	; 0xff
 8000a26:	e72c      	b.n	8000882 <__aeabi_fmul+0xb6>
 8000a28:	08003b90 	.word	0x08003b90
 8000a2c:	f7ffffff 	.word	0xf7ffffff

08000a30 <__aeabi_fsub>:
 8000a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a32:	4647      	mov	r7, r8
 8000a34:	46ce      	mov	lr, r9
 8000a36:	0044      	lsls	r4, r0, #1
 8000a38:	0fc2      	lsrs	r2, r0, #31
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	0247      	lsls	r7, r0, #9
 8000a3e:	0248      	lsls	r0, r1, #9
 8000a40:	0a40      	lsrs	r0, r0, #9
 8000a42:	4684      	mov	ip, r0
 8000a44:	4666      	mov	r6, ip
 8000a46:	0048      	lsls	r0, r1, #1
 8000a48:	0a7f      	lsrs	r7, r7, #9
 8000a4a:	0e24      	lsrs	r4, r4, #24
 8000a4c:	00f6      	lsls	r6, r6, #3
 8000a4e:	0025      	movs	r5, r4
 8000a50:	4690      	mov	r8, r2
 8000a52:	00fb      	lsls	r3, r7, #3
 8000a54:	0e00      	lsrs	r0, r0, #24
 8000a56:	0fc9      	lsrs	r1, r1, #31
 8000a58:	46b1      	mov	r9, r6
 8000a5a:	28ff      	cmp	r0, #255	; 0xff
 8000a5c:	d100      	bne.n	8000a60 <__aeabi_fsub+0x30>
 8000a5e:	e085      	b.n	8000b6c <__aeabi_fsub+0x13c>
 8000a60:	2601      	movs	r6, #1
 8000a62:	4071      	eors	r1, r6
 8000a64:	1a26      	subs	r6, r4, r0
 8000a66:	4291      	cmp	r1, r2
 8000a68:	d057      	beq.n	8000b1a <__aeabi_fsub+0xea>
 8000a6a:	2e00      	cmp	r6, #0
 8000a6c:	dd43      	ble.n	8000af6 <__aeabi_fsub+0xc6>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	d000      	beq.n	8000a74 <__aeabi_fsub+0x44>
 8000a72:	e07f      	b.n	8000b74 <__aeabi_fsub+0x144>
 8000a74:	4649      	mov	r1, r9
 8000a76:	2900      	cmp	r1, #0
 8000a78:	d100      	bne.n	8000a7c <__aeabi_fsub+0x4c>
 8000a7a:	e0aa      	b.n	8000bd2 <__aeabi_fsub+0x1a2>
 8000a7c:	3e01      	subs	r6, #1
 8000a7e:	2e00      	cmp	r6, #0
 8000a80:	d000      	beq.n	8000a84 <__aeabi_fsub+0x54>
 8000a82:	e0f7      	b.n	8000c74 <__aeabi_fsub+0x244>
 8000a84:	1a5b      	subs	r3, r3, r1
 8000a86:	015a      	lsls	r2, r3, #5
 8000a88:	d400      	bmi.n	8000a8c <__aeabi_fsub+0x5c>
 8000a8a:	e08b      	b.n	8000ba4 <__aeabi_fsub+0x174>
 8000a8c:	019b      	lsls	r3, r3, #6
 8000a8e:	099c      	lsrs	r4, r3, #6
 8000a90:	0020      	movs	r0, r4
 8000a92:	f000 fb29 	bl	80010e8 <__clzsi2>
 8000a96:	3805      	subs	r0, #5
 8000a98:	4084      	lsls	r4, r0
 8000a9a:	4285      	cmp	r5, r0
 8000a9c:	dd00      	ble.n	8000aa0 <__aeabi_fsub+0x70>
 8000a9e:	e0d3      	b.n	8000c48 <__aeabi_fsub+0x218>
 8000aa0:	1b45      	subs	r5, r0, r5
 8000aa2:	0023      	movs	r3, r4
 8000aa4:	2020      	movs	r0, #32
 8000aa6:	3501      	adds	r5, #1
 8000aa8:	40eb      	lsrs	r3, r5
 8000aaa:	1b45      	subs	r5, r0, r5
 8000aac:	40ac      	lsls	r4, r5
 8000aae:	1e62      	subs	r2, r4, #1
 8000ab0:	4194      	sbcs	r4, r2
 8000ab2:	4323      	orrs	r3, r4
 8000ab4:	2407      	movs	r4, #7
 8000ab6:	2500      	movs	r5, #0
 8000ab8:	401c      	ands	r4, r3
 8000aba:	2201      	movs	r2, #1
 8000abc:	4641      	mov	r1, r8
 8000abe:	400a      	ands	r2, r1
 8000ac0:	2c00      	cmp	r4, #0
 8000ac2:	d004      	beq.n	8000ace <__aeabi_fsub+0x9e>
 8000ac4:	210f      	movs	r1, #15
 8000ac6:	4019      	ands	r1, r3
 8000ac8:	2904      	cmp	r1, #4
 8000aca:	d000      	beq.n	8000ace <__aeabi_fsub+0x9e>
 8000acc:	3304      	adds	r3, #4
 8000ace:	0159      	lsls	r1, r3, #5
 8000ad0:	d400      	bmi.n	8000ad4 <__aeabi_fsub+0xa4>
 8000ad2:	e080      	b.n	8000bd6 <__aeabi_fsub+0x1a6>
 8000ad4:	3501      	adds	r5, #1
 8000ad6:	b2ec      	uxtb	r4, r5
 8000ad8:	2dff      	cmp	r5, #255	; 0xff
 8000ada:	d000      	beq.n	8000ade <__aeabi_fsub+0xae>
 8000adc:	e0a3      	b.n	8000c26 <__aeabi_fsub+0x1f6>
 8000ade:	24ff      	movs	r4, #255	; 0xff
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	025b      	lsls	r3, r3, #9
 8000ae4:	05e4      	lsls	r4, r4, #23
 8000ae6:	0a58      	lsrs	r0, r3, #9
 8000ae8:	07d2      	lsls	r2, r2, #31
 8000aea:	4320      	orrs	r0, r4
 8000aec:	4310      	orrs	r0, r2
 8000aee:	bc0c      	pop	{r2, r3}
 8000af0:	4690      	mov	r8, r2
 8000af2:	4699      	mov	r9, r3
 8000af4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000af6:	2e00      	cmp	r6, #0
 8000af8:	d174      	bne.n	8000be4 <__aeabi_fsub+0x1b4>
 8000afa:	1c60      	adds	r0, r4, #1
 8000afc:	b2c0      	uxtb	r0, r0
 8000afe:	2801      	cmp	r0, #1
 8000b00:	dc00      	bgt.n	8000b04 <__aeabi_fsub+0xd4>
 8000b02:	e0a7      	b.n	8000c54 <__aeabi_fsub+0x224>
 8000b04:	464a      	mov	r2, r9
 8000b06:	1a9c      	subs	r4, r3, r2
 8000b08:	0162      	lsls	r2, r4, #5
 8000b0a:	d500      	bpl.n	8000b0e <__aeabi_fsub+0xde>
 8000b0c:	e0b6      	b.n	8000c7c <__aeabi_fsub+0x24c>
 8000b0e:	2c00      	cmp	r4, #0
 8000b10:	d1be      	bne.n	8000a90 <__aeabi_fsub+0x60>
 8000b12:	2200      	movs	r2, #0
 8000b14:	2400      	movs	r4, #0
 8000b16:	2300      	movs	r3, #0
 8000b18:	e7e3      	b.n	8000ae2 <__aeabi_fsub+0xb2>
 8000b1a:	2e00      	cmp	r6, #0
 8000b1c:	dc00      	bgt.n	8000b20 <__aeabi_fsub+0xf0>
 8000b1e:	e085      	b.n	8000c2c <__aeabi_fsub+0x1fc>
 8000b20:	2800      	cmp	r0, #0
 8000b22:	d046      	beq.n	8000bb2 <__aeabi_fsub+0x182>
 8000b24:	2cff      	cmp	r4, #255	; 0xff
 8000b26:	d049      	beq.n	8000bbc <__aeabi_fsub+0x18c>
 8000b28:	2280      	movs	r2, #128	; 0x80
 8000b2a:	4648      	mov	r0, r9
 8000b2c:	04d2      	lsls	r2, r2, #19
 8000b2e:	4310      	orrs	r0, r2
 8000b30:	4681      	mov	r9, r0
 8000b32:	2201      	movs	r2, #1
 8000b34:	2e1b      	cmp	r6, #27
 8000b36:	dc09      	bgt.n	8000b4c <__aeabi_fsub+0x11c>
 8000b38:	2020      	movs	r0, #32
 8000b3a:	464c      	mov	r4, r9
 8000b3c:	1b80      	subs	r0, r0, r6
 8000b3e:	4084      	lsls	r4, r0
 8000b40:	464a      	mov	r2, r9
 8000b42:	0020      	movs	r0, r4
 8000b44:	40f2      	lsrs	r2, r6
 8000b46:	1e44      	subs	r4, r0, #1
 8000b48:	41a0      	sbcs	r0, r4
 8000b4a:	4302      	orrs	r2, r0
 8000b4c:	189b      	adds	r3, r3, r2
 8000b4e:	015a      	lsls	r2, r3, #5
 8000b50:	d528      	bpl.n	8000ba4 <__aeabi_fsub+0x174>
 8000b52:	3501      	adds	r5, #1
 8000b54:	2dff      	cmp	r5, #255	; 0xff
 8000b56:	d100      	bne.n	8000b5a <__aeabi_fsub+0x12a>
 8000b58:	e0a8      	b.n	8000cac <__aeabi_fsub+0x27c>
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	2407      	movs	r4, #7
 8000b5e:	4994      	ldr	r1, [pc, #592]	; (8000db0 <__aeabi_fsub+0x380>)
 8000b60:	401a      	ands	r2, r3
 8000b62:	085b      	lsrs	r3, r3, #1
 8000b64:	400b      	ands	r3, r1
 8000b66:	4313      	orrs	r3, r2
 8000b68:	401c      	ands	r4, r3
 8000b6a:	e7a6      	b.n	8000aba <__aeabi_fsub+0x8a>
 8000b6c:	2e00      	cmp	r6, #0
 8000b6e:	d000      	beq.n	8000b72 <__aeabi_fsub+0x142>
 8000b70:	e778      	b.n	8000a64 <__aeabi_fsub+0x34>
 8000b72:	e775      	b.n	8000a60 <__aeabi_fsub+0x30>
 8000b74:	2cff      	cmp	r4, #255	; 0xff
 8000b76:	d054      	beq.n	8000c22 <__aeabi_fsub+0x1f2>
 8000b78:	2280      	movs	r2, #128	; 0x80
 8000b7a:	4649      	mov	r1, r9
 8000b7c:	04d2      	lsls	r2, r2, #19
 8000b7e:	4311      	orrs	r1, r2
 8000b80:	4689      	mov	r9, r1
 8000b82:	2201      	movs	r2, #1
 8000b84:	2e1b      	cmp	r6, #27
 8000b86:	dc09      	bgt.n	8000b9c <__aeabi_fsub+0x16c>
 8000b88:	2120      	movs	r1, #32
 8000b8a:	4648      	mov	r0, r9
 8000b8c:	1b89      	subs	r1, r1, r6
 8000b8e:	4088      	lsls	r0, r1
 8000b90:	464a      	mov	r2, r9
 8000b92:	0001      	movs	r1, r0
 8000b94:	40f2      	lsrs	r2, r6
 8000b96:	1e48      	subs	r0, r1, #1
 8000b98:	4181      	sbcs	r1, r0
 8000b9a:	430a      	orrs	r2, r1
 8000b9c:	1a9b      	subs	r3, r3, r2
 8000b9e:	015a      	lsls	r2, r3, #5
 8000ba0:	d500      	bpl.n	8000ba4 <__aeabi_fsub+0x174>
 8000ba2:	e773      	b.n	8000a8c <__aeabi_fsub+0x5c>
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	4641      	mov	r1, r8
 8000ba8:	400a      	ands	r2, r1
 8000baa:	0759      	lsls	r1, r3, #29
 8000bac:	d000      	beq.n	8000bb0 <__aeabi_fsub+0x180>
 8000bae:	e789      	b.n	8000ac4 <__aeabi_fsub+0x94>
 8000bb0:	e011      	b.n	8000bd6 <__aeabi_fsub+0x1a6>
 8000bb2:	4648      	mov	r0, r9
 8000bb4:	2800      	cmp	r0, #0
 8000bb6:	d158      	bne.n	8000c6a <__aeabi_fsub+0x23a>
 8000bb8:	2cff      	cmp	r4, #255	; 0xff
 8000bba:	d10c      	bne.n	8000bd6 <__aeabi_fsub+0x1a6>
 8000bbc:	08db      	lsrs	r3, r3, #3
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d100      	bne.n	8000bc4 <__aeabi_fsub+0x194>
 8000bc2:	e78c      	b.n	8000ade <__aeabi_fsub+0xae>
 8000bc4:	2080      	movs	r0, #128	; 0x80
 8000bc6:	03c0      	lsls	r0, r0, #15
 8000bc8:	4303      	orrs	r3, r0
 8000bca:	025b      	lsls	r3, r3, #9
 8000bcc:	0a5b      	lsrs	r3, r3, #9
 8000bce:	24ff      	movs	r4, #255	; 0xff
 8000bd0:	e787      	b.n	8000ae2 <__aeabi_fsub+0xb2>
 8000bd2:	2cff      	cmp	r4, #255	; 0xff
 8000bd4:	d025      	beq.n	8000c22 <__aeabi_fsub+0x1f2>
 8000bd6:	08db      	lsrs	r3, r3, #3
 8000bd8:	2dff      	cmp	r5, #255	; 0xff
 8000bda:	d0f0      	beq.n	8000bbe <__aeabi_fsub+0x18e>
 8000bdc:	025b      	lsls	r3, r3, #9
 8000bde:	0a5b      	lsrs	r3, r3, #9
 8000be0:	b2ec      	uxtb	r4, r5
 8000be2:	e77e      	b.n	8000ae2 <__aeabi_fsub+0xb2>
 8000be4:	2c00      	cmp	r4, #0
 8000be6:	d04d      	beq.n	8000c84 <__aeabi_fsub+0x254>
 8000be8:	28ff      	cmp	r0, #255	; 0xff
 8000bea:	d018      	beq.n	8000c1e <__aeabi_fsub+0x1ee>
 8000bec:	2480      	movs	r4, #128	; 0x80
 8000bee:	04e4      	lsls	r4, r4, #19
 8000bf0:	4272      	negs	r2, r6
 8000bf2:	4323      	orrs	r3, r4
 8000bf4:	2a1b      	cmp	r2, #27
 8000bf6:	dd00      	ble.n	8000bfa <__aeabi_fsub+0x1ca>
 8000bf8:	e0c4      	b.n	8000d84 <__aeabi_fsub+0x354>
 8000bfa:	001c      	movs	r4, r3
 8000bfc:	2520      	movs	r5, #32
 8000bfe:	40d4      	lsrs	r4, r2
 8000c00:	1aaa      	subs	r2, r5, r2
 8000c02:	4093      	lsls	r3, r2
 8000c04:	1e5a      	subs	r2, r3, #1
 8000c06:	4193      	sbcs	r3, r2
 8000c08:	4323      	orrs	r3, r4
 8000c0a:	464a      	mov	r2, r9
 8000c0c:	0005      	movs	r5, r0
 8000c0e:	1ad3      	subs	r3, r2, r3
 8000c10:	4688      	mov	r8, r1
 8000c12:	e738      	b.n	8000a86 <__aeabi_fsub+0x56>
 8000c14:	1c72      	adds	r2, r6, #1
 8000c16:	d0f8      	beq.n	8000c0a <__aeabi_fsub+0x1da>
 8000c18:	43f2      	mvns	r2, r6
 8000c1a:	28ff      	cmp	r0, #255	; 0xff
 8000c1c:	d1ea      	bne.n	8000bf4 <__aeabi_fsub+0x1c4>
 8000c1e:	000a      	movs	r2, r1
 8000c20:	464b      	mov	r3, r9
 8000c22:	25ff      	movs	r5, #255	; 0xff
 8000c24:	e7d7      	b.n	8000bd6 <__aeabi_fsub+0x1a6>
 8000c26:	019b      	lsls	r3, r3, #6
 8000c28:	0a5b      	lsrs	r3, r3, #9
 8000c2a:	e75a      	b.n	8000ae2 <__aeabi_fsub+0xb2>
 8000c2c:	2e00      	cmp	r6, #0
 8000c2e:	d141      	bne.n	8000cb4 <__aeabi_fsub+0x284>
 8000c30:	1c65      	adds	r5, r4, #1
 8000c32:	b2e9      	uxtb	r1, r5
 8000c34:	2901      	cmp	r1, #1
 8000c36:	dd45      	ble.n	8000cc4 <__aeabi_fsub+0x294>
 8000c38:	2dff      	cmp	r5, #255	; 0xff
 8000c3a:	d100      	bne.n	8000c3e <__aeabi_fsub+0x20e>
 8000c3c:	e74f      	b.n	8000ade <__aeabi_fsub+0xae>
 8000c3e:	2407      	movs	r4, #7
 8000c40:	444b      	add	r3, r9
 8000c42:	085b      	lsrs	r3, r3, #1
 8000c44:	401c      	ands	r4, r3
 8000c46:	e738      	b.n	8000aba <__aeabi_fsub+0x8a>
 8000c48:	2207      	movs	r2, #7
 8000c4a:	4b5a      	ldr	r3, [pc, #360]	; (8000db4 <__aeabi_fsub+0x384>)
 8000c4c:	1a2d      	subs	r5, r5, r0
 8000c4e:	4023      	ands	r3, r4
 8000c50:	4014      	ands	r4, r2
 8000c52:	e732      	b.n	8000aba <__aeabi_fsub+0x8a>
 8000c54:	2c00      	cmp	r4, #0
 8000c56:	d11d      	bne.n	8000c94 <__aeabi_fsub+0x264>
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d17a      	bne.n	8000d52 <__aeabi_fsub+0x322>
 8000c5c:	464b      	mov	r3, r9
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d100      	bne.n	8000c64 <__aeabi_fsub+0x234>
 8000c62:	e091      	b.n	8000d88 <__aeabi_fsub+0x358>
 8000c64:	000a      	movs	r2, r1
 8000c66:	2500      	movs	r5, #0
 8000c68:	e7b5      	b.n	8000bd6 <__aeabi_fsub+0x1a6>
 8000c6a:	3e01      	subs	r6, #1
 8000c6c:	2e00      	cmp	r6, #0
 8000c6e:	d119      	bne.n	8000ca4 <__aeabi_fsub+0x274>
 8000c70:	444b      	add	r3, r9
 8000c72:	e76c      	b.n	8000b4e <__aeabi_fsub+0x11e>
 8000c74:	2cff      	cmp	r4, #255	; 0xff
 8000c76:	d184      	bne.n	8000b82 <__aeabi_fsub+0x152>
 8000c78:	25ff      	movs	r5, #255	; 0xff
 8000c7a:	e7ac      	b.n	8000bd6 <__aeabi_fsub+0x1a6>
 8000c7c:	464a      	mov	r2, r9
 8000c7e:	4688      	mov	r8, r1
 8000c80:	1ad4      	subs	r4, r2, r3
 8000c82:	e705      	b.n	8000a90 <__aeabi_fsub+0x60>
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d1c5      	bne.n	8000c14 <__aeabi_fsub+0x1e4>
 8000c88:	000a      	movs	r2, r1
 8000c8a:	28ff      	cmp	r0, #255	; 0xff
 8000c8c:	d0c8      	beq.n	8000c20 <__aeabi_fsub+0x1f0>
 8000c8e:	0005      	movs	r5, r0
 8000c90:	464b      	mov	r3, r9
 8000c92:	e7a0      	b.n	8000bd6 <__aeabi_fsub+0x1a6>
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d149      	bne.n	8000d2c <__aeabi_fsub+0x2fc>
 8000c98:	464b      	mov	r3, r9
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d077      	beq.n	8000d8e <__aeabi_fsub+0x35e>
 8000c9e:	000a      	movs	r2, r1
 8000ca0:	25ff      	movs	r5, #255	; 0xff
 8000ca2:	e798      	b.n	8000bd6 <__aeabi_fsub+0x1a6>
 8000ca4:	2cff      	cmp	r4, #255	; 0xff
 8000ca6:	d000      	beq.n	8000caa <__aeabi_fsub+0x27a>
 8000ca8:	e743      	b.n	8000b32 <__aeabi_fsub+0x102>
 8000caa:	e787      	b.n	8000bbc <__aeabi_fsub+0x18c>
 8000cac:	000a      	movs	r2, r1
 8000cae:	24ff      	movs	r4, #255	; 0xff
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	e716      	b.n	8000ae2 <__aeabi_fsub+0xb2>
 8000cb4:	2c00      	cmp	r4, #0
 8000cb6:	d115      	bne.n	8000ce4 <__aeabi_fsub+0x2b4>
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d157      	bne.n	8000d6c <__aeabi_fsub+0x33c>
 8000cbc:	28ff      	cmp	r0, #255	; 0xff
 8000cbe:	d1e6      	bne.n	8000c8e <__aeabi_fsub+0x25e>
 8000cc0:	464b      	mov	r3, r9
 8000cc2:	e77b      	b.n	8000bbc <__aeabi_fsub+0x18c>
 8000cc4:	2c00      	cmp	r4, #0
 8000cc6:	d120      	bne.n	8000d0a <__aeabi_fsub+0x2da>
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d057      	beq.n	8000d7c <__aeabi_fsub+0x34c>
 8000ccc:	4649      	mov	r1, r9
 8000cce:	2900      	cmp	r1, #0
 8000cd0:	d053      	beq.n	8000d7a <__aeabi_fsub+0x34a>
 8000cd2:	444b      	add	r3, r9
 8000cd4:	015a      	lsls	r2, r3, #5
 8000cd6:	d568      	bpl.n	8000daa <__aeabi_fsub+0x37a>
 8000cd8:	2407      	movs	r4, #7
 8000cda:	4a36      	ldr	r2, [pc, #216]	; (8000db4 <__aeabi_fsub+0x384>)
 8000cdc:	401c      	ands	r4, r3
 8000cde:	2501      	movs	r5, #1
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	e6ea      	b.n	8000aba <__aeabi_fsub+0x8a>
 8000ce4:	28ff      	cmp	r0, #255	; 0xff
 8000ce6:	d0eb      	beq.n	8000cc0 <__aeabi_fsub+0x290>
 8000ce8:	2280      	movs	r2, #128	; 0x80
 8000cea:	04d2      	lsls	r2, r2, #19
 8000cec:	4276      	negs	r6, r6
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	2e1b      	cmp	r6, #27
 8000cf2:	dc53      	bgt.n	8000d9c <__aeabi_fsub+0x36c>
 8000cf4:	2520      	movs	r5, #32
 8000cf6:	1bad      	subs	r5, r5, r6
 8000cf8:	001a      	movs	r2, r3
 8000cfa:	40ab      	lsls	r3, r5
 8000cfc:	40f2      	lsrs	r2, r6
 8000cfe:	1e5c      	subs	r4, r3, #1
 8000d00:	41a3      	sbcs	r3, r4
 8000d02:	4313      	orrs	r3, r2
 8000d04:	444b      	add	r3, r9
 8000d06:	0005      	movs	r5, r0
 8000d08:	e721      	b.n	8000b4e <__aeabi_fsub+0x11e>
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d0d8      	beq.n	8000cc0 <__aeabi_fsub+0x290>
 8000d0e:	4649      	mov	r1, r9
 8000d10:	2900      	cmp	r1, #0
 8000d12:	d100      	bne.n	8000d16 <__aeabi_fsub+0x2e6>
 8000d14:	e752      	b.n	8000bbc <__aeabi_fsub+0x18c>
 8000d16:	2180      	movs	r1, #128	; 0x80
 8000d18:	03c9      	lsls	r1, r1, #15
 8000d1a:	420f      	tst	r7, r1
 8000d1c:	d100      	bne.n	8000d20 <__aeabi_fsub+0x2f0>
 8000d1e:	e74d      	b.n	8000bbc <__aeabi_fsub+0x18c>
 8000d20:	4660      	mov	r0, ip
 8000d22:	4208      	tst	r0, r1
 8000d24:	d000      	beq.n	8000d28 <__aeabi_fsub+0x2f8>
 8000d26:	e749      	b.n	8000bbc <__aeabi_fsub+0x18c>
 8000d28:	464b      	mov	r3, r9
 8000d2a:	e747      	b.n	8000bbc <__aeabi_fsub+0x18c>
 8000d2c:	4648      	mov	r0, r9
 8000d2e:	25ff      	movs	r5, #255	; 0xff
 8000d30:	2800      	cmp	r0, #0
 8000d32:	d100      	bne.n	8000d36 <__aeabi_fsub+0x306>
 8000d34:	e74f      	b.n	8000bd6 <__aeabi_fsub+0x1a6>
 8000d36:	2280      	movs	r2, #128	; 0x80
 8000d38:	03d2      	lsls	r2, r2, #15
 8000d3a:	4217      	tst	r7, r2
 8000d3c:	d004      	beq.n	8000d48 <__aeabi_fsub+0x318>
 8000d3e:	4660      	mov	r0, ip
 8000d40:	4210      	tst	r0, r2
 8000d42:	d101      	bne.n	8000d48 <__aeabi_fsub+0x318>
 8000d44:	464b      	mov	r3, r9
 8000d46:	4688      	mov	r8, r1
 8000d48:	2201      	movs	r2, #1
 8000d4a:	4641      	mov	r1, r8
 8000d4c:	25ff      	movs	r5, #255	; 0xff
 8000d4e:	400a      	ands	r2, r1
 8000d50:	e741      	b.n	8000bd6 <__aeabi_fsub+0x1a6>
 8000d52:	4648      	mov	r0, r9
 8000d54:	2800      	cmp	r0, #0
 8000d56:	d01f      	beq.n	8000d98 <__aeabi_fsub+0x368>
 8000d58:	1a1a      	subs	r2, r3, r0
 8000d5a:	0150      	lsls	r0, r2, #5
 8000d5c:	d520      	bpl.n	8000da0 <__aeabi_fsub+0x370>
 8000d5e:	464a      	mov	r2, r9
 8000d60:	2407      	movs	r4, #7
 8000d62:	1ad3      	subs	r3, r2, r3
 8000d64:	401c      	ands	r4, r3
 8000d66:	4688      	mov	r8, r1
 8000d68:	2500      	movs	r5, #0
 8000d6a:	e6a6      	b.n	8000aba <__aeabi_fsub+0x8a>
 8000d6c:	1c74      	adds	r4, r6, #1
 8000d6e:	d0c9      	beq.n	8000d04 <__aeabi_fsub+0x2d4>
 8000d70:	43f6      	mvns	r6, r6
 8000d72:	28ff      	cmp	r0, #255	; 0xff
 8000d74:	d1bc      	bne.n	8000cf0 <__aeabi_fsub+0x2c0>
 8000d76:	464b      	mov	r3, r9
 8000d78:	e720      	b.n	8000bbc <__aeabi_fsub+0x18c>
 8000d7a:	4699      	mov	r9, r3
 8000d7c:	464b      	mov	r3, r9
 8000d7e:	2500      	movs	r5, #0
 8000d80:	08db      	lsrs	r3, r3, #3
 8000d82:	e72b      	b.n	8000bdc <__aeabi_fsub+0x1ac>
 8000d84:	2301      	movs	r3, #1
 8000d86:	e740      	b.n	8000c0a <__aeabi_fsub+0x1da>
 8000d88:	2200      	movs	r2, #0
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	e6a9      	b.n	8000ae2 <__aeabi_fsub+0xb2>
 8000d8e:	2380      	movs	r3, #128	; 0x80
 8000d90:	2200      	movs	r2, #0
 8000d92:	03db      	lsls	r3, r3, #15
 8000d94:	24ff      	movs	r4, #255	; 0xff
 8000d96:	e6a4      	b.n	8000ae2 <__aeabi_fsub+0xb2>
 8000d98:	2500      	movs	r5, #0
 8000d9a:	e71c      	b.n	8000bd6 <__aeabi_fsub+0x1a6>
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	e7b1      	b.n	8000d04 <__aeabi_fsub+0x2d4>
 8000da0:	2a00      	cmp	r2, #0
 8000da2:	d0f1      	beq.n	8000d88 <__aeabi_fsub+0x358>
 8000da4:	0013      	movs	r3, r2
 8000da6:	2500      	movs	r5, #0
 8000da8:	e6fc      	b.n	8000ba4 <__aeabi_fsub+0x174>
 8000daa:	2500      	movs	r5, #0
 8000dac:	e6fa      	b.n	8000ba4 <__aeabi_fsub+0x174>
 8000dae:	46c0      	nop			; (mov r8, r8)
 8000db0:	7dffffff 	.word	0x7dffffff
 8000db4:	fbffffff 	.word	0xfbffffff

08000db8 <__aeabi_f2iz>:
 8000db8:	0241      	lsls	r1, r0, #9
 8000dba:	0042      	lsls	r2, r0, #1
 8000dbc:	0fc3      	lsrs	r3, r0, #31
 8000dbe:	0a49      	lsrs	r1, r1, #9
 8000dc0:	0e12      	lsrs	r2, r2, #24
 8000dc2:	2000      	movs	r0, #0
 8000dc4:	2a7e      	cmp	r2, #126	; 0x7e
 8000dc6:	d90d      	bls.n	8000de4 <__aeabi_f2iz+0x2c>
 8000dc8:	2a9d      	cmp	r2, #157	; 0x9d
 8000dca:	d80c      	bhi.n	8000de6 <__aeabi_f2iz+0x2e>
 8000dcc:	2080      	movs	r0, #128	; 0x80
 8000dce:	0400      	lsls	r0, r0, #16
 8000dd0:	4301      	orrs	r1, r0
 8000dd2:	2a95      	cmp	r2, #149	; 0x95
 8000dd4:	dc0a      	bgt.n	8000dec <__aeabi_f2iz+0x34>
 8000dd6:	2096      	movs	r0, #150	; 0x96
 8000dd8:	1a82      	subs	r2, r0, r2
 8000dda:	40d1      	lsrs	r1, r2
 8000ddc:	4248      	negs	r0, r1
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d100      	bne.n	8000de4 <__aeabi_f2iz+0x2c>
 8000de2:	0008      	movs	r0, r1
 8000de4:	4770      	bx	lr
 8000de6:	4a03      	ldr	r2, [pc, #12]	; (8000df4 <__aeabi_f2iz+0x3c>)
 8000de8:	1898      	adds	r0, r3, r2
 8000dea:	e7fb      	b.n	8000de4 <__aeabi_f2iz+0x2c>
 8000dec:	3a96      	subs	r2, #150	; 0x96
 8000dee:	4091      	lsls	r1, r2
 8000df0:	e7f4      	b.n	8000ddc <__aeabi_f2iz+0x24>
 8000df2:	46c0      	nop			; (mov r8, r8)
 8000df4:	7fffffff 	.word	0x7fffffff

08000df8 <__eqdf2>:
 8000df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dfa:	464f      	mov	r7, r9
 8000dfc:	4646      	mov	r6, r8
 8000dfe:	46d6      	mov	lr, sl
 8000e00:	4684      	mov	ip, r0
 8000e02:	b5c0      	push	{r6, r7, lr}
 8000e04:	4680      	mov	r8, r0
 8000e06:	4e19      	ldr	r6, [pc, #100]	; (8000e6c <__eqdf2+0x74>)
 8000e08:	0318      	lsls	r0, r3, #12
 8000e0a:	030f      	lsls	r7, r1, #12
 8000e0c:	004d      	lsls	r5, r1, #1
 8000e0e:	0b00      	lsrs	r0, r0, #12
 8000e10:	005c      	lsls	r4, r3, #1
 8000e12:	4682      	mov	sl, r0
 8000e14:	0b3f      	lsrs	r7, r7, #12
 8000e16:	0d6d      	lsrs	r5, r5, #21
 8000e18:	0fc9      	lsrs	r1, r1, #31
 8000e1a:	4691      	mov	r9, r2
 8000e1c:	0d64      	lsrs	r4, r4, #21
 8000e1e:	0fdb      	lsrs	r3, r3, #31
 8000e20:	2001      	movs	r0, #1
 8000e22:	42b5      	cmp	r5, r6
 8000e24:	d00a      	beq.n	8000e3c <__eqdf2+0x44>
 8000e26:	42b4      	cmp	r4, r6
 8000e28:	d003      	beq.n	8000e32 <__eqdf2+0x3a>
 8000e2a:	42a5      	cmp	r5, r4
 8000e2c:	d101      	bne.n	8000e32 <__eqdf2+0x3a>
 8000e2e:	4557      	cmp	r7, sl
 8000e30:	d00c      	beq.n	8000e4c <__eqdf2+0x54>
 8000e32:	bc1c      	pop	{r2, r3, r4}
 8000e34:	4690      	mov	r8, r2
 8000e36:	4699      	mov	r9, r3
 8000e38:	46a2      	mov	sl, r4
 8000e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e3c:	4666      	mov	r6, ip
 8000e3e:	433e      	orrs	r6, r7
 8000e40:	d1f7      	bne.n	8000e32 <__eqdf2+0x3a>
 8000e42:	42ac      	cmp	r4, r5
 8000e44:	d1f5      	bne.n	8000e32 <__eqdf2+0x3a>
 8000e46:	4654      	mov	r4, sl
 8000e48:	4314      	orrs	r4, r2
 8000e4a:	d1f2      	bne.n	8000e32 <__eqdf2+0x3a>
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	45c8      	cmp	r8, r9
 8000e50:	d1ef      	bne.n	8000e32 <__eqdf2+0x3a>
 8000e52:	4299      	cmp	r1, r3
 8000e54:	d007      	beq.n	8000e66 <__eqdf2+0x6e>
 8000e56:	2d00      	cmp	r5, #0
 8000e58:	d1eb      	bne.n	8000e32 <__eqdf2+0x3a>
 8000e5a:	4663      	mov	r3, ip
 8000e5c:	431f      	orrs	r7, r3
 8000e5e:	0038      	movs	r0, r7
 8000e60:	1e47      	subs	r7, r0, #1
 8000e62:	41b8      	sbcs	r0, r7
 8000e64:	e7e5      	b.n	8000e32 <__eqdf2+0x3a>
 8000e66:	2000      	movs	r0, #0
 8000e68:	e7e3      	b.n	8000e32 <__eqdf2+0x3a>
 8000e6a:	46c0      	nop			; (mov r8, r8)
 8000e6c:	000007ff 	.word	0x000007ff

08000e70 <__gedf2>:
 8000e70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e72:	464f      	mov	r7, r9
 8000e74:	4646      	mov	r6, r8
 8000e76:	46d6      	mov	lr, sl
 8000e78:	004d      	lsls	r5, r1, #1
 8000e7a:	b5c0      	push	{r6, r7, lr}
 8000e7c:	030e      	lsls	r6, r1, #12
 8000e7e:	0fc9      	lsrs	r1, r1, #31
 8000e80:	468a      	mov	sl, r1
 8000e82:	492c      	ldr	r1, [pc, #176]	; (8000f34 <__gedf2+0xc4>)
 8000e84:	031f      	lsls	r7, r3, #12
 8000e86:	005c      	lsls	r4, r3, #1
 8000e88:	4680      	mov	r8, r0
 8000e8a:	0b36      	lsrs	r6, r6, #12
 8000e8c:	0d6d      	lsrs	r5, r5, #21
 8000e8e:	4691      	mov	r9, r2
 8000e90:	0b3f      	lsrs	r7, r7, #12
 8000e92:	0d64      	lsrs	r4, r4, #21
 8000e94:	0fdb      	lsrs	r3, r3, #31
 8000e96:	428d      	cmp	r5, r1
 8000e98:	d01e      	beq.n	8000ed8 <__gedf2+0x68>
 8000e9a:	428c      	cmp	r4, r1
 8000e9c:	d016      	beq.n	8000ecc <__gedf2+0x5c>
 8000e9e:	2d00      	cmp	r5, #0
 8000ea0:	d11e      	bne.n	8000ee0 <__gedf2+0x70>
 8000ea2:	4330      	orrs	r0, r6
 8000ea4:	4684      	mov	ip, r0
 8000ea6:	2c00      	cmp	r4, #0
 8000ea8:	d101      	bne.n	8000eae <__gedf2+0x3e>
 8000eaa:	433a      	orrs	r2, r7
 8000eac:	d023      	beq.n	8000ef6 <__gedf2+0x86>
 8000eae:	4662      	mov	r2, ip
 8000eb0:	2a00      	cmp	r2, #0
 8000eb2:	d01a      	beq.n	8000eea <__gedf2+0x7a>
 8000eb4:	459a      	cmp	sl, r3
 8000eb6:	d029      	beq.n	8000f0c <__gedf2+0x9c>
 8000eb8:	4651      	mov	r1, sl
 8000eba:	2002      	movs	r0, #2
 8000ebc:	3901      	subs	r1, #1
 8000ebe:	4008      	ands	r0, r1
 8000ec0:	3801      	subs	r0, #1
 8000ec2:	bc1c      	pop	{r2, r3, r4}
 8000ec4:	4690      	mov	r8, r2
 8000ec6:	4699      	mov	r9, r3
 8000ec8:	46a2      	mov	sl, r4
 8000eca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ecc:	0039      	movs	r1, r7
 8000ece:	4311      	orrs	r1, r2
 8000ed0:	d0e5      	beq.n	8000e9e <__gedf2+0x2e>
 8000ed2:	2002      	movs	r0, #2
 8000ed4:	4240      	negs	r0, r0
 8000ed6:	e7f4      	b.n	8000ec2 <__gedf2+0x52>
 8000ed8:	4330      	orrs	r0, r6
 8000eda:	d1fa      	bne.n	8000ed2 <__gedf2+0x62>
 8000edc:	42ac      	cmp	r4, r5
 8000ede:	d00f      	beq.n	8000f00 <__gedf2+0x90>
 8000ee0:	2c00      	cmp	r4, #0
 8000ee2:	d10f      	bne.n	8000f04 <__gedf2+0x94>
 8000ee4:	433a      	orrs	r2, r7
 8000ee6:	d0e7      	beq.n	8000eb8 <__gedf2+0x48>
 8000ee8:	e00c      	b.n	8000f04 <__gedf2+0x94>
 8000eea:	2201      	movs	r2, #1
 8000eec:	3b01      	subs	r3, #1
 8000eee:	4393      	bics	r3, r2
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	3001      	adds	r0, #1
 8000ef4:	e7e5      	b.n	8000ec2 <__gedf2+0x52>
 8000ef6:	4663      	mov	r3, ip
 8000ef8:	2000      	movs	r0, #0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d0e1      	beq.n	8000ec2 <__gedf2+0x52>
 8000efe:	e7db      	b.n	8000eb8 <__gedf2+0x48>
 8000f00:	433a      	orrs	r2, r7
 8000f02:	d1e6      	bne.n	8000ed2 <__gedf2+0x62>
 8000f04:	459a      	cmp	sl, r3
 8000f06:	d1d7      	bne.n	8000eb8 <__gedf2+0x48>
 8000f08:	42a5      	cmp	r5, r4
 8000f0a:	dcd5      	bgt.n	8000eb8 <__gedf2+0x48>
 8000f0c:	42a5      	cmp	r5, r4
 8000f0e:	db05      	blt.n	8000f1c <__gedf2+0xac>
 8000f10:	42be      	cmp	r6, r7
 8000f12:	d8d1      	bhi.n	8000eb8 <__gedf2+0x48>
 8000f14:	d008      	beq.n	8000f28 <__gedf2+0xb8>
 8000f16:	2000      	movs	r0, #0
 8000f18:	42be      	cmp	r6, r7
 8000f1a:	d2d2      	bcs.n	8000ec2 <__gedf2+0x52>
 8000f1c:	4650      	mov	r0, sl
 8000f1e:	2301      	movs	r3, #1
 8000f20:	3801      	subs	r0, #1
 8000f22:	4398      	bics	r0, r3
 8000f24:	3001      	adds	r0, #1
 8000f26:	e7cc      	b.n	8000ec2 <__gedf2+0x52>
 8000f28:	45c8      	cmp	r8, r9
 8000f2a:	d8c5      	bhi.n	8000eb8 <__gedf2+0x48>
 8000f2c:	2000      	movs	r0, #0
 8000f2e:	45c8      	cmp	r8, r9
 8000f30:	d3f4      	bcc.n	8000f1c <__gedf2+0xac>
 8000f32:	e7c6      	b.n	8000ec2 <__gedf2+0x52>
 8000f34:	000007ff 	.word	0x000007ff

08000f38 <__ledf2>:
 8000f38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f3a:	464f      	mov	r7, r9
 8000f3c:	4646      	mov	r6, r8
 8000f3e:	46d6      	mov	lr, sl
 8000f40:	004d      	lsls	r5, r1, #1
 8000f42:	b5c0      	push	{r6, r7, lr}
 8000f44:	030e      	lsls	r6, r1, #12
 8000f46:	0fc9      	lsrs	r1, r1, #31
 8000f48:	468a      	mov	sl, r1
 8000f4a:	492e      	ldr	r1, [pc, #184]	; (8001004 <__ledf2+0xcc>)
 8000f4c:	031f      	lsls	r7, r3, #12
 8000f4e:	005c      	lsls	r4, r3, #1
 8000f50:	4680      	mov	r8, r0
 8000f52:	0b36      	lsrs	r6, r6, #12
 8000f54:	0d6d      	lsrs	r5, r5, #21
 8000f56:	4691      	mov	r9, r2
 8000f58:	0b3f      	lsrs	r7, r7, #12
 8000f5a:	0d64      	lsrs	r4, r4, #21
 8000f5c:	0fdb      	lsrs	r3, r3, #31
 8000f5e:	428d      	cmp	r5, r1
 8000f60:	d018      	beq.n	8000f94 <__ledf2+0x5c>
 8000f62:	428c      	cmp	r4, r1
 8000f64:	d011      	beq.n	8000f8a <__ledf2+0x52>
 8000f66:	2d00      	cmp	r5, #0
 8000f68:	d118      	bne.n	8000f9c <__ledf2+0x64>
 8000f6a:	4330      	orrs	r0, r6
 8000f6c:	4684      	mov	ip, r0
 8000f6e:	2c00      	cmp	r4, #0
 8000f70:	d11e      	bne.n	8000fb0 <__ledf2+0x78>
 8000f72:	433a      	orrs	r2, r7
 8000f74:	d11c      	bne.n	8000fb0 <__ledf2+0x78>
 8000f76:	4663      	mov	r3, ip
 8000f78:	2000      	movs	r0, #0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d030      	beq.n	8000fe0 <__ledf2+0xa8>
 8000f7e:	4651      	mov	r1, sl
 8000f80:	2002      	movs	r0, #2
 8000f82:	3901      	subs	r1, #1
 8000f84:	4008      	ands	r0, r1
 8000f86:	3801      	subs	r0, #1
 8000f88:	e02a      	b.n	8000fe0 <__ledf2+0xa8>
 8000f8a:	0039      	movs	r1, r7
 8000f8c:	4311      	orrs	r1, r2
 8000f8e:	d0ea      	beq.n	8000f66 <__ledf2+0x2e>
 8000f90:	2002      	movs	r0, #2
 8000f92:	e025      	b.n	8000fe0 <__ledf2+0xa8>
 8000f94:	4330      	orrs	r0, r6
 8000f96:	d1fb      	bne.n	8000f90 <__ledf2+0x58>
 8000f98:	42ac      	cmp	r4, r5
 8000f9a:	d026      	beq.n	8000fea <__ledf2+0xb2>
 8000f9c:	2c00      	cmp	r4, #0
 8000f9e:	d126      	bne.n	8000fee <__ledf2+0xb6>
 8000fa0:	433a      	orrs	r2, r7
 8000fa2:	d124      	bne.n	8000fee <__ledf2+0xb6>
 8000fa4:	4651      	mov	r1, sl
 8000fa6:	2002      	movs	r0, #2
 8000fa8:	3901      	subs	r1, #1
 8000faa:	4008      	ands	r0, r1
 8000fac:	3801      	subs	r0, #1
 8000fae:	e017      	b.n	8000fe0 <__ledf2+0xa8>
 8000fb0:	4662      	mov	r2, ip
 8000fb2:	2a00      	cmp	r2, #0
 8000fb4:	d00f      	beq.n	8000fd6 <__ledf2+0x9e>
 8000fb6:	459a      	cmp	sl, r3
 8000fb8:	d1e1      	bne.n	8000f7e <__ledf2+0x46>
 8000fba:	42a5      	cmp	r5, r4
 8000fbc:	db05      	blt.n	8000fca <__ledf2+0x92>
 8000fbe:	42be      	cmp	r6, r7
 8000fc0:	d8dd      	bhi.n	8000f7e <__ledf2+0x46>
 8000fc2:	d019      	beq.n	8000ff8 <__ledf2+0xc0>
 8000fc4:	2000      	movs	r0, #0
 8000fc6:	42be      	cmp	r6, r7
 8000fc8:	d20a      	bcs.n	8000fe0 <__ledf2+0xa8>
 8000fca:	4650      	mov	r0, sl
 8000fcc:	2301      	movs	r3, #1
 8000fce:	3801      	subs	r0, #1
 8000fd0:	4398      	bics	r0, r3
 8000fd2:	3001      	adds	r0, #1
 8000fd4:	e004      	b.n	8000fe0 <__ledf2+0xa8>
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	4393      	bics	r3, r2
 8000fdc:	0018      	movs	r0, r3
 8000fde:	3001      	adds	r0, #1
 8000fe0:	bc1c      	pop	{r2, r3, r4}
 8000fe2:	4690      	mov	r8, r2
 8000fe4:	4699      	mov	r9, r3
 8000fe6:	46a2      	mov	sl, r4
 8000fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fea:	433a      	orrs	r2, r7
 8000fec:	d1d0      	bne.n	8000f90 <__ledf2+0x58>
 8000fee:	459a      	cmp	sl, r3
 8000ff0:	d1c5      	bne.n	8000f7e <__ledf2+0x46>
 8000ff2:	42a5      	cmp	r5, r4
 8000ff4:	dcc3      	bgt.n	8000f7e <__ledf2+0x46>
 8000ff6:	e7e0      	b.n	8000fba <__ledf2+0x82>
 8000ff8:	45c8      	cmp	r8, r9
 8000ffa:	d8c0      	bhi.n	8000f7e <__ledf2+0x46>
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	45c8      	cmp	r8, r9
 8001000:	d3e3      	bcc.n	8000fca <__ledf2+0x92>
 8001002:	e7ed      	b.n	8000fe0 <__ledf2+0xa8>
 8001004:	000007ff 	.word	0x000007ff

08001008 <__aeabi_d2iz>:
 8001008:	b530      	push	{r4, r5, lr}
 800100a:	4d14      	ldr	r5, [pc, #80]	; (800105c <__aeabi_d2iz+0x54>)
 800100c:	030a      	lsls	r2, r1, #12
 800100e:	004b      	lsls	r3, r1, #1
 8001010:	0b12      	lsrs	r2, r2, #12
 8001012:	0d5b      	lsrs	r3, r3, #21
 8001014:	0fc9      	lsrs	r1, r1, #31
 8001016:	2400      	movs	r4, #0
 8001018:	42ab      	cmp	r3, r5
 800101a:	dd11      	ble.n	8001040 <__aeabi_d2iz+0x38>
 800101c:	4c10      	ldr	r4, [pc, #64]	; (8001060 <__aeabi_d2iz+0x58>)
 800101e:	42a3      	cmp	r3, r4
 8001020:	dc10      	bgt.n	8001044 <__aeabi_d2iz+0x3c>
 8001022:	2480      	movs	r4, #128	; 0x80
 8001024:	0364      	lsls	r4, r4, #13
 8001026:	4322      	orrs	r2, r4
 8001028:	4c0e      	ldr	r4, [pc, #56]	; (8001064 <__aeabi_d2iz+0x5c>)
 800102a:	1ae4      	subs	r4, r4, r3
 800102c:	2c1f      	cmp	r4, #31
 800102e:	dd0c      	ble.n	800104a <__aeabi_d2iz+0x42>
 8001030:	480d      	ldr	r0, [pc, #52]	; (8001068 <__aeabi_d2iz+0x60>)
 8001032:	1ac3      	subs	r3, r0, r3
 8001034:	40da      	lsrs	r2, r3
 8001036:	0013      	movs	r3, r2
 8001038:	425c      	negs	r4, r3
 800103a:	2900      	cmp	r1, #0
 800103c:	d100      	bne.n	8001040 <__aeabi_d2iz+0x38>
 800103e:	001c      	movs	r4, r3
 8001040:	0020      	movs	r0, r4
 8001042:	bd30      	pop	{r4, r5, pc}
 8001044:	4b09      	ldr	r3, [pc, #36]	; (800106c <__aeabi_d2iz+0x64>)
 8001046:	18cc      	adds	r4, r1, r3
 8001048:	e7fa      	b.n	8001040 <__aeabi_d2iz+0x38>
 800104a:	4d09      	ldr	r5, [pc, #36]	; (8001070 <__aeabi_d2iz+0x68>)
 800104c:	40e0      	lsrs	r0, r4
 800104e:	46ac      	mov	ip, r5
 8001050:	4463      	add	r3, ip
 8001052:	409a      	lsls	r2, r3
 8001054:	0013      	movs	r3, r2
 8001056:	4303      	orrs	r3, r0
 8001058:	e7ee      	b.n	8001038 <__aeabi_d2iz+0x30>
 800105a:	46c0      	nop			; (mov r8, r8)
 800105c:	000003fe 	.word	0x000003fe
 8001060:	0000041d 	.word	0x0000041d
 8001064:	00000433 	.word	0x00000433
 8001068:	00000413 	.word	0x00000413
 800106c:	7fffffff 	.word	0x7fffffff
 8001070:	fffffbed 	.word	0xfffffbed

08001074 <__aeabi_i2d>:
 8001074:	b570      	push	{r4, r5, r6, lr}
 8001076:	2800      	cmp	r0, #0
 8001078:	d02d      	beq.n	80010d6 <__aeabi_i2d+0x62>
 800107a:	17c3      	asrs	r3, r0, #31
 800107c:	18c5      	adds	r5, r0, r3
 800107e:	405d      	eors	r5, r3
 8001080:	0fc4      	lsrs	r4, r0, #31
 8001082:	0028      	movs	r0, r5
 8001084:	f000 f830 	bl	80010e8 <__clzsi2>
 8001088:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <__aeabi_i2d+0x6c>)
 800108a:	1a1b      	subs	r3, r3, r0
 800108c:	055b      	lsls	r3, r3, #21
 800108e:	0d5b      	lsrs	r3, r3, #21
 8001090:	280a      	cmp	r0, #10
 8001092:	dd15      	ble.n	80010c0 <__aeabi_i2d+0x4c>
 8001094:	380b      	subs	r0, #11
 8001096:	4085      	lsls	r5, r0
 8001098:	2200      	movs	r2, #0
 800109a:	032d      	lsls	r5, r5, #12
 800109c:	0b2d      	lsrs	r5, r5, #12
 800109e:	2100      	movs	r1, #0
 80010a0:	0010      	movs	r0, r2
 80010a2:	032d      	lsls	r5, r5, #12
 80010a4:	0d0a      	lsrs	r2, r1, #20
 80010a6:	0b2d      	lsrs	r5, r5, #12
 80010a8:	0512      	lsls	r2, r2, #20
 80010aa:	432a      	orrs	r2, r5
 80010ac:	4d0d      	ldr	r5, [pc, #52]	; (80010e4 <__aeabi_i2d+0x70>)
 80010ae:	051b      	lsls	r3, r3, #20
 80010b0:	402a      	ands	r2, r5
 80010b2:	4313      	orrs	r3, r2
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	07e4      	lsls	r4, r4, #31
 80010b8:	085b      	lsrs	r3, r3, #1
 80010ba:	4323      	orrs	r3, r4
 80010bc:	0019      	movs	r1, r3
 80010be:	bd70      	pop	{r4, r5, r6, pc}
 80010c0:	0002      	movs	r2, r0
 80010c2:	0029      	movs	r1, r5
 80010c4:	3215      	adds	r2, #21
 80010c6:	4091      	lsls	r1, r2
 80010c8:	000a      	movs	r2, r1
 80010ca:	210b      	movs	r1, #11
 80010cc:	1a08      	subs	r0, r1, r0
 80010ce:	40c5      	lsrs	r5, r0
 80010d0:	032d      	lsls	r5, r5, #12
 80010d2:	0b2d      	lsrs	r5, r5, #12
 80010d4:	e7e3      	b.n	800109e <__aeabi_i2d+0x2a>
 80010d6:	2400      	movs	r4, #0
 80010d8:	2300      	movs	r3, #0
 80010da:	2500      	movs	r5, #0
 80010dc:	2200      	movs	r2, #0
 80010de:	e7de      	b.n	800109e <__aeabi_i2d+0x2a>
 80010e0:	0000041e 	.word	0x0000041e
 80010e4:	800fffff 	.word	0x800fffff

080010e8 <__clzsi2>:
 80010e8:	211c      	movs	r1, #28
 80010ea:	2301      	movs	r3, #1
 80010ec:	041b      	lsls	r3, r3, #16
 80010ee:	4298      	cmp	r0, r3
 80010f0:	d301      	bcc.n	80010f6 <__clzsi2+0xe>
 80010f2:	0c00      	lsrs	r0, r0, #16
 80010f4:	3910      	subs	r1, #16
 80010f6:	0a1b      	lsrs	r3, r3, #8
 80010f8:	4298      	cmp	r0, r3
 80010fa:	d301      	bcc.n	8001100 <__clzsi2+0x18>
 80010fc:	0a00      	lsrs	r0, r0, #8
 80010fe:	3908      	subs	r1, #8
 8001100:	091b      	lsrs	r3, r3, #4
 8001102:	4298      	cmp	r0, r3
 8001104:	d301      	bcc.n	800110a <__clzsi2+0x22>
 8001106:	0900      	lsrs	r0, r0, #4
 8001108:	3904      	subs	r1, #4
 800110a:	a202      	add	r2, pc, #8	; (adr r2, 8001114 <__clzsi2+0x2c>)
 800110c:	5c10      	ldrb	r0, [r2, r0]
 800110e:	1840      	adds	r0, r0, r1
 8001110:	4770      	bx	lr
 8001112:	46c0      	nop			; (mov r8, r8)
 8001114:	02020304 	.word	0x02020304
 8001118:	01010101 	.word	0x01010101
	...

08001124 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001124:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001126:	2410      	movs	r4, #16
{
 8001128:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800112a:	2230      	movs	r2, #48	; 0x30
 800112c:	2100      	movs	r1, #0
 800112e:	a80c      	add	r0, sp, #48	; 0x30
 8001130:	f002 f91e 	bl	8003370 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001134:	0022      	movs	r2, r4
 8001136:	2100      	movs	r1, #0
 8001138:	a801      	add	r0, sp, #4
 800113a:	f002 f919 	bl	8003370 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800113e:	2218      	movs	r2, #24
 8001140:	2100      	movs	r1, #0
 8001142:	a805      	add	r0, sp, #20
 8001144:	f002 f914 	bl	8003370 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001148:	2501      	movs	r5, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 800114a:	2332      	movs	r3, #50	; 0x32
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800114c:	a80b      	add	r0, sp, #44	; 0x2c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 800114e:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001150:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8001152:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001154:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001156:	9513      	str	r5, [sp, #76]	; 0x4c
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8001158:	9510      	str	r5, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800115a:	f001 fb27 	bl	80027ac <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800115e:	2307      	movs	r3, #7
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001160:	2400      	movs	r4, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001162:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001164:	0029      	movs	r1, r5
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8001166:	3b04      	subs	r3, #4
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001168:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 800116a:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800116c:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800116e:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001170:	f001 fdae 	bl	8002cd0 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 8001174:	4b04      	ldr	r3, [pc, #16]	; (8001188 <SystemClock_Config+0x64>)
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001176:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 8001178:	9305      	str	r3, [sp, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800117a:	9408      	str	r4, [sp, #32]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800117c:	940a      	str	r4, [sp, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800117e:	f001 fe43 	bl	8002e08 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8001182:	b019      	add	sp, #100	; 0x64
 8001184:	bd30      	pop	{r4, r5, pc}
 8001186:	46c0      	nop			; (mov r8, r8)
 8001188:	00020020 	.word	0x00020020

0800118c <main>:
{
 800118c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800118e:	b08f      	sub	sp, #60	; 0x3c
  HAL_Init();
 8001190:	f000 fc4c 	bl	8001a2c <HAL_Init>
  SystemClock_Config();
 8001194:	f7ff ffc6 	bl	8001124 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001198:	2214      	movs	r2, #20
 800119a:	2100      	movs	r1, #0
 800119c:	a809      	add	r0, sp, #36	; 0x24
 800119e:	f002 f8e7 	bl	8003370 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011a2:	2180      	movs	r1, #128	; 0x80
 80011a4:	4d86      	ldr	r5, [pc, #536]	; (80013c0 <main+0x234>)
 80011a6:	03c9      	lsls	r1, r1, #15
 80011a8:	696a      	ldr	r2, [r5, #20]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2400      	movs	r4, #0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011ac:	430a      	orrs	r2, r1
 80011ae:	616a      	str	r2, [r5, #20]
 80011b0:	696b      	ldr	r3, [r5, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b2:	2601      	movs	r6, #1
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011b4:	400b      	ands	r3, r1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b6:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011b8:	9306      	str	r3, [sp, #24]
 80011ba:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011bc:	696a      	ldr	r2, [r5, #20]
 80011be:	0289      	lsls	r1, r1, #10
 80011c0:	430a      	orrs	r2, r1
 80011c2:	616a      	str	r2, [r5, #20]
 80011c4:	696b      	ldr	r3, [r5, #20]
  GPIO_InitStruct.Pin = LED_Pin;
 80011c6:	2702      	movs	r7, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c8:	400b      	ands	r3, r1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ca:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011cc:	9307      	str	r3, [sp, #28]
 80011ce:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d0:	696a      	ldr	r2, [r5, #20]
 80011d2:	02c9      	lsls	r1, r1, #11
 80011d4:	430a      	orrs	r2, r1
 80011d6:	616a      	str	r2, [r5, #20]
 80011d8:	696b      	ldr	r3, [r5, #20]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80011da:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011dc:	400b      	ands	r3, r1
 80011de:	9308      	str	r3, [sp, #32]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80011e0:	2102      	movs	r1, #2
 80011e2:	4878      	ldr	r0, [pc, #480]	; (80013c4 <main+0x238>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e4:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80011e6:	f000 fffd 	bl	80021e4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80011ea:	a909      	add	r1, sp, #36	; 0x24
 80011ec:	4875      	ldr	r0, [pc, #468]	; (80013c4 <main+0x238>)
  GPIO_InitStruct.Pin = LED_Pin;
 80011ee:	9709      	str	r7, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f0:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f4:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80011f6:	f000 ff4b 	bl	8002090 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011fa:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80011fc:	0022      	movs	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011fe:	4333      	orrs	r3, r6
 8001200:	616b      	str	r3, [r5, #20]
 8001202:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001204:	0021      	movs	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001206:	4033      	ands	r3, r6
 8001208:	9305      	str	r3, [sp, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800120a:	2009      	movs	r0, #9
  __HAL_RCC_DMA1_CLK_ENABLE();
 800120c:	9b05      	ldr	r3, [sp, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800120e:	f000 fe37 	bl	8001e80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001212:	2009      	movs	r0, #9
 8001214:	f000 fe5e 	bl	8001ed4 <HAL_NVIC_EnableIRQ>
  ADC_ChannelConfTypeDef sConfig = {0};
 8001218:	220c      	movs	r2, #12
 800121a:	0021      	movs	r1, r4
 800121c:	a809      	add	r0, sp, #36	; 0x24
 800121e:	f002 f8a7 	bl	8003370 <memset>
  hadc.Instance = ADC1;
 8001222:	4d69      	ldr	r5, [pc, #420]	; (80013c8 <main+0x23c>)
 8001224:	4b69      	ldr	r3, [pc, #420]	; (80013cc <main+0x240>)
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001226:	0028      	movs	r0, r5
  hadc.Instance = ADC1;
 8001228:	602b      	str	r3, [r5, #0]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800122a:	2304      	movs	r3, #4
 800122c:	616b      	str	r3, [r5, #20]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800122e:	23c2      	movs	r3, #194	; 0xc2
 8001230:	33ff      	adds	r3, #255	; 0xff
 8001232:	61eb      	str	r3, [r5, #28]
  hadc.Init.DMAContinuousRequests = ENABLE;
 8001234:	1d6b      	adds	r3, r5, #5
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001236:	612e      	str	r6, [r5, #16]
  hadc.Init.ContinuousConvMode = ENABLE;
 8001238:	76ae      	strb	r6, [r5, #26]
  hadc.Init.DMAContinuousRequests = ENABLE;
 800123a:	77de      	strb	r6, [r3, #31]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800123c:	62ae      	str	r6, [r5, #40]	; 0x28
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800123e:	606c      	str	r4, [r5, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001240:	60ac      	str	r4, [r5, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001242:	60ec      	str	r4, [r5, #12]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001244:	762c      	strb	r4, [r5, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001246:	766c      	strb	r4, [r5, #25]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001248:	76ec      	strb	r4, [r5, #27]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800124a:	622c      	str	r4, [r5, #32]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800124c:	f000 fc5c 	bl	8001b08 <HAL_ADC_Init>
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001250:	2380      	movs	r3, #128	; 0x80
 8001252:	015b      	lsls	r3, r3, #5
 8001254:	930a      	str	r3, [sp, #40]	; 0x28
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001256:	2380      	movs	r3, #128	; 0x80
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001258:	a909      	add	r1, sp, #36	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800125a:	055b      	lsls	r3, r3, #21
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800125c:	0028      	movs	r0, r5
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800125e:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfig.Channel = ADC_CHANNEL_0;
 8001260:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001262:	f000 fd8d 	bl	8001d80 <HAL_ADC_ConfigChannel>
  huart2.Instance = USART2;
 8001266:	485a      	ldr	r0, [pc, #360]	; (80013d0 <main+0x244>)
 8001268:	4b5a      	ldr	r3, [pc, #360]	; (80013d4 <main+0x248>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800126a:	6084      	str	r4, [r0, #8]
  huart2.Instance = USART2;
 800126c:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 800126e:	23e1      	movs	r3, #225	; 0xe1
 8001270:	025b      	lsls	r3, r3, #9
 8001272:	6043      	str	r3, [r0, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001274:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001276:	60c4      	str	r4, [r0, #12]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001278:	6143      	str	r3, [r0, #20]
  huart2.Init.Parity = UART_PARITY_NONE;
 800127a:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800127c:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800127e:	61c4      	str	r4, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001280:	6204      	str	r4, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001282:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001284:	f001 ffdc 	bl	8003240 <HAL_UART_Init>
  hpcd_USB_FS.Instance = USB;
 8001288:	4853      	ldr	r0, [pc, #332]	; (80013d8 <main+0x24c>)
 800128a:	4b54      	ldr	r3, [pc, #336]	; (80013dc <main+0x250>)
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800128c:	6087      	str	r7, [r0, #8]
  hpcd_USB_FS.Instance = USB;
 800128e:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001290:	2308      	movs	r3, #8
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001292:	6107      	str	r7, [r0, #16]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001294:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001296:	6184      	str	r4, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001298:	61c4      	str	r4, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800129a:	6204      	str	r4, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800129c:	f001 fa10 	bl	80026c0 <HAL_PCD_Init>
  hi2c1.Instance = I2C1;
 80012a0:	4f4f      	ldr	r7, [pc, #316]	; (80013e0 <main+0x254>)
 80012a2:	4b50      	ldr	r3, [pc, #320]	; (80013e4 <main+0x258>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012a4:	0038      	movs	r0, r7
  hi2c1.Instance = I2C1;
 80012a6:	603b      	str	r3, [r7, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80012a8:	4b4f      	ldr	r3, [pc, #316]	; (80013e8 <main+0x25c>)
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012aa:	60fe      	str	r6, [r7, #12]
  hi2c1.Init.Timing = 0x2000090E;
 80012ac:	607b      	str	r3, [r7, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80012ae:	60bc      	str	r4, [r7, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012b0:	613c      	str	r4, [r7, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80012b2:	617c      	str	r4, [r7, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012b4:	61bc      	str	r4, [r7, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012b6:	61fc      	str	r4, [r7, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012b8:	623c      	str	r4, [r7, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012ba:	f001 f8ab 	bl	8002414 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012be:	0021      	movs	r1, r4
 80012c0:	0038      	movs	r0, r7
 80012c2:	f001 f9b3 	bl	800262c <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012c6:	0021      	movs	r1, r4
 80012c8:	0038      	movs	r0, r7
 80012ca:	f001 f9d5 	bl	8002678 <HAL_I2CEx_ConfigDigitalFilter>
  HAL_ADC_Start_DMA(&hadc, (uint32_t *)adcBuffer, ADC_BUFFER_SIZE);
 80012ce:	2240      	movs	r2, #64	; 0x40
 80012d0:	4946      	ldr	r1, [pc, #280]	; (80013ec <main+0x260>)
 80012d2:	0028      	movs	r0, r5
 80012d4:	f000 fcbe 	bl	8001c54 <HAL_ADC_Start_DMA>
  FFT(data, DATA_LEN);
 80012d8:	4e45      	ldr	r6, [pc, #276]	; (80013f0 <main+0x264>)
 80012da:	2140      	movs	r1, #64	; 0x40
 80012dc:	0030      	movs	r0, r6
 80012de:	f000 f9ef 	bl	80016c0 <FFT>
	  data_magnitude[i] = abs(data[i].real);
 80012e2:	4d44      	ldr	r5, [pc, #272]	; (80013f4 <main+0x268>)
 80012e4:	5930      	ldr	r0, [r6, r4]
 80012e6:	f7ff fd67 	bl	8000db8 <__aeabi_f2iz>
 80012ea:	17c3      	asrs	r3, r0, #31
 80012ec:	18c0      	adds	r0, r0, r3
 80012ee:	4058      	eors	r0, r3
 80012f0:	f7ff fec0 	bl	8001074 <__aeabi_i2d>
  for (int i=0;i<DATA_LEN;i++) {
 80012f4:	2380      	movs	r3, #128	; 0x80
	  data_magnitude[i] = abs(data[i].real);
 80012f6:	1967      	adds	r7, r4, r5
 80012f8:	3408      	adds	r4, #8
 80012fa:	6038      	str	r0, [r7, #0]
 80012fc:	6079      	str	r1, [r7, #4]
  for (int i=0;i<DATA_LEN;i++) {
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	429c      	cmp	r4, r3
 8001302:	d1ef      	bne.n	80012e4 <main+0x158>
  fft_max_val = data_magnitude[0];
 8001304:	682b      	ldr	r3, [r5, #0]
 8001306:	686c      	ldr	r4, [r5, #4]
  fft_max_freq=0;
 8001308:	2600      	movs	r6, #0
  fft_max_val = data_magnitude[0];
 800130a:	9302      	str	r3, [sp, #8]
 800130c:	9403      	str	r4, [sp, #12]
  fft_max_freq=0;
 800130e:	2700      	movs	r7, #0
  for (int i=1;i<DATA_LEN/2;i++){
 8001310:	2401      	movs	r4, #1
	  if (data_magnitude[i]>fft_max_val){
 8001312:	4d38      	ldr	r5, [pc, #224]	; (80013f4 <main+0x268>)
 8001314:	00e3      	lsls	r3, r4, #3
 8001316:	195b      	adds	r3, r3, r5
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	9200      	str	r2, [sp, #0]
 800131e:	9301      	str	r3, [sp, #4]
 8001320:	9800      	ldr	r0, [sp, #0]
 8001322:	9901      	ldr	r1, [sp, #4]
 8001324:	9a02      	ldr	r2, [sp, #8]
 8001326:	9b03      	ldr	r3, [sp, #12]
 8001328:	f7ff f8a2 	bl	8000470 <__aeabi_dcmpgt>
 800132c:	2800      	cmp	r0, #0
 800132e:	d009      	beq.n	8001344 <main+0x1b8>
		  fft_max_freq=i*(10000/64);
 8001330:	209c      	movs	r0, #156	; 0x9c
 8001332:	4360      	muls	r0, r4
 8001334:	f7ff fe9e 	bl	8001074 <__aeabi_i2d>
		  fft_max_val=data_magnitude[i];
 8001338:	9a00      	ldr	r2, [sp, #0]
 800133a:	9b01      	ldr	r3, [sp, #4]
		  fft_max_freq=i*(10000/64);
 800133c:	0006      	movs	r6, r0
 800133e:	000f      	movs	r7, r1
		  fft_max_val=data_magnitude[i];
 8001340:	9202      	str	r2, [sp, #8]
 8001342:	9303      	str	r3, [sp, #12]
  for (int i=1;i<DATA_LEN/2;i++){
 8001344:	3401      	adds	r4, #1
 8001346:	2c20      	cmp	r4, #32
 8001348:	d1e4      	bne.n	8001314 <main+0x188>
  ssd1306_Fill(Black);
 800134a:	2000      	movs	r0, #0
 800134c:	f000 fa90 	bl	8001870 <ssd1306_Fill>
  ssd1306_UpdateScreen();
 8001350:	f000 fa9c 	bl	800188c <ssd1306_UpdateScreen>
  ssd1306_SetCursor(2, 5);
 8001354:	2105      	movs	r1, #5
 8001356:	2002      	movs	r0, #2
 8001358:	f000 fb3e 	bl	80019d8 <ssd1306_SetCursor>
  ssd1306_WriteString("Max. Freq:", Font_11x18, White);
 800135c:	4c26      	ldr	r4, [pc, #152]	; (80013f8 <main+0x26c>)
 800135e:	2301      	movs	r3, #1
 8001360:	6862      	ldr	r2, [r4, #4]
 8001362:	6821      	ldr	r1, [r4, #0]
 8001364:	4825      	ldr	r0, [pc, #148]	; (80013fc <main+0x270>)
 8001366:	f000 fb23 	bl	80019b0 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 800136a:	f000 fa8f 	bl	800188c <ssd1306_UpdateScreen>
  ssd1306_SetCursor(75, 40);
 800136e:	2128      	movs	r1, #40	; 0x28
 8001370:	204b      	movs	r0, #75	; 0x4b
 8001372:	f000 fb31 	bl	80019d8 <ssd1306_SetCursor>
  ssd1306_WriteString("Hz", Font_11x18, White);
 8001376:	2301      	movs	r3, #1
 8001378:	6862      	ldr	r2, [r4, #4]
 800137a:	6821      	ldr	r1, [r4, #0]
 800137c:	4820      	ldr	r0, [pc, #128]	; (8001400 <main+0x274>)
 800137e:	f000 fb17 	bl	80019b0 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8001382:	f000 fa83 	bl	800188c <ssd1306_UpdateScreen>
  sprintf(dispBuffer, "%d", (int) fft_max_freq);
 8001386:	0039      	movs	r1, r7
 8001388:	0030      	movs	r0, r6
 800138a:	f7ff fe3d 	bl	8001008 <__aeabi_d2iz>
 800138e:	491d      	ldr	r1, [pc, #116]	; (8001404 <main+0x278>)
 8001390:	0002      	movs	r2, r0
 8001392:	a809      	add	r0, sp, #36	; 0x24
 8001394:	f001 fff4 	bl	8003380 <siprintf>
  ssd1306_SetCursor(10, 40);
 8001398:	2128      	movs	r1, #40	; 0x28
 800139a:	200a      	movs	r0, #10
 800139c:	f000 fb1c 	bl	80019d8 <ssd1306_SetCursor>
  ssd1306_WriteString(dispBuffer, Font_11x18, White);
 80013a0:	cc06      	ldmia	r4!, {r1, r2}
 80013a2:	2301      	movs	r3, #1
 80013a4:	a809      	add	r0, sp, #36	; 0x24
 80013a6:	f000 fb03 	bl	80019b0 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 80013aa:	f000 fa6f 	bl	800188c <ssd1306_UpdateScreen>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80013ae:	2102      	movs	r1, #2
 80013b0:	4804      	ldr	r0, [pc, #16]	; (80013c4 <main+0x238>)
 80013b2:	f000 ff1d 	bl	80021f0 <HAL_GPIO_TogglePin>
	  FFT(data, DATA_LEN); // 5.8ms
 80013b6:	2140      	movs	r1, #64	; 0x40
 80013b8:	480d      	ldr	r0, [pc, #52]	; (80013f0 <main+0x264>)
 80013ba:	f000 f981 	bl	80016c0 <FFT>
 80013be:	e7f6      	b.n	80013ae <main+0x222>
 80013c0:	40021000 	.word	0x40021000
 80013c4:	48000400 	.word	0x48000400
 80013c8:	200010b0 	.word	0x200010b0
 80013cc:	40012400 	.word	0x40012400
 80013d0:	20000d78 	.word	0x20000d78
 80013d4:	40004400 	.word	0x40004400
 80013d8:	20000e3c 	.word	0x20000e3c
 80013dc:	40005c00 	.word	0x40005c00
 80013e0:	20000b28 	.word	0x20000b28
 80013e4:	40005400 	.word	0x40005400
 80013e8:	2000090e 	.word	0x2000090e
 80013ec:	20000aa8 	.word	0x20000aa8
 80013f0:	20000000 	.word	0x20000000
 80013f4:	20000b78 	.word	0x20000b78
 80013f8:	20000604 	.word	0x20000604
 80013fc:	08003bd0 	.word	0x08003bd0
 8001400:	08003bdb 	.word	0x08003bdb
 8001404:	08003bde 	.word	0x08003bde

08001408 <HAL_ADC_ConvCpltCallback>:

}

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001408:	b510      	push	{r4, lr}
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800140a:	2102      	movs	r1, #2
 800140c:	4801      	ldr	r0, [pc, #4]	; (8001414 <HAL_ADC_ConvCpltCallback+0xc>)
 800140e:	f000 feef 	bl	80021f0 <HAL_GPIO_TogglePin>
}
 8001412:	bd10      	pop	{r4, pc}
 8001414:	48000400 	.word	0x48000400

08001418 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001418:	4770      	bx	lr
	...

0800141c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800141c:	2001      	movs	r0, #1
 800141e:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <HAL_MspInit+0x34>)
{
 8001420:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001422:	6999      	ldr	r1, [r3, #24]
 8001424:	4301      	orrs	r1, r0
 8001426:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001428:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800142a:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 800142c:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800142e:	4002      	ands	r2, r0
 8001430:	9200      	str	r2, [sp, #0]
 8001432:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001434:	69da      	ldr	r2, [r3, #28]
 8001436:	430a      	orrs	r2, r1
 8001438:	61da      	str	r2, [r3, #28]
 800143a:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  __HAL_REMAP_PIN_ENABLE(HAL_REMAP_PA11_PA12);
 800143c:	4a05      	ldr	r2, [pc, #20]	; (8001454 <HAL_MspInit+0x38>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800143e:	400b      	ands	r3, r1
 8001440:	9301      	str	r3, [sp, #4]
 8001442:	9b01      	ldr	r3, [sp, #4]
  __HAL_REMAP_PIN_ENABLE(HAL_REMAP_PA11_PA12);
 8001444:	2310      	movs	r3, #16
 8001446:	6811      	ldr	r1, [r2, #0]
 8001448:	430b      	orrs	r3, r1
 800144a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800144c:	b002      	add	sp, #8
 800144e:	4770      	bx	lr
 8001450:	40021000 	.word	0x40021000
 8001454:	40010000 	.word	0x40010000

08001458 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001458:	b530      	push	{r4, r5, lr}
 800145a:	0005      	movs	r5, r0
 800145c:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145e:	2214      	movs	r2, #20
 8001460:	2100      	movs	r1, #0
 8001462:	a803      	add	r0, sp, #12
 8001464:	f001 ff84 	bl	8003370 <memset>
  if(hadc->Instance==ADC1)
 8001468:	4b1d      	ldr	r3, [pc, #116]	; (80014e0 <HAL_ADC_MspInit+0x88>)
 800146a:	682a      	ldr	r2, [r5, #0]
 800146c:	429a      	cmp	r2, r3
 800146e:	d134      	bne.n	80014da <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001470:	2080      	movs	r0, #128	; 0x80
 8001472:	4b1c      	ldr	r3, [pc, #112]	; (80014e4 <HAL_ADC_MspInit+0x8c>)
 8001474:	0080      	lsls	r0, r0, #2
 8001476:	6999      	ldr	r1, [r3, #24]
 8001478:	4301      	orrs	r1, r0
 800147a:	6199      	str	r1, [r3, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800147c:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_ADC1_CLK_ENABLE();
 800147e:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001480:	0289      	lsls	r1, r1, #10
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001482:	4002      	ands	r2, r0
 8001484:	9201      	str	r2, [sp, #4]
 8001486:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001488:	695a      	ldr	r2, [r3, #20]
    PA0     ------> ADC_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800148a:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800148c:	430a      	orrs	r2, r1
 800148e:	615a      	str	r2, [r3, #20]
 8001490:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001492:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001494:	400b      	ands	r3, r1
 8001496:	9302      	str	r3, [sp, #8]
 8001498:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800149a:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800149e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014a0:	3302      	adds	r3, #2
 80014a2:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a4:	f000 fdf4 	bl	8002090 <HAL_GPIO_Init>
    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80014a8:	2280      	movs	r2, #128	; 0x80
    hdma_adc.Instance = DMA1_Channel1;
 80014aa:	4c0f      	ldr	r4, [pc, #60]	; (80014e8 <HAL_ADC_MspInit+0x90>)
 80014ac:	4b0f      	ldr	r3, [pc, #60]	; (80014ec <HAL_ADC_MspInit+0x94>)
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80014ae:	60e2      	str	r2, [r4, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014b0:	1892      	adds	r2, r2, r2
 80014b2:	6122      	str	r2, [r4, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014b4:	2280      	movs	r2, #128	; 0x80
 80014b6:	00d2      	lsls	r2, r2, #3
    hdma_adc.Instance = DMA1_Channel1;
 80014b8:	6023      	str	r3, [r4, #0]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014ba:	6162      	str	r2, [r4, #20]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014bc:	2300      	movs	r3, #0
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80014be:	2220      	movs	r2, #32
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80014c0:	0020      	movs	r0, r4
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014c2:	6063      	str	r3, [r4, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80014c4:	60a3      	str	r3, [r4, #8]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80014c6:	61a2      	str	r2, [r4, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80014c8:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80014ca:	f000 fd29 	bl	8001f20 <HAL_DMA_Init>
 80014ce:	2800      	cmp	r0, #0
 80014d0:	d001      	beq.n	80014d6 <HAL_ADC_MspInit+0x7e>
    {
      Error_Handler();
 80014d2:	f7ff ffa1 	bl	8001418 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 80014d6:	632c      	str	r4, [r5, #48]	; 0x30
 80014d8:	6265      	str	r5, [r4, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80014da:	b009      	add	sp, #36	; 0x24
 80014dc:	bd30      	pop	{r4, r5, pc}
 80014de:	46c0      	nop			; (mov r8, r8)
 80014e0:	40012400 	.word	0x40012400
 80014e4:	40021000 	.word	0x40021000
 80014e8:	20000df8 	.word	0x20000df8
 80014ec:	40020008 	.word	0x40020008

080014f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014f0:	b510      	push	{r4, lr}
 80014f2:	0004      	movs	r4, r0
 80014f4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f6:	2214      	movs	r2, #20
 80014f8:	2100      	movs	r1, #0
 80014fa:	a803      	add	r0, sp, #12
 80014fc:	f001 ff38 	bl	8003370 <memset>
  if(hi2c->Instance==I2C1)
 8001500:	4b12      	ldr	r3, [pc, #72]	; (800154c <HAL_I2C_MspInit+0x5c>)
 8001502:	6822      	ldr	r2, [r4, #0]
 8001504:	429a      	cmp	r2, r3
 8001506:	d11e      	bne.n	8001546 <HAL_I2C_MspInit+0x56>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001508:	2180      	movs	r1, #128	; 0x80
 800150a:	4c11      	ldr	r4, [pc, #68]	; (8001550 <HAL_I2C_MspInit+0x60>)
 800150c:	03c9      	lsls	r1, r1, #15
 800150e:	6962      	ldr	r2, [r4, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001510:	4810      	ldr	r0, [pc, #64]	; (8001554 <HAL_I2C_MspInit+0x64>)
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001512:	430a      	orrs	r2, r1
 8001514:	6162      	str	r2, [r4, #20]
 8001516:	6963      	ldr	r3, [r4, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001518:	2203      	movs	r2, #3
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800151a:	400b      	ands	r3, r1
 800151c:	9301      	str	r3, [sp, #4]
 800151e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001520:	2312      	movs	r3, #18
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001522:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001524:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001526:	3b11      	subs	r3, #17
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001528:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800152a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800152c:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800152e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001530:	f000 fdae 	bl	8002090 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001534:	2180      	movs	r1, #128	; 0x80
 8001536:	69e2      	ldr	r2, [r4, #28]
 8001538:	0389      	lsls	r1, r1, #14
 800153a:	430a      	orrs	r2, r1
 800153c:	61e2      	str	r2, [r4, #28]
 800153e:	69e3      	ldr	r3, [r4, #28]
 8001540:	400b      	ands	r3, r1
 8001542:	9302      	str	r3, [sp, #8]
 8001544:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001546:	b008      	add	sp, #32
 8001548:	bd10      	pop	{r4, pc}
 800154a:	46c0      	nop			; (mov r8, r8)
 800154c:	40005400 	.word	0x40005400
 8001550:	40021000 	.word	0x40021000
 8001554:	48001400 	.word	0x48001400

08001558 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001558:	b510      	push	{r4, lr}
 800155a:	0004      	movs	r4, r0
 800155c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155e:	2214      	movs	r2, #20
 8001560:	2100      	movs	r1, #0
 8001562:	a803      	add	r0, sp, #12
 8001564:	f001 ff04 	bl	8003370 <memset>
  if(huart->Instance==USART2)
 8001568:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <HAL_UART_MspInit+0x58>)
 800156a:	6822      	ldr	r2, [r4, #0]
 800156c:	429a      	cmp	r2, r3
 800156e:	d11d      	bne.n	80015ac <HAL_UART_MspInit+0x54>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001570:	2280      	movs	r2, #128	; 0x80
 8001572:	4b10      	ldr	r3, [pc, #64]	; (80015b4 <HAL_UART_MspInit+0x5c>)
 8001574:	0292      	lsls	r2, r2, #10
 8001576:	69d9      	ldr	r1, [r3, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001578:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_USART2_CLK_ENABLE();
 800157a:	4311      	orrs	r1, r2
 800157c:	61d9      	str	r1, [r3, #28]
 800157e:	69d9      	ldr	r1, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001580:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART2_CLK_ENABLE();
 8001582:	4011      	ands	r1, r2
 8001584:	9101      	str	r1, [sp, #4]
 8001586:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001588:	6959      	ldr	r1, [r3, #20]
 800158a:	4311      	orrs	r1, r2
 800158c:	6159      	str	r1, [r3, #20]
 800158e:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001590:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001592:	401a      	ands	r2, r3
 8001594:	9202      	str	r2, [sp, #8]
 8001596:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001598:	230c      	movs	r3, #12
 800159a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159c:	3b0a      	subs	r3, #10
 800159e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015a0:	3301      	adds	r3, #1
 80015a2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80015a4:	3b02      	subs	r3, #2
 80015a6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a8:	f000 fd72 	bl	8002090 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015ac:	b008      	add	sp, #32
 80015ae:	bd10      	pop	{r4, pc}
 80015b0:	40004400 	.word	0x40004400
 80015b4:	40021000 	.word	0x40021000

080015b8 <HAL_PCD_MspInit>:
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
  if(hpcd->Instance==USB)
 80015b8:	4b08      	ldr	r3, [pc, #32]	; (80015dc <HAL_PCD_MspInit+0x24>)
 80015ba:	6802      	ldr	r2, [r0, #0]
{
 80015bc:	b082      	sub	sp, #8
  if(hpcd->Instance==USB)
 80015be:	429a      	cmp	r2, r3
 80015c0:	d109      	bne.n	80015d6 <HAL_PCD_MspInit+0x1e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80015c2:	2080      	movs	r0, #128	; 0x80
 80015c4:	4a06      	ldr	r2, [pc, #24]	; (80015e0 <HAL_PCD_MspInit+0x28>)
 80015c6:	0400      	lsls	r0, r0, #16
 80015c8:	69d1      	ldr	r1, [r2, #28]
 80015ca:	4301      	orrs	r1, r0
 80015cc:	61d1      	str	r1, [r2, #28]
 80015ce:	69d3      	ldr	r3, [r2, #28]
 80015d0:	4003      	ands	r3, r0
 80015d2:	9301      	str	r3, [sp, #4]
 80015d4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80015d6:	b002      	add	sp, #8
 80015d8:	4770      	bx	lr
 80015da:	46c0      	nop			; (mov r8, r8)
 80015dc:	40005c00 	.word	0x40005c00
 80015e0:	40021000 	.word	0x40021000

080015e4 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80015e4:	4770      	bx	lr

080015e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015e6:	e7fe      	b.n	80015e6 <HardFault_Handler>

080015e8 <SVC_Handler>:
 80015e8:	4770      	bx	lr

080015ea <PendSV_Handler>:
 80015ea:	4770      	bx	lr

080015ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015ec:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015ee:	f000 fa2d 	bl	8001a4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015f2:	bd10      	pop	{r4, pc}

080015f4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80015f4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80015f6:	4802      	ldr	r0, [pc, #8]	; (8001600 <DMA1_Channel1_IRQHandler+0xc>)
 80015f8:	f000 fd00 	bl	8001ffc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80015fc:	bd10      	pop	{r4, pc}
 80015fe:	46c0      	nop			; (mov r8, r8)
 8001600:	20000df8 	.word	0x20000df8

08001604 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001604:	4b0a      	ldr	r3, [pc, #40]	; (8001630 <_sbrk+0x2c>)
{
 8001606:	b510      	push	{r4, lr}
	if (heap_end == 0)
 8001608:	6819      	ldr	r1, [r3, #0]
{
 800160a:	0002      	movs	r2, r0
	if (heap_end == 0)
 800160c:	2900      	cmp	r1, #0
 800160e:	d101      	bne.n	8001614 <_sbrk+0x10>
		heap_end = &end;
 8001610:	4908      	ldr	r1, [pc, #32]	; (8001634 <_sbrk+0x30>)
 8001612:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8001614:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8001616:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8001618:	1882      	adds	r2, r0, r2
 800161a:	428a      	cmp	r2, r1
 800161c:	d906      	bls.n	800162c <_sbrk+0x28>
	{
		errno = ENOMEM;
 800161e:	f001 fe61 	bl	80032e4 <__errno>
 8001622:	230c      	movs	r3, #12
 8001624:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8001626:	2001      	movs	r0, #1
 8001628:	4240      	negs	r0, r0
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 800162a:	bd10      	pop	{r4, pc}
	heap_end += incr;
 800162c:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 800162e:	e7fc      	b.n	800162a <_sbrk+0x26>
 8001630:	20000694 	.word	0x20000694
 8001634:	200010f8 	.word	0x200010f8

08001638 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001638:	4770      	bx	lr
	...

0800163c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800163c:	4813      	ldr	r0, [pc, #76]	; (800168c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800163e:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8001640:	4813      	ldr	r0, [pc, #76]	; (8001690 <LoopForever+0x6>)
    LDR R1, [R0]
 8001642:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001644:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8001646:	4a13      	ldr	r2, [pc, #76]	; (8001694 <LoopForever+0xa>)
    CMP R1, R2
 8001648:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800164a:	d105      	bne.n	8001658 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 800164c:	4812      	ldr	r0, [pc, #72]	; (8001698 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800164e:	4913      	ldr	r1, [pc, #76]	; (800169c <LoopForever+0x12>)
    STR R1, [R0]
 8001650:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8001652:	4813      	ldr	r0, [pc, #76]	; (80016a0 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001654:	4913      	ldr	r1, [pc, #76]	; (80016a4 <LoopForever+0x1a>)
    STR R1, [R0]
 8001656:	6001      	str	r1, [r0, #0]

08001658 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001658:	4813      	ldr	r0, [pc, #76]	; (80016a8 <LoopForever+0x1e>)
  ldr r1, =_edata
 800165a:	4914      	ldr	r1, [pc, #80]	; (80016ac <LoopForever+0x22>)
  ldr r2, =_sidata
 800165c:	4a14      	ldr	r2, [pc, #80]	; (80016b0 <LoopForever+0x26>)
  movs r3, #0
 800165e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001660:	e002      	b.n	8001668 <LoopCopyDataInit>

08001662 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001662:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001664:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001666:	3304      	adds	r3, #4

08001668 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001668:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800166a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800166c:	d3f9      	bcc.n	8001662 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800166e:	4a11      	ldr	r2, [pc, #68]	; (80016b4 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8001670:	4c11      	ldr	r4, [pc, #68]	; (80016b8 <LoopForever+0x2e>)
  movs r3, #0
 8001672:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001674:	e001      	b.n	800167a <LoopFillZerobss>

08001676 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001676:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001678:	3204      	adds	r2, #4

0800167a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800167a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800167c:	d3fb      	bcc.n	8001676 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800167e:	f7ff ffdb 	bl	8001638 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001682:	f001 fe35 	bl	80032f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001686:	f7ff fd81 	bl	800118c <main>

0800168a <LoopForever>:

LoopForever:
    b LoopForever
 800168a:	e7fe      	b.n	800168a <LoopForever>
  ldr   r0, =_estack
 800168c:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8001690:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001694:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8001698:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 800169c:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80016a0:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80016a4:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80016a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016ac:	20000678 	.word	0x20000678
  ldr r2, =_sidata
 80016b0:	08004998 	.word	0x08004998
  ldr r2, =_sbss
 80016b4:	20000678 	.word	0x20000678
  ldr r4, =_ebss
 80016b8:	200010f8 	.word	0x200010f8

080016bc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016bc:	e7fe      	b.n	80016bc <ADC1_IRQHandler>
	...

080016c0 <FFT>:
{
    COMPLEX temp1, temp2;     /*temporary storage variables          */
    int i, j, k;              /*loop counter variables               */
    int upper_leg, lower_leg; /*index of upper/lower butterfly leg   */
    int leg_diff;             /*difference between upper/lower leg   */
    int num_stages = 0;       /*number of FFT stages, or iterations  */
 80016c0:	2300      	movs	r3, #0
{
 80016c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016c4:	b097      	sub	sp, #92	; 0x5c
    int num_stages = 0;       /*number of FFT stages, or iterations  */
 80016c6:	9306      	str	r3, [sp, #24]
{
 80016c8:	9009      	str	r0, [sp, #36]	; 0x24
    int index, step;          /*index and step between twiddle factor*/

    /* log(base 2) of # of points = # of stages  */
    i = 1;
 80016ca:	3301      	adds	r3, #1
 80016cc:	9301      	str	r3, [sp, #4]
    do
    {
        num_stages += 1;
 80016ce:	9b06      	ldr	r3, [sp, #24]
 80016d0:	3301      	adds	r3, #1
 80016d2:	9306      	str	r3, [sp, #24]
        i = i * 2;
 80016d4:	9b01      	ldr	r3, [sp, #4]
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	9303      	str	r3, [sp, #12]
    } while (i != N);
 80016da:	428b      	cmp	r3, r1
 80016dc:	d116      	bne.n	800170c <FFT+0x4c>

    /* starting difference between upper and lower butterfly legs*/
    leg_diff = N / 2;
    /* step between values in twiddle factor array twiddle.h     */
    step = 256 / N;
 80016de:	2080      	movs	r0, #128	; 0x80
 80016e0:	0040      	lsls	r0, r0, #1
 80016e2:	f7fe fdaf 	bl	8000244 <__divsi3>
    /* For N-point FFT                                           */

    for (i = 0; i < num_stages; i++)
 80016e6:	2300      	movs	r3, #0
    step = 256 / N;
 80016e8:	9d01      	ldr	r5, [sp, #4]
 80016ea:	9007      	str	r0, [sp, #28]
    for (i = 0; i < num_stages; i++)
 80016ec:	9308      	str	r3, [sp, #32]
    {
        index = 0;
        for (j = 0; j < leg_diff; j++)
        {
            for (upper_leg = j; upper_leg < N; upper_leg += (2 * leg_diff))
 80016ee:	006b      	lsls	r3, r5, #1
 80016f0:	9312      	str	r3, [sp, #72]	; 0x48
 80016f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80016f4:	4c4a      	ldr	r4, [pc, #296]	; (8001820 <FFT+0x160>)
 80016f6:	9304      	str	r3, [sp, #16]
 80016f8:	9b07      	ldr	r3, [sp, #28]
 80016fa:	00db      	lsls	r3, r3, #3
 80016fc:	9313      	str	r3, [sp, #76]	; 0x4c
 80016fe:	012b      	lsls	r3, r5, #4
 8001700:	930f      	str	r3, [sp, #60]	; 0x3c
 8001702:	00eb      	lsls	r3, r5, #3
 8001704:	9314      	str	r3, [sp, #80]	; 0x50
        for (j = 0; j < leg_diff; j++)
 8001706:	2300      	movs	r3, #0
 8001708:	9302      	str	r3, [sp, #8]
 800170a:	e04f      	b.n	80017ac <FFT+0xec>
 800170c:	9b03      	ldr	r3, [sp, #12]
 800170e:	e7dd      	b.n	80016cc <FFT+0xc>
            {
                lower_leg = upper_leg + leg_diff;
                temp1.real = (Y[upper_leg]).real + (Y[lower_leg]).real;
 8001710:	6833      	ldr	r3, [r6, #0]
 8001712:	930a      	str	r3, [sp, #40]	; 0x28
 8001714:	683b      	ldr	r3, [r7, #0]
                temp1.imag = (Y[upper_leg]).imag + (Y[lower_leg]).imag;
                temp2.real = (Y[upper_leg]).real - (Y[lower_leg]).real;
 8001716:	980a      	ldr	r0, [sp, #40]	; 0x28
                temp1.real = (Y[upper_leg]).real + (Y[lower_leg]).real;
 8001718:	930b      	str	r3, [sp, #44]	; 0x2c
                temp1.imag = (Y[upper_leg]).imag + (Y[lower_leg]).imag;
 800171a:	6873      	ldr	r3, [r6, #4]
                temp2.real = (Y[upper_leg]).real - (Y[lower_leg]).real;
 800171c:	990b      	ldr	r1, [sp, #44]	; 0x2c
                temp1.imag = (Y[upper_leg]).imag + (Y[lower_leg]).imag;
 800171e:	930c      	str	r3, [sp, #48]	; 0x30
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	930d      	str	r3, [sp, #52]	; 0x34
                temp2.real = (Y[upper_leg]).real - (Y[lower_leg]).real;
 8001724:	f7ff f984 	bl	8000a30 <__aeabi_fsub>
                temp2.imag = (Y[upper_leg]).imag - (Y[lower_leg]).imag;
 8001728:	990d      	ldr	r1, [sp, #52]	; 0x34
                temp2.real = (Y[upper_leg]).real - (Y[lower_leg]).real;
 800172a:	9010      	str	r0, [sp, #64]	; 0x40
                temp2.imag = (Y[upper_leg]).imag - (Y[lower_leg]).imag;
 800172c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800172e:	f7ff f97f 	bl	8000a30 <__aeabi_fsub>
                (Y[lower_leg]).real = temp2.real * (w[index]).real - temp2.imag * (w[index]).imag;
 8001732:	6863      	ldr	r3, [r4, #4]
 8001734:	6821      	ldr	r1, [r4, #0]
                temp2.imag = (Y[upper_leg]).imag - (Y[lower_leg]).imag;
 8001736:	9011      	str	r0, [sp, #68]	; 0x44
                (Y[lower_leg]).real = temp2.real * (w[index]).real - temp2.imag * (w[index]).imag;
 8001738:	9810      	ldr	r0, [sp, #64]	; 0x40
 800173a:	930e      	str	r3, [sp, #56]	; 0x38
 800173c:	f7ff f846 	bl	80007cc <__aeabi_fmul>
 8001740:	990e      	ldr	r1, [sp, #56]	; 0x38
 8001742:	9015      	str	r0, [sp, #84]	; 0x54
 8001744:	9811      	ldr	r0, [sp, #68]	; 0x44
 8001746:	f7ff f841 	bl	80007cc <__aeabi_fmul>
 800174a:	1c01      	adds	r1, r0, #0
 800174c:	9815      	ldr	r0, [sp, #84]	; 0x54
 800174e:	f7ff f96f 	bl	8000a30 <__aeabi_fsub>
 8001752:	6038      	str	r0, [r7, #0]
                (Y[lower_leg]).imag = temp2.real * (w[index]).imag + temp2.imag * (w[index]).real;
 8001754:	6821      	ldr	r1, [r4, #0]
 8001756:	9811      	ldr	r0, [sp, #68]	; 0x44
 8001758:	f7ff f838 	bl	80007cc <__aeabi_fmul>
 800175c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800175e:	9011      	str	r0, [sp, #68]	; 0x44
 8001760:	9810      	ldr	r0, [sp, #64]	; 0x40
 8001762:	f7ff f833 	bl	80007cc <__aeabi_fmul>
 8001766:	1c01      	adds	r1, r0, #0
 8001768:	9811      	ldr	r0, [sp, #68]	; 0x44
 800176a:	f7fe fe95 	bl	8000498 <__aeabi_fadd>
                temp1.real = (Y[upper_leg]).real + (Y[lower_leg]).real;
 800176e:	990b      	ldr	r1, [sp, #44]	; 0x2c
                (Y[lower_leg]).imag = temp2.real * (w[index]).imag + temp2.imag * (w[index]).real;
 8001770:	6078      	str	r0, [r7, #4]
                temp1.real = (Y[upper_leg]).real + (Y[lower_leg]).real;
 8001772:	980a      	ldr	r0, [sp, #40]	; 0x28
 8001774:	f7fe fe90 	bl	8000498 <__aeabi_fadd>
                temp1.imag = (Y[upper_leg]).imag + (Y[lower_leg]).imag;
 8001778:	990d      	ldr	r1, [sp, #52]	; 0x34
                (Y[upper_leg]).real = temp1.real;
 800177a:	6030      	str	r0, [r6, #0]
                temp1.imag = (Y[upper_leg]).imag + (Y[lower_leg]).imag;
 800177c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800177e:	f7fe fe8b 	bl	8000498 <__aeabi_fadd>
            for (upper_leg = j; upper_leg < N; upper_leg += (2 * leg_diff))
 8001782:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8001784:	9b05      	ldr	r3, [sp, #20]
 8001786:	4694      	mov	ip, r2
 8001788:	4463      	add	r3, ip
 800178a:	9305      	str	r3, [sp, #20]
 800178c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
                (Y[upper_leg]).imag = temp1.imag;
 800178e:	6070      	str	r0, [r6, #4]
 8001790:	18ff      	adds	r7, r7, r3
 8001792:	18f6      	adds	r6, r6, r3
            for (upper_leg = j; upper_leg < N; upper_leg += (2 * leg_diff))
 8001794:	9b05      	ldr	r3, [sp, #20]
 8001796:	9a03      	ldr	r2, [sp, #12]
 8001798:	4293      	cmp	r3, r2
 800179a:	dbb9      	blt.n	8001710 <FFT+0x50>
        for (j = 0; j < leg_diff; j++)
 800179c:	9b02      	ldr	r3, [sp, #8]
 800179e:	3301      	adds	r3, #1
 80017a0:	9302      	str	r3, [sp, #8]
 80017a2:	9b04      	ldr	r3, [sp, #16]
 80017a4:	3308      	adds	r3, #8
 80017a6:	9304      	str	r3, [sp, #16]
 80017a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80017aa:	18e4      	adds	r4, r4, r3
 80017ac:	9b02      	ldr	r3, [sp, #8]
 80017ae:	42ab      	cmp	r3, r5
 80017b0:	da06      	bge.n	80017c0 <FFT+0x100>
 80017b2:	9b04      	ldr	r3, [sp, #16]
 80017b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80017b6:	001e      	movs	r6, r3
 80017b8:	189f      	adds	r7, r3, r2
 80017ba:	9b02      	ldr	r3, [sp, #8]
 80017bc:	9305      	str	r3, [sp, #20]
 80017be:	e7e9      	b.n	8001794 <FFT+0xd4>
            }
            index += step;
        }
        leg_diff = leg_diff / 2;
 80017c0:	0feb      	lsrs	r3, r5, #31
 80017c2:	195d      	adds	r5, r3, r5
        step *= 2;
 80017c4:	9b07      	ldr	r3, [sp, #28]
        leg_diff = leg_diff / 2;
 80017c6:	106d      	asrs	r5, r5, #1
        step *= 2;
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	9307      	str	r3, [sp, #28]
    for (i = 0; i < num_stages; i++)
 80017cc:	9b08      	ldr	r3, [sp, #32]
 80017ce:	3301      	adds	r3, #1
 80017d0:	9308      	str	r3, [sp, #32]
 80017d2:	9a08      	ldr	r2, [sp, #32]
 80017d4:	9b06      	ldr	r3, [sp, #24]
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d189      	bne.n	80016ee <FFT+0x2e>
    }
    /* bit reversal for resequencing data */
    j = 0;
 80017da:	2200      	movs	r2, #0
    for (i = 1; i < (N - 1); i++)
 80017dc:	2001      	movs	r0, #1
 80017de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80017e0:	9c03      	ldr	r4, [sp, #12]
 80017e2:	3108      	adds	r1, #8
 80017e4:	3c01      	subs	r4, #1
 80017e6:	4284      	cmp	r4, r0
 80017e8:	dc18      	bgt.n	800181c <FFT+0x15c>
            (Y[i]).real = temp1.real;
            (Y[i]).imag = temp1.imag;
        }
    }
    return;
}
 80017ea:	b017      	add	sp, #92	; 0x5c
 80017ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
            k = k / 2;
 80017ee:	0fdd      	lsrs	r5, r3, #31
            j = j - k;
 80017f0:	1ad2      	subs	r2, r2, r3
            k = k / 2;
 80017f2:	18eb      	adds	r3, r5, r3
 80017f4:	105b      	asrs	r3, r3, #1
        while (k <= j)
 80017f6:	429a      	cmp	r2, r3
 80017f8:	daf9      	bge.n	80017ee <FFT+0x12e>
        j = j + k;
 80017fa:	18d2      	adds	r2, r2, r3
        if (i < j)
 80017fc:	4290      	cmp	r0, r2
 80017fe:	da0a      	bge.n	8001816 <FFT+0x156>
            temp1.real = (Y[j]).real;
 8001800:	9d09      	ldr	r5, [sp, #36]	; 0x24
            (Y[j]).real = (Y[i]).real;
 8001802:	680f      	ldr	r7, [r1, #0]
            temp1.real = (Y[j]).real;
 8001804:	00d3      	lsls	r3, r2, #3
 8001806:	18eb      	adds	r3, r5, r3
 8001808:	681e      	ldr	r6, [r3, #0]
            (Y[j]).real = (Y[i]).real;
 800180a:	601f      	str	r7, [r3, #0]
            temp1.imag = (Y[j]).imag;
 800180c:	685d      	ldr	r5, [r3, #4]
            (Y[j]).imag = (Y[i]).imag;
 800180e:	684f      	ldr	r7, [r1, #4]
 8001810:	605f      	str	r7, [r3, #4]
            (Y[i]).real = temp1.real;
 8001812:	600e      	str	r6, [r1, #0]
            (Y[i]).imag = temp1.imag;
 8001814:	604d      	str	r5, [r1, #4]
    for (i = 1; i < (N - 1); i++)
 8001816:	3001      	adds	r0, #1
 8001818:	3108      	adds	r1, #8
 800181a:	e7e4      	b.n	80017e6 <FFT+0x126>
 800181c:	9b01      	ldr	r3, [sp, #4]
 800181e:	e7ea      	b.n	80017f6 <FFT+0x136>
 8001820:	20000204 	.word	0x20000204

08001824 <ssd1306_WriteCommand>:
void ssd1306_Reset(void) {
	/* for I2C - do nothing */
}

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001824:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8001826:	2217      	movs	r2, #23
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001828:	2301      	movs	r3, #1
void ssd1306_WriteCommand(uint8_t byte) {
 800182a:	446a      	add	r2, sp
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800182c:	425b      	negs	r3, r3
void ssd1306_WriteCommand(uint8_t byte) {
 800182e:	7010      	strb	r0, [r2, #0]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001830:	9302      	str	r3, [sp, #8]
 8001832:	3302      	adds	r3, #2
 8001834:	9200      	str	r2, [sp, #0]
 8001836:	9301      	str	r3, [sp, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	2178      	movs	r1, #120	; 0x78
 800183c:	4802      	ldr	r0, [pc, #8]	; (8001848 <ssd1306_WriteCommand+0x24>)
 800183e:	f000 fe3f 	bl	80024c0 <HAL_I2C_Mem_Write>
}
 8001842:	b007      	add	sp, #28
 8001844:	bd00      	pop	{pc}
 8001846:	46c0      	nop			; (mov r8, r8)
 8001848:	20000b28 	.word	0x20000b28

0800184c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800184c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800184e:	2301      	movs	r3, #1
 8001850:	b289      	uxth	r1, r1
 8001852:	425b      	negs	r3, r3
 8001854:	9302      	str	r3, [sp, #8]
 8001856:	9101      	str	r1, [sp, #4]
 8001858:	9000      	str	r0, [sp, #0]
 800185a:	3302      	adds	r3, #2
 800185c:	2240      	movs	r2, #64	; 0x40
 800185e:	2178      	movs	r1, #120	; 0x78
 8001860:	4802      	ldr	r0, [pc, #8]	; (800186c <ssd1306_WriteData+0x20>)
 8001862:	f000 fe2d 	bl	80024c0 <HAL_I2C_Mem_Write>
}
 8001866:	b005      	add	sp, #20
 8001868:	bd00      	pop	{pc}
 800186a:	46c0      	nop			; (mov r8, r8)
 800186c:	20000b28 	.word	0x20000b28

08001870 <ssd1306_Fill>:
void ssd1306_Fill(SSD1306_COLOR color) {
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001870:	1e42      	subs	r2, r0, #1
 8001872:	4190      	sbcs	r0, r2
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001874:	2280      	movs	r2, #128	; 0x80
 8001876:	2300      	movs	r3, #0
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001878:	4903      	ldr	r1, [pc, #12]	; (8001888 <ssd1306_Fill+0x18>)
 800187a:	4240      	negs	r0, r0
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800187c:	00d2      	lsls	r2, r2, #3
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800187e:	54c8      	strb	r0, [r1, r3]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001880:	3301      	adds	r3, #1
 8001882:	4293      	cmp	r3, r2
 8001884:	d1fb      	bne.n	800187e <ssd1306_Fill+0xe>
    }
}
 8001886:	4770      	bx	lr
 8001888:	2000069e 	.word	0x2000069e

0800188c <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 800188c:	b510      	push	{r4, lr}
 800188e:	2400      	movs	r4, #0
    uint8_t i;
    for(i = 0; i < 8; i++) {
        ssd1306_WriteCommand(0xB0 + i);
 8001890:	0020      	movs	r0, r4
 8001892:	3850      	subs	r0, #80	; 0x50
 8001894:	b2c0      	uxtb	r0, r0
 8001896:	f7ff ffc5 	bl	8001824 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 800189a:	2000      	movs	r0, #0
 800189c:	f7ff ffc2 	bl	8001824 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 80018a0:	2010      	movs	r0, #16
 80018a2:	f7ff ffbf 	bl	8001824 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80018a6:	4b05      	ldr	r3, [pc, #20]	; (80018bc <ssd1306_UpdateScreen+0x30>)
 80018a8:	01e0      	lsls	r0, r4, #7
 80018aa:	18c0      	adds	r0, r0, r3
 80018ac:	2180      	movs	r1, #128	; 0x80
 80018ae:	3401      	adds	r4, #1
 80018b0:	f7ff ffcc 	bl	800184c <ssd1306_WriteData>
    for(i = 0; i < 8; i++) {
 80018b4:	2c08      	cmp	r4, #8
 80018b6:	d1eb      	bne.n	8001890 <ssd1306_UpdateScreen+0x4>
    }
}
 80018b8:	bd10      	pop	{r4, pc}
 80018ba:	46c0      	nop			; (mov r8, r8)
 80018bc:	2000069e 	.word	0x2000069e

080018c0 <ssd1306_DrawPixel>:
//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80018c0:	b243      	sxtb	r3, r0
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80018c2:	b570      	push	{r4, r5, r6, lr}
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	db16      	blt.n	80018f6 <ssd1306_DrawPixel+0x36>
 80018c8:	293f      	cmp	r1, #63	; 0x3f
 80018ca:	d814      	bhi.n	80018f6 <ssd1306_DrawPixel+0x36>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 80018cc:	4b0c      	ldr	r3, [pc, #48]	; (8001900 <ssd1306_DrawPixel+0x40>)
 80018ce:	791b      	ldrb	r3, [r3, #4]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d002      	beq.n	80018da <ssd1306_DrawPixel+0x1a>
        color = (SSD1306_COLOR)!color;
 80018d4:	4253      	negs	r3, r2
 80018d6:	415a      	adcs	r2, r3
 80018d8:	b2d2      	uxtb	r2, r2
 80018da:	2407      	movs	r4, #7
 80018dc:	08cb      	lsrs	r3, r1, #3
 80018de:	400c      	ands	r4, r1
 80018e0:	2101      	movs	r1, #1
 80018e2:	40a1      	lsls	r1, r4
 80018e4:	01db      	lsls	r3, r3, #7
 80018e6:	4d07      	ldr	r5, [pc, #28]	; (8001904 <ssd1306_DrawPixel+0x44>)
 80018e8:	1818      	adds	r0, r3, r0
 80018ea:	562e      	ldrsb	r6, [r5, r0]
 80018ec:	b24b      	sxtb	r3, r1
    }
    
    // Draw in the right color
    if(color == White) {
 80018ee:	2a01      	cmp	r2, #1
 80018f0:	d102      	bne.n	80018f8 <ssd1306_DrawPixel+0x38>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80018f2:	4333      	orrs	r3, r6
 80018f4:	542b      	strb	r3, [r5, r0]
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
    }
}
 80018f6:	bd70      	pop	{r4, r5, r6, pc}
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80018f8:	439e      	bics	r6, r3
 80018fa:	542e      	strb	r6, [r5, r0]
 80018fc:	e7fb      	b.n	80018f6 <ssd1306_DrawPixel+0x36>
 80018fe:	46c0      	nop			; (mov r8, r8)
 8001900:	20000698 	.word	0x20000698
 8001904:	2000069e 	.word	0x2000069e

08001908 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001908:	b5f0      	push	{r4, r5, r6, r7, lr}
 800190a:	b089      	sub	sp, #36	; 0x24
 800190c:	9303      	str	r3, [sp, #12]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800190e:	0003      	movs	r3, r0
 8001910:	3b20      	subs	r3, #32
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001912:	9207      	str	r2, [sp, #28]
    if (ch < 32 || ch > 126)
 8001914:	b2da      	uxtb	r2, r3
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001916:	0005      	movs	r5, r0
 8001918:	9106      	str	r1, [sp, #24]
    if (ch < 32 || ch > 126)
 800191a:	2a5e      	cmp	r2, #94	; 0x5e
 800191c:	d843      	bhi.n	80019a6 <ssd1306_WriteChar+0x9e>
 800191e:	aa06      	add	r2, sp, #24
 8001920:	7812      	ldrb	r2, [r2, #0]
 8001922:	9201      	str	r2, [sp, #4]
        return 0;
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001924:	4a21      	ldr	r2, [pc, #132]	; (80019ac <ssd1306_WriteChar+0xa4>)
 8001926:	9801      	ldr	r0, [sp, #4]
 8001928:	8811      	ldrh	r1, [r2, #0]
 800192a:	9100      	str	r1, [sp, #0]
 800192c:	1809      	adds	r1, r1, r0
 800192e:	2980      	cmp	r1, #128	; 0x80
 8001930:	dc39      	bgt.n	80019a6 <ssd1306_WriteChar+0x9e>
 8001932:	a906      	add	r1, sp, #24
 8001934:	7849      	ldrb	r1, [r1, #1]
 8001936:	9102      	str	r1, [sp, #8]
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8001938:	8854      	ldrh	r4, [r2, #2]
 800193a:	1862      	adds	r2, r4, r1
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800193c:	2a40      	cmp	r2, #64	; 0x40
 800193e:	dc32      	bgt.n	80019a6 <ssd1306_WriteChar+0x9e>
        return 0;
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001940:	000a      	movs	r2, r1
    for(i = 0; i < Font.FontHeight; i++) {
 8001942:	2700      	movs	r7, #0
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001944:	435a      	muls	r2, r3
 8001946:	b2e4      	uxtb	r4, r4
 8001948:	9204      	str	r2, [sp, #16]
    for(i = 0; i < Font.FontHeight; i++) {
 800194a:	9b02      	ldr	r3, [sp, #8]
 800194c:	42bb      	cmp	r3, r7
 800194e:	d808      	bhi.n	8001962 <ssd1306_WriteChar+0x5a>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001950:	9a01      	ldr	r2, [sp, #4]
 8001952:	9b00      	ldr	r3, [sp, #0]
 8001954:	4694      	mov	ip, r2
 8001956:	4a15      	ldr	r2, [pc, #84]	; (80019ac <ssd1306_WriteChar+0xa4>)
 8001958:	4463      	add	r3, ip
 800195a:	8013      	strh	r3, [r2, #0]
    
    // Return written char for validation
    return ch;
}
 800195c:	0028      	movs	r0, r5
 800195e:	b009      	add	sp, #36	; 0x24
 8001960:	bdf0      	pop	{r4, r5, r6, r7, pc}
        for(j = 0; j < Font.FontWidth; j++) {
 8001962:	2600      	movs	r6, #0
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001964:	9b04      	ldr	r3, [sp, #16]
 8001966:	9a07      	ldr	r2, [sp, #28]
 8001968:	19db      	adds	r3, r3, r7
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	5a9b      	ldrh	r3, [r3, r2]
 800196e:	9305      	str	r3, [sp, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001970:	9b01      	ldr	r3, [sp, #4]
 8001972:	42b3      	cmp	r3, r6
 8001974:	d803      	bhi.n	800197e <ssd1306_WriteChar+0x76>
 8001976:	3401      	adds	r4, #1
    for(i = 0; i < Font.FontHeight; i++) {
 8001978:	3701      	adds	r7, #1
 800197a:	b2e4      	uxtb	r4, r4
 800197c:	e7e5      	b.n	800194a <ssd1306_WriteChar+0x42>
 800197e:	9b00      	ldr	r3, [sp, #0]
            if((b << j) & 0x8000)  {
 8001980:	2280      	movs	r2, #128	; 0x80
 8001982:	18f0      	adds	r0, r6, r3
 8001984:	9b05      	ldr	r3, [sp, #20]
 8001986:	0212      	lsls	r2, r2, #8
 8001988:	40b3      	lsls	r3, r6
 800198a:	b2c0      	uxtb	r0, r0
 800198c:	4213      	tst	r3, r2
 800198e:	d005      	beq.n	800199c <ssd1306_WriteChar+0x94>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001990:	9a03      	ldr	r2, [sp, #12]
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001992:	0021      	movs	r1, r4
 8001994:	f7ff ff94 	bl	80018c0 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001998:	3601      	adds	r6, #1
 800199a:	e7e9      	b.n	8001970 <ssd1306_WriteChar+0x68>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800199c:	9a03      	ldr	r2, [sp, #12]
 800199e:	4253      	negs	r3, r2
 80019a0:	415a      	adcs	r2, r3
 80019a2:	b2d2      	uxtb	r2, r2
 80019a4:	e7f5      	b.n	8001992 <ssd1306_WriteChar+0x8a>
        return 0;
 80019a6:	2500      	movs	r5, #0
 80019a8:	e7d8      	b.n	800195c <ssd1306_WriteChar+0x54>
 80019aa:	46c0      	nop			; (mov r8, r8)
 80019ac:	20000698 	.word	0x20000698

080019b0 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80019b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80019b2:	0004      	movs	r4, r0
 80019b4:	001d      	movs	r5, r3
 80019b6:	9100      	str	r1, [sp, #0]
 80019b8:	9201      	str	r2, [sp, #4]
    // Write until null-byte
    while (*str) {
 80019ba:	7820      	ldrb	r0, [r4, #0]
 80019bc:	2800      	cmp	r0, #0
 80019be:	d100      	bne.n	80019c2 <ssd1306_WriteString+0x12>
        str++;
    }
    
    // Everything ok
    return *str;
}
 80019c0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80019c2:	002b      	movs	r3, r5
 80019c4:	9900      	ldr	r1, [sp, #0]
 80019c6:	9a01      	ldr	r2, [sp, #4]
 80019c8:	f7ff ff9e 	bl	8001908 <ssd1306_WriteChar>
 80019cc:	0003      	movs	r3, r0
 80019ce:	7820      	ldrb	r0, [r4, #0]
 80019d0:	4283      	cmp	r3, r0
 80019d2:	d1f5      	bne.n	80019c0 <ssd1306_WriteString+0x10>
        str++;
 80019d4:	3401      	adds	r4, #1
 80019d6:	e7f0      	b.n	80019ba <ssd1306_WriteString+0xa>

080019d8 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
    SSD1306.CurrentX = x;
 80019d8:	4b01      	ldr	r3, [pc, #4]	; (80019e0 <ssd1306_SetCursor+0x8>)
 80019da:	8018      	strh	r0, [r3, #0]
    SSD1306.CurrentY = y;
 80019dc:	8059      	strh	r1, [r3, #2]
}
 80019de:	4770      	bx	lr
 80019e0:	20000698 	.word	0x20000698

080019e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019e4:	b570      	push	{r4, r5, r6, lr}
 80019e6:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019e8:	20fa      	movs	r0, #250	; 0xfa
 80019ea:	4b0d      	ldr	r3, [pc, #52]	; (8001a20 <HAL_InitTick+0x3c>)
 80019ec:	0080      	lsls	r0, r0, #2
 80019ee:	7819      	ldrb	r1, [r3, #0]
 80019f0:	f7fe fb9e 	bl	8000130 <__udivsi3>
 80019f4:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <HAL_InitTick+0x40>)
 80019f6:	0001      	movs	r1, r0
 80019f8:	6818      	ldr	r0, [r3, #0]
 80019fa:	f7fe fb99 	bl	8000130 <__udivsi3>
 80019fe:	f000 fa75 	bl	8001eec <HAL_SYSTICK_Config>
 8001a02:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8001a04:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a06:	2c00      	cmp	r4, #0
 8001a08:	d109      	bne.n	8001a1e <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a0a:	2d03      	cmp	r5, #3
 8001a0c:	d807      	bhi.n	8001a1e <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a0e:	3802      	subs	r0, #2
 8001a10:	0022      	movs	r2, r4
 8001a12:	0029      	movs	r1, r5
 8001a14:	f000 fa34 	bl	8001e80 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a18:	0020      	movs	r0, r4
 8001a1a:	4b03      	ldr	r3, [pc, #12]	; (8001a28 <HAL_InitTick+0x44>)
 8001a1c:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 8001a1e:	bd70      	pop	{r4, r5, r6, pc}
 8001a20:	2000060c 	.word	0x2000060c
 8001a24:	20000200 	.word	0x20000200
 8001a28:	20000610 	.word	0x20000610

08001a2c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a2c:	2310      	movs	r3, #16
 8001a2e:	4a06      	ldr	r2, [pc, #24]	; (8001a48 <HAL_Init+0x1c>)
{
 8001a30:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a32:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a34:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a36:	430b      	orrs	r3, r1
 8001a38:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a3a:	f7ff ffd3 	bl	80019e4 <HAL_InitTick>
  HAL_MspInit();
 8001a3e:	f7ff fced 	bl	800141c <HAL_MspInit>
}
 8001a42:	2000      	movs	r0, #0
 8001a44:	bd10      	pop	{r4, pc}
 8001a46:	46c0      	nop			; (mov r8, r8)
 8001a48:	40022000 	.word	0x40022000

08001a4c <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001a4c:	4a03      	ldr	r2, [pc, #12]	; (8001a5c <HAL_IncTick+0x10>)
 8001a4e:	4b04      	ldr	r3, [pc, #16]	; (8001a60 <HAL_IncTick+0x14>)
 8001a50:	6811      	ldr	r1, [r2, #0]
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	185b      	adds	r3, r3, r1
 8001a56:	6013      	str	r3, [r2, #0]
}
 8001a58:	4770      	bx	lr
 8001a5a:	46c0      	nop			; (mov r8, r8)
 8001a5c:	200010f0 	.word	0x200010f0
 8001a60:	2000060c 	.word	0x2000060c

08001a64 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001a64:	4b01      	ldr	r3, [pc, #4]	; (8001a6c <HAL_GetTick+0x8>)
 8001a66:	6818      	ldr	r0, [r3, #0]
}
 8001a68:	4770      	bx	lr
 8001a6a:	46c0      	nop			; (mov r8, r8)
 8001a6c:	200010f0 	.word	0x200010f0

08001a70 <ADC_Enable>:
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8001a70:	2300      	movs	r3, #0
{
 8001a72:	b573      	push	{r0, r1, r4, r5, r6, lr}
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a74:	2103      	movs	r1, #3
  __IO uint32_t wait_loop_index = 0U;
 8001a76:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a78:	6803      	ldr	r3, [r0, #0]
{
 8001a7a:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a7c:	689a      	ldr	r2, [r3, #8]
 8001a7e:	400a      	ands	r2, r1
 8001a80:	2a01      	cmp	r2, #1
 8001a82:	d107      	bne.n	8001a94 <ADC_Enable+0x24>
 8001a84:	6819      	ldr	r1, [r3, #0]
 8001a86:	4211      	tst	r1, r2
 8001a88:	d001      	beq.n	8001a8e <ADC_Enable+0x1e>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001a8a:	2000      	movs	r0, #0
}
 8001a8c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a8e:	68da      	ldr	r2, [r3, #12]
 8001a90:	0412      	lsls	r2, r2, #16
 8001a92:	d4fa      	bmi.n	8001a8a <ADC_Enable+0x1a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001a94:	6899      	ldr	r1, [r3, #8]
 8001a96:	4a19      	ldr	r2, [pc, #100]	; (8001afc <ADC_Enable+0x8c>)
 8001a98:	4211      	tst	r1, r2
 8001a9a:	d008      	beq.n	8001aae <ADC_Enable+0x3e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a9c:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a9e:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001aa0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aa6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001aa8:	4303      	orrs	r3, r0
 8001aaa:	63e3      	str	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8001aac:	e7ee      	b.n	8001a8c <ADC_Enable+0x1c>
    __HAL_ADC_ENABLE(hadc);
 8001aae:	2201      	movs	r2, #1
 8001ab0:	6899      	ldr	r1, [r3, #8]
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ab6:	4b12      	ldr	r3, [pc, #72]	; (8001b00 <ADC_Enable+0x90>)
 8001ab8:	4912      	ldr	r1, [pc, #72]	; (8001b04 <ADC_Enable+0x94>)
 8001aba:	6818      	ldr	r0, [r3, #0]
 8001abc:	f7fe fb38 	bl	8000130 <__udivsi3>
 8001ac0:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 8001ac2:	9b01      	ldr	r3, [sp, #4]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d115      	bne.n	8001af4 <ADC_Enable+0x84>
    tickstart = HAL_GetTick();
 8001ac8:	f7ff ffcc 	bl	8001a64 <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001acc:	2501      	movs	r5, #1
    tickstart = HAL_GetTick();
 8001ace:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001ad0:	6823      	ldr	r3, [r4, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	422b      	tst	r3, r5
 8001ad6:	d1d8      	bne.n	8001a8a <ADC_Enable+0x1a>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001ad8:	f7ff ffc4 	bl	8001a64 <HAL_GetTick>
 8001adc:	1b80      	subs	r0, r0, r6
 8001ade:	2802      	cmp	r0, #2
 8001ae0:	d9f6      	bls.n	8001ad0 <ADC_Enable+0x60>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ae2:	2310      	movs	r3, #16
 8001ae4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        return HAL_ERROR;
 8001ae6:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	63a3      	str	r3, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001aee:	432b      	orrs	r3, r5
 8001af0:	63e3      	str	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8001af2:	e7cb      	b.n	8001a8c <ADC_Enable+0x1c>
      wait_loop_index--;
 8001af4:	9b01      	ldr	r3, [sp, #4]
 8001af6:	3b01      	subs	r3, #1
 8001af8:	9301      	str	r3, [sp, #4]
 8001afa:	e7e2      	b.n	8001ac2 <ADC_Enable+0x52>
 8001afc:	80000017 	.word	0x80000017
 8001b00:	20000200 	.word	0x20000200
 8001b04:	000f4240 	.word	0x000f4240

08001b08 <HAL_ADC_Init>:
{
 8001b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b0a:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001b0c:	2001      	movs	r0, #1
  if(hadc == NULL)
 8001b0e:	2c00      	cmp	r4, #0
 8001b10:	d07e      	beq.n	8001c10 <HAL_ADC_Init+0x108>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b12:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d106      	bne.n	8001b26 <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 8001b18:	0022      	movs	r2, r4
 8001b1a:	3234      	adds	r2, #52	; 0x34
    ADC_CLEAR_ERRORCODE(hadc);
 8001b1c:	63e3      	str	r3, [r4, #60]	; 0x3c
    HAL_ADC_MspInit(hadc);
 8001b1e:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 8001b20:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 8001b22:	f7ff fc99 	bl	8001458 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001b26:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001b28:	06db      	lsls	r3, r3, #27
 8001b2a:	d500      	bpl.n	8001b2e <HAL_ADC_Init+0x26>
 8001b2c:	e085      	b.n	8001c3a <HAL_ADC_Init+0x132>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001b2e:	2204      	movs	r2, #4
 8001b30:	6823      	ldr	r3, [r4, #0]
 8001b32:	6898      	ldr	r0, [r3, #8]
 8001b34:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001b36:	d000      	beq.n	8001b3a <HAL_ADC_Init+0x32>
 8001b38:	e07f      	b.n	8001c3a <HAL_ADC_Init+0x132>
    ADC_STATE_CLR_SET(hadc->State,
 8001b3a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001b3c:	4942      	ldr	r1, [pc, #264]	; (8001c48 <HAL_ADC_Init+0x140>)
 8001b3e:	4011      	ands	r1, r2
 8001b40:	2202      	movs	r2, #2
 8001b42:	430a      	orrs	r2, r1
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001b44:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State,
 8001b46:	63a2      	str	r2, [r4, #56]	; 0x38
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001b48:	689a      	ldr	r2, [r3, #8]
 8001b4a:	400a      	ands	r2, r1
 8001b4c:	2a01      	cmp	r2, #1
 8001b4e:	d105      	bne.n	8001b5c <HAL_ADC_Init+0x54>
 8001b50:	6819      	ldr	r1, [r3, #0]
 8001b52:	4211      	tst	r1, r2
 8001b54:	d10e      	bne.n	8001b74 <HAL_ADC_Init+0x6c>
 8001b56:	68da      	ldr	r2, [r3, #12]
 8001b58:	0412      	lsls	r2, r2, #16
 8001b5a:	d40b      	bmi.n	8001b74 <HAL_ADC_Init+0x6c>
      MODIFY_REG(hadc->Instance->CFGR1,
 8001b5c:	2118      	movs	r1, #24
 8001b5e:	68da      	ldr	r2, [r3, #12]
 8001b60:	438a      	bics	r2, r1
 8001b62:	68a1      	ldr	r1, [r4, #8]
 8001b64:	430a      	orrs	r2, r1
 8001b66:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001b68:	6919      	ldr	r1, [r3, #16]
 8001b6a:	6862      	ldr	r2, [r4, #4]
 8001b6c:	0089      	lsls	r1, r1, #2
 8001b6e:	0889      	lsrs	r1, r1, #2
 8001b70:	4311      	orrs	r1, r2
 8001b72:	6119      	str	r1, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001b74:	68da      	ldr	r2, [r3, #12]
 8001b76:	4935      	ldr	r1, [pc, #212]	; (8001c4c <HAL_ADC_Init+0x144>)
 8001b78:	400a      	ands	r2, r1
 8001b7a:	60da      	str	r2, [r3, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b7c:	7e25      	ldrb	r5, [r4, #24]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001b7e:	7e62      	ldrb	r2, [r4, #25]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b80:	03ad      	lsls	r5, r5, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001b82:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b84:	4315      	orrs	r5, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001b86:	6aa2      	ldr	r2, [r4, #40]	; 0x28
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001b88:	7ea1      	ldrb	r1, [r4, #26]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001b8a:	3a01      	subs	r2, #1
 8001b8c:	1e56      	subs	r6, r2, #1
 8001b8e:	41b2      	sbcs	r2, r6
 8001b90:	0316      	lsls	r6, r2, #12
 8001b92:	68e2      	ldr	r2, [r4, #12]
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001b94:	034f      	lsls	r7, r1, #13
 8001b96:	4315      	orrs	r5, r2
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001b98:	6922      	ldr	r2, [r4, #16]
 8001b9a:	432f      	orrs	r7, r5
 8001b9c:	2a02      	cmp	r2, #2
 8001b9e:	d100      	bne.n	8001ba2 <HAL_ADC_Init+0x9a>
 8001ba0:	2004      	movs	r0, #4
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001ba2:	1d62      	adds	r2, r4, #5
 8001ba4:	7fd2      	ldrb	r2, [r2, #31]
 8001ba6:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001ba8:	433a      	orrs	r2, r7
 8001baa:	4332      	orrs	r2, r6
 8001bac:	4302      	orrs	r2, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001bae:	7ee0      	ldrb	r0, [r4, #27]
 8001bb0:	2801      	cmp	r0, #1
 8001bb2:	d104      	bne.n	8001bbe <HAL_ADC_Init+0xb6>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001bb4:	2900      	cmp	r1, #0
 8001bb6:	d12c      	bne.n	8001c12 <HAL_ADC_Init+0x10a>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001bb8:	2180      	movs	r1, #128	; 0x80
 8001bba:	0249      	lsls	r1, r1, #9
 8001bbc:	430a      	orrs	r2, r1
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001bbe:	20c2      	movs	r0, #194	; 0xc2
 8001bc0:	69e1      	ldr	r1, [r4, #28]
 8001bc2:	30ff      	adds	r0, #255	; 0xff
 8001bc4:	4281      	cmp	r1, r0
 8001bc6:	d002      	beq.n	8001bce <HAL_ADC_Init+0xc6>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001bc8:	6a20      	ldr	r0, [r4, #32]
 8001bca:	4301      	orrs	r1, r0
 8001bcc:	430a      	orrs	r2, r1
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001bce:	2080      	movs	r0, #128	; 0x80
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001bd0:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001bd2:	0540      	lsls	r0, r0, #21
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001bd4:	4311      	orrs	r1, r2
 8001bd6:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001bd8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001bda:	4281      	cmp	r1, r0
 8001bdc:	d002      	beq.n	8001be4 <HAL_ADC_Init+0xdc>
 8001bde:	1e48      	subs	r0, r1, #1
 8001be0:	2806      	cmp	r0, #6
 8001be2:	d807      	bhi.n	8001bf4 <HAL_ADC_Init+0xec>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001be4:	2507      	movs	r5, #7
 8001be6:	6958      	ldr	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001be8:	4029      	ands	r1, r5
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001bea:	43a8      	bics	r0, r5
 8001bec:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001bee:	6958      	ldr	r0, [r3, #20]
 8001bf0:	4301      	orrs	r1, r0
 8001bf2:	6159      	str	r1, [r3, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	4916      	ldr	r1, [pc, #88]	; (8001c50 <HAL_ADC_Init+0x148>)
 8001bf8:	400b      	ands	r3, r1
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d111      	bne.n	8001c22 <HAL_ADC_Init+0x11a>
      ADC_CLEAR_ERRORCODE(hadc);
 8001bfe:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8001c00:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 8001c02:	63e0      	str	r0, [r4, #60]	; 0x3c
      ADC_STATE_CLR_SET(hadc->State,
 8001c04:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001c06:	4393      	bics	r3, r2
 8001c08:	001a      	movs	r2, r3
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8001c10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c12:	2120      	movs	r1, #32
 8001c14:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8001c16:	4329      	orrs	r1, r5
 8001c18:	63a1      	str	r1, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c1a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001c1c:	4308      	orrs	r0, r1
 8001c1e:	63e0      	str	r0, [r4, #60]	; 0x3c
 8001c20:	e7cd      	b.n	8001bbe <HAL_ADC_Init+0xb6>
      ADC_STATE_CLR_SET(hadc->State,
 8001c22:	2212      	movs	r2, #18
 8001c24:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c26:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8001c28:	4393      	bics	r3, r2
 8001c2a:	001a      	movs	r2, r3
 8001c2c:	2310      	movs	r3, #16
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c32:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001c34:	4303      	orrs	r3, r0
 8001c36:	63e3      	str	r3, [r4, #60]	; 0x3c
 8001c38:	e7ea      	b.n	8001c10 <HAL_ADC_Init+0x108>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c3a:	2310      	movs	r3, #16
 8001c3c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 8001c3e:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c40:	4313      	orrs	r3, r2
 8001c42:	63a3      	str	r3, [r4, #56]	; 0x38
 8001c44:	e7e4      	b.n	8001c10 <HAL_ADC_Init+0x108>
 8001c46:	46c0      	nop			; (mov r8, r8)
 8001c48:	fffffefd 	.word	0xfffffefd
 8001c4c:	fffe0219 	.word	0xfffe0219
 8001c50:	833fffe7 	.word	0x833fffe7

08001c54 <HAL_ADC_Start_DMA>:
{
 8001c54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001c56:	6803      	ldr	r3, [r0, #0]
{
 8001c58:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001c5a:	689b      	ldr	r3, [r3, #8]
{
 8001c5c:	000f      	movs	r7, r1
 8001c5e:	9201      	str	r2, [sp, #4]
    tmp_hal_status = HAL_BUSY;
 8001c60:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001c62:	075b      	lsls	r3, r3, #29
 8001c64:	d430      	bmi.n	8001cc8 <HAL_ADC_Start_DMA+0x74>
    __HAL_LOCK(hadc);
 8001c66:	0026      	movs	r6, r4
 8001c68:	3634      	adds	r6, #52	; 0x34
 8001c6a:	7833      	ldrb	r3, [r6, #0]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d02b      	beq.n	8001cc8 <HAL_ADC_Start_DMA+0x74>
 8001c70:	2301      	movs	r3, #1
 8001c72:	7033      	strb	r3, [r6, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001c74:	7e63      	ldrb	r3, [r4, #25]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d127      	bne.n	8001cca <HAL_ADC_Start_DMA+0x76>
      ADC_STATE_CLR_SET(hadc->State,
 8001c7a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001c7c:	4a16      	ldr	r2, [pc, #88]	; (8001cd8 <HAL_ADC_Start_DMA+0x84>)
      ADC_CLEAR_ERRORCODE(hadc);
 8001c7e:	2500      	movs	r5, #0
      ADC_STATE_CLR_SET(hadc->State,
 8001c80:	401a      	ands	r2, r3
 8001c82:	2380      	movs	r3, #128	; 0x80
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	4313      	orrs	r3, r2
 8001c88:	63a3      	str	r3, [r4, #56]	; 0x38
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001c8a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001c8c:	4b13      	ldr	r3, [pc, #76]	; (8001cdc <HAL_ADC_Start_DMA+0x88>)
      ADC_CLEAR_ERRORCODE(hadc);
 8001c8e:	63e5      	str	r5, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hadc);
 8001c90:	7035      	strb	r5, [r6, #0]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001c92:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001c94:	4b12      	ldr	r3, [pc, #72]	; (8001ce0 <HAL_ADC_Start_DMA+0x8c>)
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001c96:	6821      	ldr	r1, [r4, #0]
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001c98:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001c9a:	4b12      	ldr	r3, [pc, #72]	; (8001ce4 <HAL_ADC_Start_DMA+0x90>)
 8001c9c:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001c9e:	231c      	movs	r3, #28
 8001ca0:	600b      	str	r3, [r1, #0]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001ca2:	684a      	ldr	r2, [r1, #4]
 8001ca4:	3b0c      	subs	r3, #12
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	604b      	str	r3, [r1, #4]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001caa:	2301      	movs	r3, #1
 8001cac:	68ca      	ldr	r2, [r1, #12]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	60cb      	str	r3, [r1, #12]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001cb2:	003a      	movs	r2, r7
 8001cb4:	3140      	adds	r1, #64	; 0x40
 8001cb6:	9b01      	ldr	r3, [sp, #4]
 8001cb8:	f000 f964 	bl	8001f84 <HAL_DMA_Start_IT>
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001cbc:	2304      	movs	r3, #4
 8001cbe:	0028      	movs	r0, r5
 8001cc0:	6822      	ldr	r2, [r4, #0]
 8001cc2:	6891      	ldr	r1, [r2, #8]
 8001cc4:	430b      	orrs	r3, r1
 8001cc6:	6093      	str	r3, [r2, #8]
}
 8001cc8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8001cca:	0020      	movs	r0, r4
 8001ccc:	f7ff fed0 	bl	8001a70 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8001cd0:	2800      	cmp	r0, #0
 8001cd2:	d0d2      	beq.n	8001c7a <HAL_ADC_Start_DMA+0x26>
 8001cd4:	e7f8      	b.n	8001cc8 <HAL_ADC_Start_DMA+0x74>
 8001cd6:	46c0      	nop			; (mov r8, r8)
 8001cd8:	fffff0fe 	.word	0xfffff0fe
 8001cdc:	08001ce9 	.word	0x08001ce9
 8001ce0:	08001d5b 	.word	0x08001d5b
 8001ce4:	08001d67 	.word	0x08001d67

08001ce8 <ADC_DMAConvCplt>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001ce8:	2250      	movs	r2, #80	; 0x50
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001cea:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8001cec:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001cee:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001cf0:	4211      	tst	r1, r2
 8001cf2:	d12a      	bne.n	8001d4a <ADC_DMAConvCplt+0x62>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001cf4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001cf6:	32b1      	adds	r2, #177	; 0xb1
 8001cf8:	32ff      	adds	r2, #255	; 0xff
 8001cfa:	430a      	orrs	r2, r1
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001cfc:	21c0      	movs	r1, #192	; 0xc0
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001cfe:	639a      	str	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	0109      	lsls	r1, r1, #4
 8001d04:	68d0      	ldr	r0, [r2, #12]
 8001d06:	4208      	tst	r0, r1
 8001d08:	d112      	bne.n	8001d30 <ADC_DMAConvCplt+0x48>
 8001d0a:	7e99      	ldrb	r1, [r3, #26]
 8001d0c:	2900      	cmp	r1, #0
 8001d0e:	d10f      	bne.n	8001d30 <ADC_DMAConvCplt+0x48>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001d10:	6811      	ldr	r1, [r2, #0]
 8001d12:	0709      	lsls	r1, r1, #28
 8001d14:	d50c      	bpl.n	8001d30 <ADC_DMAConvCplt+0x48>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001d16:	6891      	ldr	r1, [r2, #8]
 8001d18:	0749      	lsls	r1, r1, #29
 8001d1a:	d40d      	bmi.n	8001d38 <ADC_DMAConvCplt+0x50>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001d1c:	200c      	movs	r0, #12
 8001d1e:	6851      	ldr	r1, [r2, #4]
 8001d20:	4381      	bics	r1, r0
 8001d22:	6051      	str	r1, [r2, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001d24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d26:	490b      	ldr	r1, [pc, #44]	; (8001d54 <ADC_DMAConvCplt+0x6c>)
 8001d28:	4011      	ands	r1, r2
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d30:	0018      	movs	r0, r3
 8001d32:	f7ff fb69 	bl	8001408 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8001d36:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d38:	2220      	movs	r2, #32
 8001d3a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	639a      	str	r2, [r3, #56]	; 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d40:	2201      	movs	r2, #1
 8001d42:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001d44:	430a      	orrs	r2, r1
 8001d46:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d48:	e7f2      	b.n	8001d30 <ADC_DMAConvCplt+0x48>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4e:	4798      	blx	r3
}
 8001d50:	e7f1      	b.n	8001d36 <ADC_DMAConvCplt+0x4e>
 8001d52:	46c0      	nop			; (mov r8, r8)
 8001d54:	fffffefe 	.word	0xfffffefe

08001d58 <HAL_ADC_ConvHalfCpltCallback>:
 8001d58:	4770      	bx	lr

08001d5a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001d5a:	b510      	push	{r4, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8001d5c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001d5e:	f7ff fffb 	bl	8001d58 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d62:	bd10      	pop	{r4, pc}

08001d64 <HAL_ADC_ErrorCallback>:
 8001d64:	4770      	bx	lr

08001d66 <ADC_DMAError>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001d66:	2340      	movs	r3, #64	; 0x40
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d68:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8001d6a:	b510      	push	{r4, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001d6c:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	6383      	str	r3, [r0, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001d72:	2304      	movs	r3, #4
 8001d74:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8001d76:	4313      	orrs	r3, r2
 8001d78:	63c3      	str	r3, [r0, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8001d7a:	f7ff fff3 	bl	8001d64 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d7e:	bd10      	pop	{r4, pc}

08001d80 <HAL_ADC_ConfigChannel>:
{
 8001d80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0U;
 8001d82:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8001d84:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0U;
 8001d86:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8001d88:	3434      	adds	r4, #52	; 0x34
 8001d8a:	7822      	ldrb	r2, [r4, #0]
{
 8001d8c:	0003      	movs	r3, r0
  __HAL_LOCK(hadc);
 8001d8e:	2002      	movs	r0, #2
 8001d90:	2a01      	cmp	r2, #1
 8001d92:	d02b      	beq.n	8001dec <HAL_ADC_ConfigChannel+0x6c>
 8001d94:	2201      	movs	r2, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001d96:	681d      	ldr	r5, [r3, #0]
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001d98:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001d9a:	68a8      	ldr	r0, [r5, #8]
  __HAL_LOCK(hadc);
 8001d9c:	7022      	strb	r2, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001d9e:	0740      	lsls	r0, r0, #29
 8001da0:	d45a      	bmi.n	8001e58 <HAL_ADC_ConfigChannel+0xd8>
 8001da2:	680b      	ldr	r3, [r1, #0]
    if (sConfig->Rank != ADC_RANK_NONE)
 8001da4:	482f      	ldr	r0, [pc, #188]	; (8001e64 <HAL_ADC_ConfigChannel+0xe4>)
 8001da6:	001f      	movs	r7, r3
 8001da8:	4684      	mov	ip, r0
 8001daa:	6848      	ldr	r0, [r1, #4]
 8001dac:	409a      	lsls	r2, r3
 8001dae:	3f10      	subs	r7, #16
 8001db0:	4560      	cmp	r0, ip
 8001db2:	d03b      	beq.n	8001e2c <HAL_ADC_ConfigChannel+0xac>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001db4:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8001db6:	4310      	orrs	r0, r2
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001db8:	2280      	movs	r2, #128	; 0x80
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001dba:	62a8      	str	r0, [r5, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001dbc:	0552      	lsls	r2, r2, #21
 8001dbe:	4296      	cmp	r6, r2
 8001dc0:	d00f      	beq.n	8001de2 <HAL_ADC_ConfigChannel+0x62>
 8001dc2:	3e01      	subs	r6, #1
 8001dc4:	2e06      	cmp	r6, #6
 8001dc6:	d90c      	bls.n	8001de2 <HAL_ADC_ConfigChannel+0x62>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001dc8:	688a      	ldr	r2, [r1, #8]
 8001dca:	2107      	movs	r1, #7
 8001dcc:	6968      	ldr	r0, [r5, #20]
 8001dce:	4008      	ands	r0, r1
 8001dd0:	4282      	cmp	r2, r0
 8001dd2:	d006      	beq.n	8001de2 <HAL_ADC_ConfigChannel+0x62>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001dd4:	6968      	ldr	r0, [r5, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001dd6:	400a      	ands	r2, r1
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001dd8:	4388      	bics	r0, r1
 8001dda:	6168      	str	r0, [r5, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001ddc:	6968      	ldr	r0, [r5, #20]
 8001dde:	4302      	orrs	r2, r0
 8001de0:	616a      	str	r2, [r5, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001de2:	2f02      	cmp	r7, #2
 8001de4:	d903      	bls.n	8001dee <HAL_ADC_ConfigChannel+0x6e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001de6:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8001de8:	2300      	movs	r3, #0
 8001dea:	7023      	strb	r3, [r4, #0]
}
 8001dec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001dee:	4a1e      	ldr	r2, [pc, #120]	; (8001e68 <HAL_ADC_ConfigChannel+0xe8>)
 8001df0:	2080      	movs	r0, #128	; 0x80
 8001df2:	6811      	ldr	r1, [r2, #0]
 8001df4:	2b10      	cmp	r3, #16
 8001df6:	d015      	beq.n	8001e24 <HAL_ADC_ConfigChannel+0xa4>
 8001df8:	2b11      	cmp	r3, #17
 8001dfa:	d115      	bne.n	8001e28 <HAL_ADC_ConfigChannel+0xa8>
 8001dfc:	03c0      	lsls	r0, r0, #15
 8001dfe:	4301      	orrs	r1, r0
 8001e00:	6011      	str	r1, [r2, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e02:	2b10      	cmp	r3, #16
 8001e04:	d1ef      	bne.n	8001de6 <HAL_ADC_ConfigChannel+0x66>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e06:	4b19      	ldr	r3, [pc, #100]	; (8001e6c <HAL_ADC_ConfigChannel+0xec>)
 8001e08:	4919      	ldr	r1, [pc, #100]	; (8001e70 <HAL_ADC_ConfigChannel+0xf0>)
 8001e0a:	6818      	ldr	r0, [r3, #0]
 8001e0c:	f7fe f990 	bl	8000130 <__udivsi3>
 8001e10:	230a      	movs	r3, #10
 8001e12:	4358      	muls	r0, r3
 8001e14:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0U)
 8001e16:	9b01      	ldr	r3, [sp, #4]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d0e4      	beq.n	8001de6 <HAL_ADC_ConfigChannel+0x66>
            wait_loop_index--;
 8001e1c:	9b01      	ldr	r3, [sp, #4]
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	9301      	str	r3, [sp, #4]
 8001e22:	e7f8      	b.n	8001e16 <HAL_ADC_ConfigChannel+0x96>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001e24:	0400      	lsls	r0, r0, #16
 8001e26:	e7ea      	b.n	8001dfe <HAL_ADC_ConfigChannel+0x7e>
 8001e28:	0440      	lsls	r0, r0, #17
 8001e2a:	e7e8      	b.n	8001dfe <HAL_ADC_ConfigChannel+0x7e>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001e2c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8001e2e:	4391      	bics	r1, r2
 8001e30:	62a9      	str	r1, [r5, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001e32:	2f02      	cmp	r7, #2
 8001e34:	d8d7      	bhi.n	8001de6 <HAL_ADC_ConfigChannel+0x66>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001e36:	4a0c      	ldr	r2, [pc, #48]	; (8001e68 <HAL_ADC_ConfigChannel+0xe8>)
 8001e38:	6811      	ldr	r1, [r2, #0]
 8001e3a:	2b10      	cmp	r3, #16
 8001e3c:	d00a      	beq.n	8001e54 <HAL_ADC_ConfigChannel+0xd4>
 8001e3e:	3b11      	subs	r3, #17
 8001e40:	1e58      	subs	r0, r3, #1
 8001e42:	4183      	sbcs	r3, r0
 8001e44:	480b      	ldr	r0, [pc, #44]	; (8001e74 <HAL_ADC_ConfigChannel+0xf4>)
 8001e46:	425b      	negs	r3, r3
 8001e48:	4003      	ands	r3, r0
 8001e4a:	480b      	ldr	r0, [pc, #44]	; (8001e78 <HAL_ADC_ConfigChannel+0xf8>)
 8001e4c:	181b      	adds	r3, r3, r0
 8001e4e:	400b      	ands	r3, r1
 8001e50:	6013      	str	r3, [r2, #0]
 8001e52:	e7c8      	b.n	8001de6 <HAL_ADC_ConfigChannel+0x66>
 8001e54:	4b09      	ldr	r3, [pc, #36]	; (8001e7c <HAL_ADC_ConfigChannel+0xfc>)
 8001e56:	e7fa      	b.n	8001e4e <HAL_ADC_ConfigChannel+0xce>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e58:	2120      	movs	r1, #32
 8001e5a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001e5c:	4301      	orrs	r1, r0
 8001e5e:	6399      	str	r1, [r3, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 8001e60:	0010      	movs	r0, r2
 8001e62:	e7c1      	b.n	8001de8 <HAL_ADC_ConfigChannel+0x68>
 8001e64:	00001001 	.word	0x00001001
 8001e68:	40012708 	.word	0x40012708
 8001e6c:	20000200 	.word	0x20000200
 8001e70:	000f4240 	.word	0x000f4240
 8001e74:	ff400000 	.word	0xff400000
 8001e78:	ffbfffff 	.word	0xffbfffff
 8001e7c:	ff7fffff 	.word	0xff7fffff

08001e80 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e80:	b530      	push	{r4, r5, lr}
 8001e82:	25ff      	movs	r5, #255	; 0xff
 8001e84:	2403      	movs	r4, #3
 8001e86:	002a      	movs	r2, r5
 8001e88:	b2c3      	uxtb	r3, r0
 8001e8a:	401c      	ands	r4, r3
 8001e8c:	00e4      	lsls	r4, r4, #3
 8001e8e:	40a2      	lsls	r2, r4
 8001e90:	0189      	lsls	r1, r1, #6
 8001e92:	4029      	ands	r1, r5
 8001e94:	43d2      	mvns	r2, r2
 8001e96:	40a1      	lsls	r1, r4
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8001e98:	2800      	cmp	r0, #0
 8001e9a:	db0a      	blt.n	8001eb2 <HAL_NVIC_SetPriority+0x32>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e9c:	24c0      	movs	r4, #192	; 0xc0
 8001e9e:	4b0b      	ldr	r3, [pc, #44]	; (8001ecc <HAL_NVIC_SetPriority+0x4c>)
 8001ea0:	0880      	lsrs	r0, r0, #2
 8001ea2:	0080      	lsls	r0, r0, #2
 8001ea4:	18c0      	adds	r0, r0, r3
 8001ea6:	00a4      	lsls	r4, r4, #2
 8001ea8:	5903      	ldr	r3, [r0, r4]
 8001eaa:	401a      	ands	r2, r3
 8001eac:	4311      	orrs	r1, r2
 8001eae:	5101      	str	r1, [r0, r4]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8001eb0:	bd30      	pop	{r4, r5, pc}
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001eb2:	200f      	movs	r0, #15
 8001eb4:	4003      	ands	r3, r0
 8001eb6:	3b08      	subs	r3, #8
 8001eb8:	4805      	ldr	r0, [pc, #20]	; (8001ed0 <HAL_NVIC_SetPriority+0x50>)
 8001eba:	089b      	lsrs	r3, r3, #2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	181b      	adds	r3, r3, r0
 8001ec0:	69d8      	ldr	r0, [r3, #28]
 8001ec2:	4002      	ands	r2, r0
 8001ec4:	4311      	orrs	r1, r2
 8001ec6:	61d9      	str	r1, [r3, #28]
 8001ec8:	e7f2      	b.n	8001eb0 <HAL_NVIC_SetPriority+0x30>
 8001eca:	46c0      	nop			; (mov r8, r8)
 8001ecc:	e000e100 	.word	0xe000e100
 8001ed0:	e000ed00 	.word	0xe000ed00

08001ed4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001ed4:	2800      	cmp	r0, #0
 8001ed6:	db05      	blt.n	8001ee4 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ed8:	231f      	movs	r3, #31
 8001eda:	4018      	ands	r0, r3
 8001edc:	3b1e      	subs	r3, #30
 8001ede:	4083      	lsls	r3, r0
 8001ee0:	4a01      	ldr	r2, [pc, #4]	; (8001ee8 <HAL_NVIC_EnableIRQ+0x14>)
 8001ee2:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001ee4:	4770      	bx	lr
 8001ee6:	46c0      	nop			; (mov r8, r8)
 8001ee8:	e000e100 	.word	0xe000e100

08001eec <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eec:	4a09      	ldr	r2, [pc, #36]	; (8001f14 <HAL_SYSTICK_Config+0x28>)
 8001eee:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ef0:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d80d      	bhi.n	8001f12 <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ef6:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ef8:	4a07      	ldr	r2, [pc, #28]	; (8001f18 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001efa:	4808      	ldr	r0, [pc, #32]	; (8001f1c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001efc:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001efe:	6a03      	ldr	r3, [r0, #32]
 8001f00:	0609      	lsls	r1, r1, #24
 8001f02:	021b      	lsls	r3, r3, #8
 8001f04:	0a1b      	lsrs	r3, r3, #8
 8001f06:	430b      	orrs	r3, r1
 8001f08:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f0a:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f0c:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f0e:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f10:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001f12:	4770      	bx	lr
 8001f14:	00ffffff 	.word	0x00ffffff
 8001f18:	e000e010 	.word	0xe000e010
 8001f1c:	e000ed00 	.word	0xe000ed00

08001f20 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001f20:	b570      	push	{r4, r5, r6, lr}
 8001f22:	0004      	movs	r4, r0
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
  {
    return HAL_ERROR;
 8001f24:	2501      	movs	r5, #1
  if(NULL == hdma)
 8001f26:	2800      	cmp	r0, #0
 8001f28:	d024      	beq.n	8001f74 <HAL_DMA_Init+0x54>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	1c86      	adds	r6, r0, #2

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001f2e:	6800      	ldr	r0, [r0, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f30:	77f3      	strb	r3, [r6, #31]
  tmp = hdma->Instance->CCR;
 8001f32:	6802      	ldr	r2, [r0, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001f34:	4b10      	ldr	r3, [pc, #64]	; (8001f78 <HAL_DMA_Init+0x58>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001f36:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001f38:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8001f3a:	6863      	ldr	r3, [r4, #4]
 8001f3c:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f3e:	68e1      	ldr	r1, [r4, #12]
 8001f40:	430b      	orrs	r3, r1
 8001f42:	6921      	ldr	r1, [r4, #16]
 8001f44:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f46:	6961      	ldr	r1, [r4, #20]
 8001f48:	430b      	orrs	r3, r1
 8001f4a:	69a1      	ldr	r1, [r4, #24]
 8001f4c:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f4e:	69e1      	ldr	r1, [r4, #28]
 8001f50:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 8001f52:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001f54:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001f56:	4b09      	ldr	r3, [pc, #36]	; (8001f7c <HAL_DMA_Init+0x5c>)
 8001f58:	2114      	movs	r1, #20
 8001f5a:	18c0      	adds	r0, r0, r3
 8001f5c:	f7fe f8e8 	bl	8000130 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8001f60:	4b07      	ldr	r3, [pc, #28]	; (8001f80 <HAL_DMA_Init+0x60>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001f62:	0080      	lsls	r0, r0, #2
  hdma->DmaBaseAddress = DMA1;
 8001f64:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f66:	2300      	movs	r3, #0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001f68:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f6a:	63a3      	str	r3, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8001f6c:	77f5      	strb	r5, [r6, #31]
  hdma->Lock = HAL_UNLOCKED;
 8001f6e:	1964      	adds	r4, r4, r5
  return HAL_OK;
 8001f70:	001d      	movs	r5, r3
  hdma->Lock = HAL_UNLOCKED;
 8001f72:	77e3      	strb	r3, [r4, #31]
}  
 8001f74:	0028      	movs	r0, r5
 8001f76:	bd70      	pop	{r4, r5, r6, pc}
 8001f78:	ffffc00f 	.word	0xffffc00f
 8001f7c:	bffdfff8 	.word	0xbffdfff8
 8001f80:	40020000 	.word	0x40020000

08001f84 <HAL_DMA_Start_IT>:
{
 8001f84:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8001f86:	1c44      	adds	r4, r0, #1
 8001f88:	7fe6      	ldrb	r6, [r4, #31]
{
 8001f8a:	0005      	movs	r5, r0
  __HAL_LOCK(hdma);
 8001f8c:	2002      	movs	r0, #2
 8001f8e:	2e01      	cmp	r6, #1
 8001f90:	d027      	beq.n	8001fe2 <HAL_DMA_Start_IT+0x5e>
 8001f92:	3801      	subs	r0, #1
 8001f94:	77e0      	strb	r0, [r4, #31]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f96:	1ca8      	adds	r0, r5, #2
 8001f98:	7fc6      	ldrb	r6, [r0, #31]
 8001f9a:	4684      	mov	ip, r0
 8001f9c:	b2f6      	uxtb	r6, r6
 8001f9e:	2002      	movs	r0, #2
 8001fa0:	2700      	movs	r7, #0
 8001fa2:	2e01      	cmp	r6, #1
 8001fa4:	d128      	bne.n	8001ff8 <HAL_DMA_Start_IT+0x74>
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001fa6:	4664      	mov	r4, ip
 8001fa8:	77e0      	strb	r0, [r4, #31]
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001faa:	682c      	ldr	r4, [r5, #0]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fac:	63af      	str	r7, [r5, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001fae:	6820      	ldr	r0, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001fb0:	6c2f      	ldr	r7, [r5, #64]	; 0x40
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001fb2:	43b0      	bics	r0, r6
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001fb4:	40be      	lsls	r6, r7
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001fb6:	6020      	str	r0, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001fb8:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8001fba:	6046      	str	r6, [r0, #4]
  hdma->Instance->CNDTR = DataLength;
 8001fbc:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001fbe:	686b      	ldr	r3, [r5, #4]
 8001fc0:	6828      	ldr	r0, [r5, #0]
 8001fc2:	2b10      	cmp	r3, #16
 8001fc4:	d10e      	bne.n	8001fe4 <HAL_DMA_Start_IT+0x60>
    hdma->Instance->CPAR = DstAddress;
 8001fc6:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001fc8:	60e1      	str	r1, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8001fca:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001fcc:	6822      	ldr	r2, [r4, #0]
    if(NULL != hdma->XferHalfCpltCallback )
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d00b      	beq.n	8001fea <HAL_DMA_Start_IT+0x66>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001fd2:	230e      	movs	r3, #14
 8001fd4:	4313      	orrs	r3, r2
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001fd6:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	6802      	ldr	r2, [r0, #0]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	6003      	str	r3, [r0, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001fe0:	2000      	movs	r0, #0
} 
 8001fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = SrcAddress;
 8001fe4:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 8001fe6:	60e2      	str	r2, [r4, #12]
 8001fe8:	e7ef      	b.n	8001fca <HAL_DMA_Start_IT+0x46>
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001fea:	230a      	movs	r3, #10
 8001fec:	4313      	orrs	r3, r2
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001fee:	2204      	movs	r2, #4
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001ff0:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001ff2:	6823      	ldr	r3, [r4, #0]
 8001ff4:	4393      	bics	r3, r2
 8001ff6:	e7ee      	b.n	8001fd6 <HAL_DMA_Start_IT+0x52>
    __HAL_UNLOCK(hdma); 
 8001ff8:	77e7      	strb	r7, [r4, #31]
 8001ffa:	e7f2      	b.n	8001fe2 <HAL_DMA_Start_IT+0x5e>

08001ffc <HAL_DMA_IRQHandler>:
{
 8001ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001ffe:	2704      	movs	r7, #4
 8002000:	003e      	movs	r6, r7
 8002002:	6c01      	ldr	r1, [r0, #64]	; 0x40
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002004:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002006:	408e      	lsls	r6, r1
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002008:	6815      	ldr	r5, [r2, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800200a:	6803      	ldr	r3, [r0, #0]
 800200c:	681c      	ldr	r4, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800200e:	4235      	tst	r5, r6
 8002010:	d00d      	beq.n	800202e <HAL_DMA_IRQHandler+0x32>
 8002012:	423c      	tst	r4, r7
 8002014:	d00b      	beq.n	800202e <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002016:	6819      	ldr	r1, [r3, #0]
 8002018:	0689      	lsls	r1, r1, #26
 800201a:	d402      	bmi.n	8002022 <HAL_DMA_IRQHandler+0x26>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800201c:	6819      	ldr	r1, [r3, #0]
 800201e:	43b9      	bics	r1, r7
 8002020:	6019      	str	r1, [r3, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 8002022:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002024:	6056      	str	r6, [r2, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 8002026:	2b00      	cmp	r3, #0
 8002028:	d019      	beq.n	800205e <HAL_DMA_IRQHandler+0x62>
    	hdma->XferErrorCallback(hdma);
 800202a:	4798      	blx	r3
}  
 800202c:	e017      	b.n	800205e <HAL_DMA_IRQHandler+0x62>
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800202e:	2702      	movs	r7, #2
 8002030:	003e      	movs	r6, r7
 8002032:	408e      	lsls	r6, r1
 8002034:	4235      	tst	r5, r6
 8002036:	d013      	beq.n	8002060 <HAL_DMA_IRQHandler+0x64>
 8002038:	423c      	tst	r4, r7
 800203a:	d011      	beq.n	8002060 <HAL_DMA_IRQHandler+0x64>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800203c:	6819      	ldr	r1, [r3, #0]
 800203e:	0689      	lsls	r1, r1, #26
 8002040:	d406      	bmi.n	8002050 <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002042:	240a      	movs	r4, #10
 8002044:	6819      	ldr	r1, [r3, #0]
 8002046:	43a1      	bics	r1, r4
 8002048:	6019      	str	r1, [r3, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 800204a:	2101      	movs	r1, #1
 800204c:	19c3      	adds	r3, r0, r7
 800204e:	77d9      	strb	r1, [r3, #31]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002050:	6056      	str	r6, [r2, #4]
  	__HAL_UNLOCK(hdma);
 8002052:	2200      	movs	r2, #0
 8002054:	1c43      	adds	r3, r0, #1
 8002056:	77da      	strb	r2, [r3, #31]
  	if(hdma->XferCpltCallback != NULL)
 8002058:	6a83      	ldr	r3, [r0, #40]	; 0x28
    if(hdma->XferErrorCallback != NULL)
 800205a:	4293      	cmp	r3, r2
 800205c:	d1e5      	bne.n	800202a <HAL_DMA_IRQHandler+0x2e>
}  
 800205e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002060:	2608      	movs	r6, #8
 8002062:	0037      	movs	r7, r6
 8002064:	408f      	lsls	r7, r1
 8002066:	423d      	tst	r5, r7
 8002068:	d0f9      	beq.n	800205e <HAL_DMA_IRQHandler+0x62>
 800206a:	4234      	tst	r4, r6
 800206c:	d0f7      	beq.n	800205e <HAL_DMA_IRQHandler+0x62>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800206e:	250e      	movs	r5, #14
 8002070:	681c      	ldr	r4, [r3, #0]
 8002072:	43ac      	bics	r4, r5
 8002074:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002076:	2301      	movs	r3, #1
 8002078:	001c      	movs	r4, r3
 800207a:	408c      	lsls	r4, r1
 800207c:	6054      	str	r4, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;    
 800207e:	1c82      	adds	r2, r0, #2
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002080:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8002082:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma); 
 8002084:	2200      	movs	r2, #0
 8002086:	18c3      	adds	r3, r0, r3
 8002088:	77da      	strb	r2, [r3, #31]
    if(hdma->XferErrorCallback != NULL)
 800208a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800208c:	e7e5      	b.n	800205a <HAL_DMA_IRQHandler+0x5e>
	...

08002090 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8002090:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002092:	680b      	ldr	r3, [r1, #0]
{ 
 8002094:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002096:	9303      	str	r3, [sp, #12]
  uint32_t position = 0x00u;
 8002098:	2300      	movs	r3, #0
{ 
 800209a:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800209c:	9a03      	ldr	r2, [sp, #12]
 800209e:	40da      	lsrs	r2, r3
 80020a0:	d101      	bne.n	80020a6 <HAL_GPIO_Init+0x16>
      }
    }

    position++;
  } 
}
 80020a2:	b007      	add	sp, #28
 80020a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020a6:	2201      	movs	r2, #1
 80020a8:	409a      	lsls	r2, r3
 80020aa:	9202      	str	r2, [sp, #8]
 80020ac:	9902      	ldr	r1, [sp, #8]
 80020ae:	9a03      	ldr	r2, [sp, #12]
 80020b0:	400a      	ands	r2, r1
 80020b2:	9200      	str	r2, [sp, #0]
    if (iocurrent != 0x00u)
 80020b4:	d100      	bne.n	80020b8 <HAL_GPIO_Init+0x28>
 80020b6:	e088      	b.n	80021ca <HAL_GPIO_Init+0x13a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020b8:	9a01      	ldr	r2, [sp, #4]
 80020ba:	2110      	movs	r1, #16
 80020bc:	6852      	ldr	r2, [r2, #4]
 80020be:	0016      	movs	r6, r2
 80020c0:	438e      	bics	r6, r1
 80020c2:	2e02      	cmp	r6, #2
 80020c4:	d10e      	bne.n	80020e4 <HAL_GPIO_Init+0x54>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020c6:	2507      	movs	r5, #7
 80020c8:	401d      	ands	r5, r3
 80020ca:	00ad      	lsls	r5, r5, #2
 80020cc:	3901      	subs	r1, #1
 80020ce:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3u];
 80020d0:	08dc      	lsrs	r4, r3, #3
 80020d2:	00a4      	lsls	r4, r4, #2
 80020d4:	1904      	adds	r4, r0, r4
 80020d6:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020d8:	438f      	bics	r7, r1
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020da:	9901      	ldr	r1, [sp, #4]
 80020dc:	6909      	ldr	r1, [r1, #16]
 80020de:	40a9      	lsls	r1, r5
 80020e0:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3u] = temp;
 80020e2:	6227      	str	r7, [r4, #32]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80020e4:	2403      	movs	r4, #3
 80020e6:	005f      	lsls	r7, r3, #1
 80020e8:	40bc      	lsls	r4, r7
 80020ea:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 80020ec:	6805      	ldr	r5, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020ee:	3e01      	subs	r6, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80020f0:	4025      	ands	r5, r4
 80020f2:	46ac      	mov	ip, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020f4:	2503      	movs	r5, #3
 80020f6:	4015      	ands	r5, r2
 80020f8:	40bd      	lsls	r5, r7
 80020fa:	4661      	mov	r1, ip
 80020fc:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 80020fe:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002100:	2e01      	cmp	r6, #1
 8002102:	d80f      	bhi.n	8002124 <HAL_GPIO_Init+0x94>
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002104:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR;
 8002106:	6886      	ldr	r6, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002108:	68cd      	ldr	r5, [r1, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800210a:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 800210c:	40bd      	lsls	r5, r7
 800210e:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8002110:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8002112:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002114:	9902      	ldr	r1, [sp, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002116:	0915      	lsrs	r5, r2, #4
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002118:	438e      	bics	r6, r1
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800211a:	2101      	movs	r1, #1
 800211c:	400d      	ands	r5, r1
 800211e:	409d      	lsls	r5, r3
 8002120:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8002122:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 8002124:	68c5      	ldr	r5, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002126:	9901      	ldr	r1, [sp, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002128:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800212a:	688d      	ldr	r5, [r1, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800212c:	2180      	movs	r1, #128	; 0x80
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800212e:	40bd      	lsls	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002130:	0549      	lsls	r1, r1, #21
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002132:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8002134:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002136:	420a      	tst	r2, r1
 8002138:	d047      	beq.n	80021ca <HAL_GPIO_Init+0x13a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800213a:	2101      	movs	r1, #1
 800213c:	4c24      	ldr	r4, [pc, #144]	; (80021d0 <HAL_GPIO_Init+0x140>)
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800213e:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002140:	69a5      	ldr	r5, [r4, #24]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002142:	401e      	ands	r6, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002144:	430d      	orrs	r5, r1
 8002146:	61a5      	str	r5, [r4, #24]
 8002148:	69a4      	ldr	r4, [r4, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 800214a:	089d      	lsrs	r5, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800214c:	400c      	ands	r4, r1
 800214e:	9405      	str	r4, [sp, #20]
 8002150:	9c05      	ldr	r4, [sp, #20]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002152:	240f      	movs	r4, #15
 8002154:	491f      	ldr	r1, [pc, #124]	; (80021d4 <HAL_GPIO_Init+0x144>)
 8002156:	00ad      	lsls	r5, r5, #2
 8002158:	00b6      	lsls	r6, r6, #2
 800215a:	186d      	adds	r5, r5, r1
 800215c:	40b4      	lsls	r4, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800215e:	2190      	movs	r1, #144	; 0x90
        temp = SYSCFG->EXTICR[position >> 2u];
 8002160:	68af      	ldr	r7, [r5, #8]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002162:	05c9      	lsls	r1, r1, #23
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002164:	43a7      	bics	r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002166:	2400      	movs	r4, #0
 8002168:	4288      	cmp	r0, r1
 800216a:	d008      	beq.n	800217e <HAL_GPIO_Init+0xee>
 800216c:	491a      	ldr	r1, [pc, #104]	; (80021d8 <HAL_GPIO_Init+0x148>)
 800216e:	3401      	adds	r4, #1
 8002170:	4288      	cmp	r0, r1
 8002172:	d004      	beq.n	800217e <HAL_GPIO_Init+0xee>
 8002174:	4919      	ldr	r1, [pc, #100]	; (80021dc <HAL_GPIO_Init+0x14c>)
 8002176:	3404      	adds	r4, #4
 8002178:	4288      	cmp	r0, r1
 800217a:	d100      	bne.n	800217e <HAL_GPIO_Init+0xee>
 800217c:	3c03      	subs	r4, #3
 800217e:	40b4      	lsls	r4, r6
        temp &= ~(iocurrent);
 8002180:	9900      	ldr	r1, [sp, #0]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002182:	433c      	orrs	r4, r7
          temp |= iocurrent;
 8002184:	000e      	movs	r6, r1
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002186:	60ac      	str	r4, [r5, #8]
        temp = EXTI->IMR;
 8002188:	4c15      	ldr	r4, [pc, #84]	; (80021e0 <HAL_GPIO_Init+0x150>)
        temp &= ~(iocurrent);
 800218a:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 800218c:	6827      	ldr	r7, [r4, #0]
          temp |= iocurrent;
 800218e:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002190:	03d1      	lsls	r1, r2, #15
 8002192:	d401      	bmi.n	8002198 <HAL_GPIO_Init+0x108>
        temp &= ~(iocurrent);
 8002194:	003e      	movs	r6, r7
 8002196:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 8002198:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 800219a:	6867      	ldr	r7, [r4, #4]
          temp |= iocurrent;
 800219c:	9e00      	ldr	r6, [sp, #0]
 800219e:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021a0:	0391      	lsls	r1, r2, #14
 80021a2:	d401      	bmi.n	80021a8 <HAL_GPIO_Init+0x118>
        temp &= ~(iocurrent);
 80021a4:	003e      	movs	r6, r7
 80021a6:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 80021a8:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 80021aa:	68a7      	ldr	r7, [r4, #8]
          temp |= iocurrent;
 80021ac:	9e00      	ldr	r6, [sp, #0]
 80021ae:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021b0:	02d1      	lsls	r1, r2, #11
 80021b2:	d401      	bmi.n	80021b8 <HAL_GPIO_Init+0x128>
        temp &= ~(iocurrent);
 80021b4:	003e      	movs	r6, r7
 80021b6:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 80021b8:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 80021ba:	68e6      	ldr	r6, [r4, #12]
          temp |= iocurrent;
 80021bc:	9f00      	ldr	r7, [sp, #0]
 80021be:	4337      	orrs	r7, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021c0:	0292      	lsls	r2, r2, #10
 80021c2:	d401      	bmi.n	80021c8 <HAL_GPIO_Init+0x138>
        temp &= ~(iocurrent);
 80021c4:	402e      	ands	r6, r5
 80021c6:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 80021c8:	60e7      	str	r7, [r4, #12]
    position++;
 80021ca:	3301      	adds	r3, #1
 80021cc:	e766      	b.n	800209c <HAL_GPIO_Init+0xc>
 80021ce:	46c0      	nop			; (mov r8, r8)
 80021d0:	40021000 	.word	0x40021000
 80021d4:	40010000 	.word	0x40010000
 80021d8:	48000400 	.word	0x48000400
 80021dc:	48000800 	.word	0x48000800
 80021e0:	40010400 	.word	0x40010400

080021e4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021e4:	2a00      	cmp	r2, #0
 80021e6:	d001      	beq.n	80021ec <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021e8:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021ea:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021ec:	6281      	str	r1, [r0, #40]	; 0x28
}
 80021ee:	e7fc      	b.n	80021ea <HAL_GPIO_WritePin+0x6>

080021f0 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 80021f0:	6943      	ldr	r3, [r0, #20]
 80021f2:	4219      	tst	r1, r3
 80021f4:	d000      	beq.n	80021f8 <HAL_GPIO_TogglePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80021f6:	0409      	lsls	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021f8:	6181      	str	r1, [r0, #24]
  }
}
 80021fa:	4770      	bx	lr

080021fc <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80021fc:	6803      	ldr	r3, [r0, #0]
 80021fe:	699a      	ldr	r2, [r3, #24]
 8002200:	0792      	lsls	r2, r2, #30
 8002202:	d501      	bpl.n	8002208 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002204:	2200      	movs	r2, #0
 8002206:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002208:	2201      	movs	r2, #1
 800220a:	6999      	ldr	r1, [r3, #24]
 800220c:	4211      	tst	r1, r2
 800220e:	d102      	bne.n	8002216 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002210:	6999      	ldr	r1, [r3, #24]
 8002212:	430a      	orrs	r2, r1
 8002214:	619a      	str	r2, [r3, #24]
  }
}
 8002216:	4770      	bx	lr

08002218 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002218:	b530      	push	{r4, r5, lr}
 800221a:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800221c:	0412      	lsls	r2, r2, #16
 800221e:	6800      	ldr	r0, [r0, #0]
 8002220:	4322      	orrs	r2, r4
 8002222:	4313      	orrs	r3, r2
 8002224:	4a05      	ldr	r2, [pc, #20]	; (800223c <I2C_TransferConfig+0x24>)
 8002226:	6845      	ldr	r5, [r0, #4]
 8002228:	0589      	lsls	r1, r1, #22
 800222a:	0d64      	lsrs	r4, r4, #21
 800222c:	0d89      	lsrs	r1, r1, #22
 800222e:	4314      	orrs	r4, r2
 8002230:	43a5      	bics	r5, r4
 8002232:	430b      	orrs	r3, r1
 8002234:	432b      	orrs	r3, r5
 8002236:	6043      	str	r3, [r0, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002238:	bd30      	pop	{r4, r5, pc}
 800223a:	46c0      	nop			; (mov r8, r8)
 800223c:	03ff63ff 	.word	0x03ff63ff

08002240 <I2C_IsAcknowledgeFailed>:
{
 8002240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002242:	6803      	ldr	r3, [r0, #0]
{
 8002244:	0004      	movs	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002246:	6998      	ldr	r0, [r3, #24]
 8002248:	2310      	movs	r3, #16
{
 800224a:	000e      	movs	r6, r1
 800224c:	0017      	movs	r7, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800224e:	4018      	ands	r0, r3
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002250:	2520      	movs	r5, #32
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002252:	2800      	cmp	r0, #0
 8002254:	d118      	bne.n	8002288 <I2C_IsAcknowledgeFailed+0x48>
}
 8002256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (Timeout != HAL_MAX_DELAY)
 8002258:	1c72      	adds	r2, r6, #1
 800225a:	d016      	beq.n	800228a <I2C_IsAcknowledgeFailed+0x4a>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800225c:	f7ff fc02 	bl	8001a64 <HAL_GetTick>
 8002260:	1bc0      	subs	r0, r0, r7
 8002262:	42b0      	cmp	r0, r6
 8002264:	d801      	bhi.n	800226a <I2C_IsAcknowledgeFailed+0x2a>
 8002266:	2e00      	cmp	r6, #0
 8002268:	d10e      	bne.n	8002288 <I2C_IsAcknowledgeFailed+0x48>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800226a:	2220      	movs	r2, #32
 800226c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800226e:	4313      	orrs	r3, r2
 8002270:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002272:	0023      	movs	r3, r4
 8002274:	3341      	adds	r3, #65	; 0x41
 8002276:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002278:	0022      	movs	r2, r4
 800227a:	2300      	movs	r3, #0
 800227c:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 800227e:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002280:	7013      	strb	r3, [r2, #0]
    return HAL_ERROR;
 8002282:	2001      	movs	r0, #1
    __HAL_UNLOCK(hi2c);
 8002284:	7023      	strb	r3, [r4, #0]
    return HAL_ERROR;
 8002286:	e7e6      	b.n	8002256 <I2C_IsAcknowledgeFailed+0x16>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002288:	6823      	ldr	r3, [r4, #0]
 800228a:	699a      	ldr	r2, [r3, #24]
 800228c:	422a      	tst	r2, r5
 800228e:	d0e3      	beq.n	8002258 <I2C_IsAcknowledgeFailed+0x18>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002290:	2210      	movs	r2, #16
    I2C_Flush_TXDR(hi2c);
 8002292:	0020      	movs	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002294:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002296:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8002298:	f7ff ffb0 	bl	80021fc <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800229c:	6822      	ldr	r2, [r4, #0]
 800229e:	4906      	ldr	r1, [pc, #24]	; (80022b8 <I2C_IsAcknowledgeFailed+0x78>)
 80022a0:	6853      	ldr	r3, [r2, #4]
 80022a2:	400b      	ands	r3, r1
 80022a4:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80022a6:	2304      	movs	r3, #4
 80022a8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80022aa:	4313      	orrs	r3, r2
 80022ac:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80022ae:	0023      	movs	r3, r4
 80022b0:	3341      	adds	r3, #65	; 0x41
 80022b2:	701d      	strb	r5, [r3, #0]
 80022b4:	e7e0      	b.n	8002278 <I2C_IsAcknowledgeFailed+0x38>
 80022b6:	46c0      	nop			; (mov r8, r8)
 80022b8:	fe00e800 	.word	0xfe00e800

080022bc <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80022bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022be:	0004      	movs	r4, r0
 80022c0:	000d      	movs	r5, r1
 80022c2:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022c4:	2720      	movs	r7, #32
 80022c6:	6823      	ldr	r3, [r4, #0]
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	423b      	tst	r3, r7
 80022cc:	d001      	beq.n	80022d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 80022ce:	2000      	movs	r0, #0
}
 80022d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80022d2:	0032      	movs	r2, r6
 80022d4:	0029      	movs	r1, r5
 80022d6:	0020      	movs	r0, r4
 80022d8:	f7ff ffb2 	bl	8002240 <I2C_IsAcknowledgeFailed>
 80022dc:	2800      	cmp	r0, #0
 80022de:	d113      	bne.n	8002308 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022e0:	f7ff fbc0 	bl	8001a64 <HAL_GetTick>
 80022e4:	1b80      	subs	r0, r0, r6
 80022e6:	42a8      	cmp	r0, r5
 80022e8:	d801      	bhi.n	80022ee <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 80022ea:	2d00      	cmp	r5, #0
 80022ec:	d1eb      	bne.n	80022c6 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022ee:	2220      	movs	r2, #32
 80022f0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80022f2:	4313      	orrs	r3, r2
 80022f4:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80022f6:	0023      	movs	r3, r4
 80022f8:	3341      	adds	r3, #65	; 0x41
 80022fa:	701a      	strb	r2, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80022fc:	0022      	movs	r2, r4
 80022fe:	2300      	movs	r3, #0
 8002300:	3242      	adds	r2, #66	; 0x42
          __HAL_UNLOCK(hi2c);
 8002302:	3440      	adds	r4, #64	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002304:	7013      	strb	r3, [r2, #0]
          __HAL_UNLOCK(hi2c);
 8002306:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8002308:	2001      	movs	r0, #1
 800230a:	e7e1      	b.n	80022d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>

0800230c <I2C_WaitOnFlagUntilTimeout>:
{
 800230c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800230e:	0004      	movs	r4, r0
 8002310:	000e      	movs	r6, r1
 8002312:	0017      	movs	r7, r2
 8002314:	001d      	movs	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002316:	6822      	ldr	r2, [r4, #0]
 8002318:	6993      	ldr	r3, [r2, #24]
 800231a:	4033      	ands	r3, r6
 800231c:	1b9b      	subs	r3, r3, r6
 800231e:	4259      	negs	r1, r3
 8002320:	414b      	adcs	r3, r1
 8002322:	42bb      	cmp	r3, r7
 8002324:	d001      	beq.n	800232a <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8002326:	2000      	movs	r0, #0
 8002328:	e017      	b.n	800235a <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 800232a:	1c6b      	adds	r3, r5, #1
 800232c:	d0f4      	beq.n	8002318 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800232e:	f7ff fb99 	bl	8001a64 <HAL_GetTick>
 8002332:	9b06      	ldr	r3, [sp, #24]
 8002334:	1ac0      	subs	r0, r0, r3
 8002336:	42a8      	cmp	r0, r5
 8002338:	d801      	bhi.n	800233e <I2C_WaitOnFlagUntilTimeout+0x32>
 800233a:	2d00      	cmp	r5, #0
 800233c:	d1eb      	bne.n	8002316 <I2C_WaitOnFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800233e:	2220      	movs	r2, #32
 8002340:	6c63      	ldr	r3, [r4, #68]	; 0x44
          __HAL_UNLOCK(hi2c);
 8002342:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002344:	4313      	orrs	r3, r2
 8002346:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002348:	0023      	movs	r3, r4
 800234a:	3341      	adds	r3, #65	; 0x41
 800234c:	701a      	strb	r2, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800234e:	0022      	movs	r2, r4
 8002350:	2300      	movs	r3, #0
 8002352:	3242      	adds	r2, #66	; 0x42
          __HAL_UNLOCK(hi2c);
 8002354:	3440      	adds	r4, #64	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002356:	7013      	strb	r3, [r2, #0]
          __HAL_UNLOCK(hi2c);
 8002358:	7023      	strb	r3, [r4, #0]
}
 800235a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800235c <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800235c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800235e:	0004      	movs	r4, r0
 8002360:	000d      	movs	r5, r1
 8002362:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002364:	2702      	movs	r7, #2
 8002366:	6823      	ldr	r3, [r4, #0]
 8002368:	699b      	ldr	r3, [r3, #24]
 800236a:	423b      	tst	r3, r7
 800236c:	d001      	beq.n	8002372 <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 800236e:	2000      	movs	r0, #0
}
 8002370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002372:	0032      	movs	r2, r6
 8002374:	0029      	movs	r1, r5
 8002376:	0020      	movs	r0, r4
 8002378:	f7ff ff62 	bl	8002240 <I2C_IsAcknowledgeFailed>
 800237c:	2800      	cmp	r0, #0
 800237e:	d115      	bne.n	80023ac <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8002380:	1c6b      	adds	r3, r5, #1
 8002382:	d0f0      	beq.n	8002366 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002384:	f7ff fb6e 	bl	8001a64 <HAL_GetTick>
 8002388:	1b80      	subs	r0, r0, r6
 800238a:	42a8      	cmp	r0, r5
 800238c:	d801      	bhi.n	8002392 <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 800238e:	2d00      	cmp	r5, #0
 8002390:	d1e9      	bne.n	8002366 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002392:	2220      	movs	r2, #32
 8002394:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002396:	4313      	orrs	r3, r2
 8002398:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800239a:	0023      	movs	r3, r4
 800239c:	3341      	adds	r3, #65	; 0x41
 800239e:	701a      	strb	r2, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80023a0:	0022      	movs	r2, r4
 80023a2:	2300      	movs	r3, #0
 80023a4:	3242      	adds	r2, #66	; 0x42
          __HAL_UNLOCK(hi2c);
 80023a6:	3440      	adds	r4, #64	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80023a8:	7013      	strb	r3, [r2, #0]
          __HAL_UNLOCK(hi2c);
 80023aa:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 80023ac:	2001      	movs	r0, #1
 80023ae:	e7df      	b.n	8002370 <I2C_WaitOnTXISFlagUntilTimeout+0x14>

080023b0 <I2C_RequestMemoryWrite>:
{
 80023b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80023b2:	0014      	movs	r4, r2
 80023b4:	001e      	movs	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80023b6:	b2da      	uxtb	r2, r3
 80023b8:	4b15      	ldr	r3, [pc, #84]	; (8002410 <I2C_RequestMemoryWrite+0x60>)
{
 80023ba:	0005      	movs	r5, r0
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80023bc:	9300      	str	r3, [sp, #0]
 80023be:	2380      	movs	r3, #128	; 0x80
 80023c0:	045b      	lsls	r3, r3, #17
 80023c2:	f7ff ff29 	bl	8002218 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023c6:	9a07      	ldr	r2, [sp, #28]
 80023c8:	9906      	ldr	r1, [sp, #24]
 80023ca:	0028      	movs	r0, r5
 80023cc:	f7ff ffc6 	bl	800235c <I2C_WaitOnTXISFlagUntilTimeout>
 80023d0:	2800      	cmp	r0, #0
 80023d2:	d001      	beq.n	80023d8 <I2C_RequestMemoryWrite+0x28>
    return HAL_ERROR;
 80023d4:	2001      	movs	r0, #1
}
 80023d6:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 80023d8:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80023da:	2e01      	cmp	r6, #1
 80023dc:	d10d      	bne.n	80023fa <I2C_RequestMemoryWrite+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80023de:	b2e4      	uxtb	r4, r4
 80023e0:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80023e2:	9b07      	ldr	r3, [sp, #28]
 80023e4:	2200      	movs	r2, #0
 80023e6:	9300      	str	r3, [sp, #0]
 80023e8:	2180      	movs	r1, #128	; 0x80
 80023ea:	9b06      	ldr	r3, [sp, #24]
 80023ec:	0028      	movs	r0, r5
 80023ee:	f7ff ff8d 	bl	800230c <I2C_WaitOnFlagUntilTimeout>
 80023f2:	1e43      	subs	r3, r0, #1
 80023f4:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 80023f6:	b2c0      	uxtb	r0, r0
 80023f8:	e7ed      	b.n	80023d6 <I2C_RequestMemoryWrite+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80023fa:	0a22      	lsrs	r2, r4, #8
 80023fc:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023fe:	9906      	ldr	r1, [sp, #24]
 8002400:	9a07      	ldr	r2, [sp, #28]
 8002402:	0028      	movs	r0, r5
 8002404:	f7ff ffaa 	bl	800235c <I2C_WaitOnTXISFlagUntilTimeout>
 8002408:	2800      	cmp	r0, #0
 800240a:	d1e3      	bne.n	80023d4 <I2C_RequestMemoryWrite+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800240c:	682b      	ldr	r3, [r5, #0]
 800240e:	e7e6      	b.n	80023de <I2C_RequestMemoryWrite+0x2e>
 8002410:	80002000 	.word	0x80002000

08002414 <HAL_I2C_Init>:
{
 8002414:	b570      	push	{r4, r5, r6, lr}
 8002416:	0004      	movs	r4, r0
    return HAL_ERROR;
 8002418:	2001      	movs	r0, #1
  if (hi2c == NULL)
 800241a:	2c00      	cmp	r4, #0
 800241c:	d03f      	beq.n	800249e <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800241e:	0025      	movs	r5, r4
 8002420:	3541      	adds	r5, #65	; 0x41
 8002422:	782b      	ldrb	r3, [r5, #0]
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b00      	cmp	r3, #0
 8002428:	d105      	bne.n	8002436 <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 800242a:	0022      	movs	r2, r4
 800242c:	3240      	adds	r2, #64	; 0x40
 800242e:	7013      	strb	r3, [r2, #0]
    HAL_I2C_MspInit(hi2c);
 8002430:	0020      	movs	r0, r4
 8002432:	f7ff f85d 	bl	80014f0 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002436:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8002438:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 800243a:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 800243c:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800243e:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	68a6      	ldr	r6, [r4, #8]
 8002444:	438a      	bics	r2, r1
 8002446:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002448:	6861      	ldr	r1, [r4, #4]
 800244a:	4a1a      	ldr	r2, [pc, #104]	; (80024b4 <HAL_I2C_Init+0xa0>)
 800244c:	400a      	ands	r2, r1
 800244e:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002450:	6899      	ldr	r1, [r3, #8]
 8002452:	4a19      	ldr	r2, [pc, #100]	; (80024b8 <HAL_I2C_Init+0xa4>)
 8002454:	4011      	ands	r1, r2
 8002456:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002458:	2801      	cmp	r0, #1
 800245a:	d121      	bne.n	80024a0 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800245c:	2180      	movs	r1, #128	; 0x80
 800245e:	0209      	lsls	r1, r1, #8
 8002460:	4331      	orrs	r1, r6
 8002462:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002464:	6858      	ldr	r0, [r3, #4]
 8002466:	4915      	ldr	r1, [pc, #84]	; (80024bc <HAL_I2C_Init+0xa8>)
 8002468:	4301      	orrs	r1, r0
 800246a:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800246c:	68d9      	ldr	r1, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800246e:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002470:	400a      	ands	r2, r1
 8002472:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002474:	6961      	ldr	r1, [r4, #20]
 8002476:	6922      	ldr	r2, [r4, #16]
 8002478:	430a      	orrs	r2, r1
 800247a:	69a1      	ldr	r1, [r4, #24]
 800247c:	0209      	lsls	r1, r1, #8
 800247e:	430a      	orrs	r2, r1
 8002480:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002482:	6a21      	ldr	r1, [r4, #32]
 8002484:	69e2      	ldr	r2, [r4, #28]
 8002486:	430a      	orrs	r2, r1
 8002488:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800248a:	2201      	movs	r2, #1
 800248c:	6819      	ldr	r1, [r3, #0]
 800248e:	430a      	orrs	r2, r1
 8002490:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8002492:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002494:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002496:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002498:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800249a:	3442      	adds	r4, #66	; 0x42
 800249c:	7020      	strb	r0, [r4, #0]
}
 800249e:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80024a0:	2184      	movs	r1, #132	; 0x84
 80024a2:	0209      	lsls	r1, r1, #8
 80024a4:	4331      	orrs	r1, r6
 80024a6:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80024a8:	2802      	cmp	r0, #2
 80024aa:	d1db      	bne.n	8002464 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80024ac:	2180      	movs	r1, #128	; 0x80
 80024ae:	0109      	lsls	r1, r1, #4
 80024b0:	6059      	str	r1, [r3, #4]
 80024b2:	e7d7      	b.n	8002464 <HAL_I2C_Init+0x50>
 80024b4:	f0ffffff 	.word	0xf0ffffff
 80024b8:	ffff7fff 	.word	0xffff7fff
 80024bc:	02008000 	.word	0x02008000

080024c0 <HAL_I2C_Mem_Write>:
{
 80024c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80024c2:	0007      	movs	r7, r0
{
 80024c4:	b089      	sub	sp, #36	; 0x24
 80024c6:	9307      	str	r3, [sp, #28]
 80024c8:	ab0e      	add	r3, sp, #56	; 0x38
 80024ca:	9206      	str	r2, [sp, #24]
 80024cc:	cb04      	ldmia	r3!, {r2}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80024ce:	3741      	adds	r7, #65	; 0x41
{
 80024d0:	881b      	ldrh	r3, [r3, #0]
 80024d2:	9204      	str	r2, [sp, #16]
 80024d4:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80024d6:	783b      	ldrb	r3, [r7, #0]
{
 80024d8:	0004      	movs	r4, r0
 80024da:	000d      	movs	r5, r1
    return HAL_BUSY;
 80024dc:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80024de:	2b20      	cmp	r3, #32
 80024e0:	d108      	bne.n	80024f4 <HAL_I2C_Mem_Write+0x34>
    if ((pData == NULL) || (Size == 0U))
 80024e2:	2a00      	cmp	r2, #0
 80024e4:	d002      	beq.n	80024ec <HAL_I2C_Mem_Write+0x2c>
 80024e6:	9b05      	ldr	r3, [sp, #20]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d105      	bne.n	80024f8 <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80024ec:	2380      	movs	r3, #128	; 0x80
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 80024f2:	2001      	movs	r0, #1
}
 80024f4:	b009      	add	sp, #36	; 0x24
 80024f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 80024f8:	0023      	movs	r3, r4
 80024fa:	3340      	adds	r3, #64	; 0x40
 80024fc:	9303      	str	r3, [sp, #12]
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d0f7      	beq.n	80024f4 <HAL_I2C_Mem_Write+0x34>
 8002504:	2201      	movs	r2, #1
 8002506:	9b03      	ldr	r3, [sp, #12]
 8002508:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800250a:	f7ff faab 	bl	8001a64 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800250e:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 8002510:	9002      	str	r0, [sp, #8]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002512:	9000      	str	r0, [sp, #0]
 8002514:	2319      	movs	r3, #25
 8002516:	2201      	movs	r2, #1
 8002518:	0209      	lsls	r1, r1, #8
 800251a:	0020      	movs	r0, r4
 800251c:	f7ff fef6 	bl	800230c <I2C_WaitOnFlagUntilTimeout>
 8002520:	1e06      	subs	r6, r0, #0
 8002522:	d1e6      	bne.n	80024f2 <HAL_I2C_Mem_Write+0x32>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002524:	2321      	movs	r3, #33	; 0x21
 8002526:	703b      	strb	r3, [r7, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002528:	0027      	movs	r7, r4
 800252a:	331f      	adds	r3, #31
 800252c:	3742      	adds	r7, #66	; 0x42
 800252e:	703b      	strb	r3, [r7, #0]
    hi2c->pBuffPtr  = pData;
 8002530:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002532:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8002534:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8002536:	9b05      	ldr	r3, [sp, #20]
    hi2c->XferISR   = NULL;
 8002538:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 800253a:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800253c:	9b02      	ldr	r3, [sp, #8]
 800253e:	9a06      	ldr	r2, [sp, #24]
 8002540:	9301      	str	r3, [sp, #4]
 8002542:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002544:	0029      	movs	r1, r5
 8002546:	9300      	str	r3, [sp, #0]
 8002548:	0020      	movs	r0, r4
 800254a:	9b07      	ldr	r3, [sp, #28]
 800254c:	f7ff ff30 	bl	80023b0 <I2C_RequestMemoryWrite>
 8002550:	2800      	cmp	r0, #0
 8002552:	d002      	beq.n	800255a <HAL_I2C_Mem_Write+0x9a>
      __HAL_UNLOCK(hi2c);
 8002554:	9b03      	ldr	r3, [sp, #12]
 8002556:	701e      	strb	r6, [r3, #0]
 8002558:	e7cb      	b.n	80024f2 <HAL_I2C_Mem_Write+0x32>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800255a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800255c:	2bff      	cmp	r3, #255	; 0xff
 800255e:	d953      	bls.n	8002608 <HAL_I2C_Mem_Write+0x148>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002560:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002562:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002564:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002566:	045b      	lsls	r3, r3, #17
 8002568:	9000      	str	r0, [sp, #0]
 800256a:	0029      	movs	r1, r5
 800256c:	0020      	movs	r0, r4
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800256e:	2680      	movs	r6, #128	; 0x80
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002570:	f7ff fe52 	bl	8002218 <I2C_TransferConfig>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002574:	04b6      	lsls	r6, r6, #18
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002576:	9a02      	ldr	r2, [sp, #8]
 8002578:	9910      	ldr	r1, [sp, #64]	; 0x40
 800257a:	0020      	movs	r0, r4
 800257c:	f7ff feee 	bl	800235c <I2C_WaitOnTXISFlagUntilTimeout>
 8002580:	2800      	cmp	r0, #0
 8002582:	d1b6      	bne.n	80024f2 <HAL_I2C_Mem_Write+0x32>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002584:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002586:	6822      	ldr	r2, [r4, #0]
 8002588:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 800258a:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800258c:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 800258e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002590:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002592:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002594:	3b01      	subs	r3, #1
 8002596:	b29b      	uxth	r3, r3
 8002598:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800259a:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800259c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800259e:	b292      	uxth	r2, r2
 80025a0:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d017      	beq.n	80025d6 <HAL_I2C_Mem_Write+0x116>
 80025a6:	2a00      	cmp	r2, #0
 80025a8:	d115      	bne.n	80025d6 <HAL_I2C_Mem_Write+0x116>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80025aa:	9b02      	ldr	r3, [sp, #8]
 80025ac:	2180      	movs	r1, #128	; 0x80
 80025ae:	9300      	str	r3, [sp, #0]
 80025b0:	0020      	movs	r0, r4
 80025b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80025b4:	f7ff feaa 	bl	800230c <I2C_WaitOnFlagUntilTimeout>
 80025b8:	2800      	cmp	r0, #0
 80025ba:	d19a      	bne.n	80024f2 <HAL_I2C_Mem_Write+0x32>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025bc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80025be:	2bff      	cmp	r3, #255	; 0xff
 80025c0:	d92a      	bls.n	8002618 <HAL_I2C_Mem_Write+0x158>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80025c2:	23ff      	movs	r3, #255	; 0xff
 80025c4:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80025c6:	2380      	movs	r3, #128	; 0x80
 80025c8:	22ff      	movs	r2, #255	; 0xff
 80025ca:	9000      	str	r0, [sp, #0]
 80025cc:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80025ce:	0029      	movs	r1, r5
 80025d0:	0020      	movs	r0, r4
 80025d2:	f7ff fe21 	bl	8002218 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 80025d6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1cc      	bne.n	8002576 <HAL_I2C_Mem_Write+0xb6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025dc:	9a02      	ldr	r2, [sp, #8]
 80025de:	9910      	ldr	r1, [sp, #64]	; 0x40
 80025e0:	0020      	movs	r0, r4
 80025e2:	f7ff fe6b 	bl	80022bc <I2C_WaitOnSTOPFlagUntilTimeout>
 80025e6:	2800      	cmp	r0, #0
 80025e8:	d000      	beq.n	80025ec <HAL_I2C_Mem_Write+0x12c>
 80025ea:	e782      	b.n	80024f2 <HAL_I2C_Mem_Write+0x32>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025ec:	2120      	movs	r1, #32
 80025ee:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 80025f0:	4d0d      	ldr	r5, [pc, #52]	; (8002628 <HAL_I2C_Mem_Write+0x168>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025f2:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80025f4:	685a      	ldr	r2, [r3, #4]
 80025f6:	402a      	ands	r2, r5
 80025f8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80025fa:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 80025fc:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 80025fe:	3341      	adds	r3, #65	; 0x41
 8002600:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002602:	7038      	strb	r0, [r7, #0]
    __HAL_UNLOCK(hi2c);
 8002604:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8002606:	e775      	b.n	80024f4 <HAL_I2C_Mem_Write+0x34>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002608:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = hi2c->XferCount;
 800260a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800260c:	049b      	lsls	r3, r3, #18
      hi2c->XferSize = hi2c->XferCount;
 800260e:	b292      	uxth	r2, r2
 8002610:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002612:	b2d2      	uxtb	r2, r2
 8002614:	9000      	str	r0, [sp, #0]
 8002616:	e7a8      	b.n	800256a <HAL_I2C_Mem_Write+0xaa>
          hi2c->XferSize = hi2c->XferCount;
 8002618:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800261a:	0033      	movs	r3, r6
          hi2c->XferSize = hi2c->XferCount;
 800261c:	b292      	uxth	r2, r2
 800261e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002620:	b2d2      	uxtb	r2, r2
 8002622:	9000      	str	r0, [sp, #0]
 8002624:	e7d3      	b.n	80025ce <HAL_I2C_Mem_Write+0x10e>
 8002626:	46c0      	nop			; (mov r8, r8)
 8002628:	fe00e800 	.word	0xfe00e800

0800262c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800262c:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800262e:	0004      	movs	r4, r0
 8002630:	3441      	adds	r4, #65	; 0x41
 8002632:	7822      	ldrb	r2, [r4, #0]
{
 8002634:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002636:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002638:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800263a:	2a20      	cmp	r2, #32
 800263c:	d118      	bne.n	8002670 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_LOCK(hi2c);
 800263e:	001d      	movs	r5, r3
 8002640:	3540      	adds	r5, #64	; 0x40
 8002642:	782e      	ldrb	r6, [r5, #0]
 8002644:	2e01      	cmp	r6, #1
 8002646:	d013      	beq.n	8002670 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_I2C_DISABLE(hi2c);
 8002648:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800264a:	3022      	adds	r0, #34	; 0x22
 800264c:	7020      	strb	r0, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 800264e:	681e      	ldr	r6, [r3, #0]
 8002650:	3823      	subs	r0, #35	; 0x23
 8002652:	4386      	bics	r6, r0
 8002654:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002656:	681e      	ldr	r6, [r3, #0]
 8002658:	4f06      	ldr	r7, [pc, #24]	; (8002674 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
 800265a:	403e      	ands	r6, r7
 800265c:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 800265e:	681e      	ldr	r6, [r3, #0]
 8002660:	4331      	orrs	r1, r6
 8002662:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8002664:	6819      	ldr	r1, [r3, #0]
 8002666:	4308      	orrs	r0, r1
 8002668:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 800266a:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800266c:	7022      	strb	r2, [r4, #0]
    __HAL_UNLOCK(hi2c);
 800266e:	7028      	strb	r0, [r5, #0]
  }
}
 8002670:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002672:	46c0      	nop			; (mov r8, r8)
 8002674:	ffffefff 	.word	0xffffefff

08002678 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002678:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800267a:	0005      	movs	r5, r0
 800267c:	3541      	adds	r5, #65	; 0x41
 800267e:	782a      	ldrb	r2, [r5, #0]
{
 8002680:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002682:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002684:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002686:	2a20      	cmp	r2, #32
 8002688:	d117      	bne.n	80026ba <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 800268a:	001c      	movs	r4, r3
 800268c:	3440      	adds	r4, #64	; 0x40
 800268e:	7826      	ldrb	r6, [r4, #0]
 8002690:	2e01      	cmp	r6, #1
 8002692:	d012      	beq.n	80026ba <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_I2C_DISABLE(hi2c);
 8002694:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002696:	3022      	adds	r0, #34	; 0x22
 8002698:	7028      	strb	r0, [r5, #0]
    __HAL_I2C_DISABLE(hi2c);
 800269a:	681e      	ldr	r6, [r3, #0]
 800269c:	3823      	subs	r0, #35	; 0x23
 800269e:	4386      	bics	r6, r0
 80026a0:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 80026a2:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 80026a4:	4f05      	ldr	r7, [pc, #20]	; (80026bc <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    tmpreg |= DigitalFilter << 8U;
 80026a6:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 80026a8:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 80026aa:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 80026ac:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 80026ae:	6819      	ldr	r1, [r3, #0]
 80026b0:	4308      	orrs	r0, r1
 80026b2:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 80026b4:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80026b6:	702a      	strb	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 80026b8:	7020      	strb	r0, [r4, #0]
  }
}
 80026ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026bc:	fffff0ff 	.word	0xfffff0ff

080026c0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80026c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026c2:	0004      	movs	r4, r0
 80026c4:	b087      	sub	sp, #28
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
  {
    return HAL_ERROR;
 80026c6:	2501      	movs	r5, #1
  if (hpcd == NULL)
 80026c8:	2800      	cmp	r0, #0
 80026ca:	d031      	beq.n	8002730 <HAL_PCD_Init+0x70>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80026cc:	4d2c      	ldr	r5, [pc, #176]	; (8002780 <HAL_PCD_Init+0xc0>)
 80026ce:	5d43      	ldrb	r3, [r0, r5]
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d104      	bne.n	80026e0 <HAL_PCD_Init+0x20>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80026d6:	228a      	movs	r2, #138	; 0x8a
 80026d8:	0092      	lsls	r2, r2, #2
 80026da:	5483      	strb	r3, [r0, r2]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80026dc:	f7fe ff6c 	bl	80015b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80026e0:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80026e2:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_BUSY;
 80026e4:	5563      	strb	r3, [r4, r5]
  __HAL_PCD_DISABLE(hpcd);
 80026e6:	f000 fddd 	bl	80032a4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026ea:	2300      	movs	r3, #0
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80026ec:	2601      	movs	r6, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80026ee:	0018      	movs	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026f0:	6861      	ldr	r1, [r4, #4]
 80026f2:	428b      	cmp	r3, r1
 80026f4:	d31f      	bcc.n	8002736 <HAL_PCD_Init+0x76>
    hpcd->IN_ep[i].maxpacket = 0U;
    hpcd->IN_ep[i].xfer_buff = 0U;
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026f6:	2300      	movs	r3, #0
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80026f8:	0018      	movs	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026fa:	4299      	cmp	r1, r3
 80026fc:	d82c      	bhi.n	8002758 <HAL_PCD_Init+0x98>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80026fe:	0023      	movs	r3, r4
 8002700:	466a      	mov	r2, sp
 8002702:	3310      	adds	r3, #16
 8002704:	cb43      	ldmia	r3!, {r0, r1, r6}
 8002706:	c243      	stmia	r2!, {r0, r1, r6}
 8002708:	cb03      	ldmia	r3!, {r0, r1}
 800270a:	c203      	stmia	r2!, {r0, r1}
 800270c:	68a2      	ldr	r2, [r4, #8]
 800270e:	68e3      	ldr	r3, [r4, #12]
 8002710:	6861      	ldr	r1, [r4, #4]
 8002712:	6820      	ldr	r0, [r4, #0]
 8002714:	f000 fdd0 	bl	80032b8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002718:	2300      	movs	r3, #0
 800271a:	1d62      	adds	r2, r4, #5
 800271c:	77d3      	strb	r3, [r2, #31]
  hpcd->State = HAL_PCD_STATE_READY;
 800271e:	2201      	movs	r2, #1
 8002720:	5562      	strb	r2, [r4, r5]
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  
  return HAL_OK;
 8002722:	001d      	movs	r5, r3
  if (hpcd->Init.lpm_enable == 1U)
 8002724:	69e3      	ldr	r3, [r4, #28]
 8002726:	4293      	cmp	r3, r2
 8002728:	d102      	bne.n	8002730 <HAL_PCD_Init+0x70>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800272a:	0020      	movs	r0, r4
 800272c:	f000 f82a 	bl	8002784 <HAL_PCDEx_ActivateLPM>
}
 8002730:	0028      	movs	r0, r5
 8002732:	b007      	add	sp, #28
 8002734:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->IN_ep[i].is_in = 1U;
 8002736:	015a      	lsls	r2, r3, #5
 8002738:	18a2      	adds	r2, r4, r2
 800273a:	0017      	movs	r7, r2
 800273c:	3729      	adds	r7, #41	; 0x29
 800273e:	703e      	strb	r6, [r7, #0]
    hpcd->IN_ep[i].num = i;
 8002740:	3f01      	subs	r7, #1
 8002742:	703b      	strb	r3, [r7, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002744:	86d3      	strh	r3, [r2, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002746:	70f8      	strb	r0, [r7, #3]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002748:	6390      	str	r0, [r2, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 800274a:	63d0      	str	r0, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 800274c:	1c9a      	adds	r2, r3, #2
 800274e:	0152      	lsls	r2, r2, #5
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002750:	3301      	adds	r3, #1
    hpcd->IN_ep[i].xfer_len = 0U;
 8002752:	5110      	str	r0, [r2, r4]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002754:	b2db      	uxtb	r3, r3
 8002756:	e7cc      	b.n	80026f2 <HAL_PCD_Init+0x32>
    hpcd->OUT_ep[i].is_in = 0U;
 8002758:	015a      	lsls	r2, r3, #5
 800275a:	18a2      	adds	r2, r4, r2
 800275c:	0016      	movs	r6, r2
 800275e:	362a      	adds	r6, #42	; 0x2a
 8002760:	36ff      	adds	r6, #255	; 0xff
 8002762:	7030      	strb	r0, [r6, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002764:	32fc      	adds	r2, #252	; 0xfc
    hpcd->OUT_ep[i].num = i;
 8002766:	3e01      	subs	r6, #1
 8002768:	7033      	strb	r3, [r6, #0]
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800276a:	70f0      	strb	r0, [r6, #3]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800276c:	63d0      	str	r0, [r2, #60]	; 0x3c
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800276e:	6410      	str	r0, [r2, #64]	; 0x40
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002770:	001a      	movs	r2, r3
 8002772:	320a      	adds	r2, #10
 8002774:	0152      	lsls	r2, r2, #5
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002776:	3301      	adds	r3, #1
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002778:	5110      	str	r0, [r2, r4]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800277a:	b2db      	uxtb	r3, r3
 800277c:	e7bd      	b.n	80026fa <HAL_PCD_Init+0x3a>
 800277e:	46c0      	nop			; (mov r8, r8)
 8002780:	00000229 	.word	0x00000229

08002784 <HAL_PCDEx_ActivateLPM>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{

  USB_TypeDef *USBx = hpcd->Instance;
 8002784:	6803      	ldr	r3, [r0, #0]
{
 8002786:	0001      	movs	r1, r0
  hpcd->lpm_active = 1U;
 8002788:	209a      	movs	r0, #154	; 0x9a
 800278a:	2201      	movs	r2, #1
{
 800278c:	b510      	push	{r4, lr}
  hpcd->lpm_active = 1U;
 800278e:	0080      	lsls	r0, r0, #2
  hpcd->LPM_State = LPM_L0;
 8002790:	2498      	movs	r4, #152	; 0x98
  hpcd->lpm_active = 1U;
 8002792:	500a      	str	r2, [r1, r0]
  hpcd->LPM_State = LPM_L0;
 8002794:	2000      	movs	r0, #0
 8002796:	00a4      	lsls	r4, r4, #2
 8002798:	5508      	strb	r0, [r1, r4]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800279a:	3354      	adds	r3, #84	; 0x54
 800279c:	8819      	ldrh	r1, [r3, #0]
 800279e:	430a      	orrs	r2, r1
 80027a0:	801a      	strh	r2, [r3, #0]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80027a2:	2202      	movs	r2, #2
 80027a4:	8819      	ldrh	r1, [r3, #0]
 80027a6:	430a      	orrs	r2, r1
 80027a8:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
}
 80027aa:	bd10      	pop	{r4, pc}

080027ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027ae:	0004      	movs	r4, r0
 80027b0:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027b2:	2800      	cmp	r0, #0
 80027b4:	d102      	bne.n	80027bc <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80027b6:	2001      	movs	r0, #1
      }
    }
  }

  return HAL_OK;
}
 80027b8:	b005      	add	sp, #20
 80027ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027bc:	6803      	ldr	r3, [r0, #0]
 80027be:	07db      	lsls	r3, r3, #31
 80027c0:	d433      	bmi.n	800282a <HAL_RCC_OscConfig+0x7e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027c2:	6823      	ldr	r3, [r4, #0]
 80027c4:	079b      	lsls	r3, r3, #30
 80027c6:	d500      	bpl.n	80027ca <HAL_RCC_OscConfig+0x1e>
 80027c8:	e087      	b.n	80028da <HAL_RCC_OscConfig+0x12e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027ca:	6823      	ldr	r3, [r4, #0]
 80027cc:	071b      	lsls	r3, r3, #28
 80027ce:	d500      	bpl.n	80027d2 <HAL_RCC_OscConfig+0x26>
 80027d0:	e0c8      	b.n	8002964 <HAL_RCC_OscConfig+0x1b8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027d2:	6823      	ldr	r3, [r4, #0]
 80027d4:	075b      	lsls	r3, r3, #29
 80027d6:	d500      	bpl.n	80027da <HAL_RCC_OscConfig+0x2e>
 80027d8:	e0eb      	b.n	80029b2 <HAL_RCC_OscConfig+0x206>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80027da:	6823      	ldr	r3, [r4, #0]
 80027dc:	06db      	lsls	r3, r3, #27
 80027de:	d51a      	bpl.n	8002816 <HAL_RCC_OscConfig+0x6a>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80027e0:	6962      	ldr	r2, [r4, #20]
 80027e2:	4dbc      	ldr	r5, [pc, #752]	; (8002ad4 <HAL_RCC_OscConfig+0x328>)
 80027e4:	2304      	movs	r3, #4
 80027e6:	2a01      	cmp	r2, #1
 80027e8:	d000      	beq.n	80027ec <HAL_RCC_OscConfig+0x40>
 80027ea:	e157      	b.n	8002a9c <HAL_RCC_OscConfig+0x2f0>
      __HAL_RCC_HSI14ADC_DISABLE();
 80027ec:	6b69      	ldr	r1, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80027ee:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80027f0:	430b      	orrs	r3, r1
 80027f2:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 80027f4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80027f6:	431a      	orrs	r2, r3
 80027f8:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 80027fa:	f7ff f933 	bl	8001a64 <HAL_GetTick>
 80027fe:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002800:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002802:	4233      	tst	r3, r6
 8002804:	d100      	bne.n	8002808 <HAL_RCC_OscConfig+0x5c>
 8002806:	e142      	b.n	8002a8e <HAL_RCC_OscConfig+0x2e2>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002808:	21f8      	movs	r1, #248	; 0xf8
 800280a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800280c:	69a3      	ldr	r3, [r4, #24]
 800280e:	438a      	bics	r2, r1
 8002810:	00db      	lsls	r3, r3, #3
 8002812:	4313      	orrs	r3, r2
 8002814:	636b      	str	r3, [r5, #52]	; 0x34
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002816:	6823      	ldr	r3, [r4, #0]
 8002818:	069b      	lsls	r3, r3, #26
 800281a:	d500      	bpl.n	800281e <HAL_RCC_OscConfig+0x72>
 800281c:	e166      	b.n	8002aec <HAL_RCC_OscConfig+0x340>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800281e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002820:	2a00      	cmp	r2, #0
 8002822:	d000      	beq.n	8002826 <HAL_RCC_OscConfig+0x7a>
 8002824:	e1a3      	b.n	8002b6e <HAL_RCC_OscConfig+0x3c2>
  return HAL_OK;
 8002826:	2000      	movs	r0, #0
 8002828:	e7c6      	b.n	80027b8 <HAL_RCC_OscConfig+0xc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800282a:	210c      	movs	r1, #12
 800282c:	4da9      	ldr	r5, [pc, #676]	; (8002ad4 <HAL_RCC_OscConfig+0x328>)
 800282e:	686a      	ldr	r2, [r5, #4]
 8002830:	400a      	ands	r2, r1
 8002832:	2a04      	cmp	r2, #4
 8002834:	d00b      	beq.n	800284e <HAL_RCC_OscConfig+0xa2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002836:	686b      	ldr	r3, [r5, #4]
 8002838:	400b      	ands	r3, r1
 800283a:	2b08      	cmp	r3, #8
 800283c:	d10e      	bne.n	800285c <HAL_RCC_OscConfig+0xb0>
 800283e:	22c0      	movs	r2, #192	; 0xc0
 8002840:	686b      	ldr	r3, [r5, #4]
 8002842:	0252      	lsls	r2, r2, #9
 8002844:	4013      	ands	r3, r2
 8002846:	2280      	movs	r2, #128	; 0x80
 8002848:	0252      	lsls	r2, r2, #9
 800284a:	4293      	cmp	r3, r2
 800284c:	d106      	bne.n	800285c <HAL_RCC_OscConfig+0xb0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800284e:	682b      	ldr	r3, [r5, #0]
 8002850:	039b      	lsls	r3, r3, #14
 8002852:	d5b6      	bpl.n	80027c2 <HAL_RCC_OscConfig+0x16>
 8002854:	6863      	ldr	r3, [r4, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1b3      	bne.n	80027c2 <HAL_RCC_OscConfig+0x16>
 800285a:	e7ac      	b.n	80027b6 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800285c:	6863      	ldr	r3, [r4, #4]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d113      	bne.n	800288a <HAL_RCC_OscConfig+0xde>
 8002862:	2380      	movs	r3, #128	; 0x80
 8002864:	682a      	ldr	r2, [r5, #0]
 8002866:	025b      	lsls	r3, r3, #9
 8002868:	4313      	orrs	r3, r2
 800286a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800286c:	f7ff f8fa 	bl	8001a64 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002870:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8002872:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002874:	02b6      	lsls	r6, r6, #10
 8002876:	682b      	ldr	r3, [r5, #0]
 8002878:	4233      	tst	r3, r6
 800287a:	d1a2      	bne.n	80027c2 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800287c:	f7ff f8f2 	bl	8001a64 <HAL_GetTick>
 8002880:	1bc0      	subs	r0, r0, r7
 8002882:	2864      	cmp	r0, #100	; 0x64
 8002884:	d9f7      	bls.n	8002876 <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 8002886:	2003      	movs	r0, #3
 8002888:	e796      	b.n	80027b8 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800288a:	2b00      	cmp	r3, #0
 800288c:	d115      	bne.n	80028ba <HAL_RCC_OscConfig+0x10e>
 800288e:	682b      	ldr	r3, [r5, #0]
 8002890:	4a91      	ldr	r2, [pc, #580]	; (8002ad8 <HAL_RCC_OscConfig+0x32c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002892:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002894:	4013      	ands	r3, r2
 8002896:	602b      	str	r3, [r5, #0]
 8002898:	682b      	ldr	r3, [r5, #0]
 800289a:	4a90      	ldr	r2, [pc, #576]	; (8002adc <HAL_RCC_OscConfig+0x330>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800289c:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800289e:	4013      	ands	r3, r2
 80028a0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80028a2:	f7ff f8df 	bl	8001a64 <HAL_GetTick>
 80028a6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028a8:	682b      	ldr	r3, [r5, #0]
 80028aa:	4233      	tst	r3, r6
 80028ac:	d089      	beq.n	80027c2 <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028ae:	f7ff f8d9 	bl	8001a64 <HAL_GetTick>
 80028b2:	1bc0      	subs	r0, r0, r7
 80028b4:	2864      	cmp	r0, #100	; 0x64
 80028b6:	d9f7      	bls.n	80028a8 <HAL_RCC_OscConfig+0xfc>
 80028b8:	e7e5      	b.n	8002886 <HAL_RCC_OscConfig+0xda>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028ba:	2b05      	cmp	r3, #5
 80028bc:	d105      	bne.n	80028ca <HAL_RCC_OscConfig+0x11e>
 80028be:	2380      	movs	r3, #128	; 0x80
 80028c0:	682a      	ldr	r2, [r5, #0]
 80028c2:	02db      	lsls	r3, r3, #11
 80028c4:	4313      	orrs	r3, r2
 80028c6:	602b      	str	r3, [r5, #0]
 80028c8:	e7cb      	b.n	8002862 <HAL_RCC_OscConfig+0xb6>
 80028ca:	682b      	ldr	r3, [r5, #0]
 80028cc:	4a82      	ldr	r2, [pc, #520]	; (8002ad8 <HAL_RCC_OscConfig+0x32c>)
 80028ce:	4013      	ands	r3, r2
 80028d0:	602b      	str	r3, [r5, #0]
 80028d2:	682b      	ldr	r3, [r5, #0]
 80028d4:	4a81      	ldr	r2, [pc, #516]	; (8002adc <HAL_RCC_OscConfig+0x330>)
 80028d6:	4013      	ands	r3, r2
 80028d8:	e7c7      	b.n	800286a <HAL_RCC_OscConfig+0xbe>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80028da:	220c      	movs	r2, #12
 80028dc:	4d7d      	ldr	r5, [pc, #500]	; (8002ad4 <HAL_RCC_OscConfig+0x328>)
 80028de:	686b      	ldr	r3, [r5, #4]
 80028e0:	4213      	tst	r3, r2
 80028e2:	d00b      	beq.n	80028fc <HAL_RCC_OscConfig+0x150>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80028e4:	686b      	ldr	r3, [r5, #4]
 80028e6:	4013      	ands	r3, r2
 80028e8:	2b08      	cmp	r3, #8
 80028ea:	d116      	bne.n	800291a <HAL_RCC_OscConfig+0x16e>
 80028ec:	22c0      	movs	r2, #192	; 0xc0
 80028ee:	686b      	ldr	r3, [r5, #4]
 80028f0:	0252      	lsls	r2, r2, #9
 80028f2:	4013      	ands	r3, r2
 80028f4:	2280      	movs	r2, #128	; 0x80
 80028f6:	0212      	lsls	r2, r2, #8
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d10e      	bne.n	800291a <HAL_RCC_OscConfig+0x16e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028fc:	682b      	ldr	r3, [r5, #0]
 80028fe:	079b      	lsls	r3, r3, #30
 8002900:	d503      	bpl.n	800290a <HAL_RCC_OscConfig+0x15e>
 8002902:	68e3      	ldr	r3, [r4, #12]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d000      	beq.n	800290a <HAL_RCC_OscConfig+0x15e>
 8002908:	e755      	b.n	80027b6 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800290a:	21f8      	movs	r1, #248	; 0xf8
 800290c:	682a      	ldr	r2, [r5, #0]
 800290e:	6923      	ldr	r3, [r4, #16]
 8002910:	438a      	bics	r2, r1
 8002912:	00db      	lsls	r3, r3, #3
 8002914:	4313      	orrs	r3, r2
 8002916:	602b      	str	r3, [r5, #0]
 8002918:	e757      	b.n	80027ca <HAL_RCC_OscConfig+0x1e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800291a:	68e2      	ldr	r2, [r4, #12]
 800291c:	2301      	movs	r3, #1
 800291e:	2a00      	cmp	r2, #0
 8002920:	d00f      	beq.n	8002942 <HAL_RCC_OscConfig+0x196>
        __HAL_RCC_HSI_ENABLE();
 8002922:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002924:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 8002926:	4313      	orrs	r3, r2
 8002928:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800292a:	f7ff f89b 	bl	8001a64 <HAL_GetTick>
 800292e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002930:	682b      	ldr	r3, [r5, #0]
 8002932:	4233      	tst	r3, r6
 8002934:	d1e9      	bne.n	800290a <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002936:	f7ff f895 	bl	8001a64 <HAL_GetTick>
 800293a:	1bc0      	subs	r0, r0, r7
 800293c:	2802      	cmp	r0, #2
 800293e:	d9f7      	bls.n	8002930 <HAL_RCC_OscConfig+0x184>
 8002940:	e7a1      	b.n	8002886 <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_HSI_DISABLE();
 8002942:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002944:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 8002946:	439a      	bics	r2, r3
 8002948:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 800294a:	f7ff f88b 	bl	8001a64 <HAL_GetTick>
 800294e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002950:	682b      	ldr	r3, [r5, #0]
 8002952:	4233      	tst	r3, r6
 8002954:	d100      	bne.n	8002958 <HAL_RCC_OscConfig+0x1ac>
 8002956:	e738      	b.n	80027ca <HAL_RCC_OscConfig+0x1e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002958:	f7ff f884 	bl	8001a64 <HAL_GetTick>
 800295c:	1bc0      	subs	r0, r0, r7
 800295e:	2802      	cmp	r0, #2
 8002960:	d9f6      	bls.n	8002950 <HAL_RCC_OscConfig+0x1a4>
 8002962:	e790      	b.n	8002886 <HAL_RCC_OscConfig+0xda>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002964:	69e2      	ldr	r2, [r4, #28]
 8002966:	2301      	movs	r3, #1
 8002968:	4d5a      	ldr	r5, [pc, #360]	; (8002ad4 <HAL_RCC_OscConfig+0x328>)
 800296a:	2a00      	cmp	r2, #0
 800296c:	d010      	beq.n	8002990 <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_LSI_ENABLE();
 800296e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002970:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8002972:	4313      	orrs	r3, r2
 8002974:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8002976:	f7ff f875 	bl	8001a64 <HAL_GetTick>
 800297a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800297c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800297e:	4233      	tst	r3, r6
 8002980:	d000      	beq.n	8002984 <HAL_RCC_OscConfig+0x1d8>
 8002982:	e726      	b.n	80027d2 <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002984:	f7ff f86e 	bl	8001a64 <HAL_GetTick>
 8002988:	1bc0      	subs	r0, r0, r7
 800298a:	2802      	cmp	r0, #2
 800298c:	d9f6      	bls.n	800297c <HAL_RCC_OscConfig+0x1d0>
 800298e:	e77a      	b.n	8002886 <HAL_RCC_OscConfig+0xda>
      __HAL_RCC_LSI_DISABLE();
 8002990:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002992:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 8002994:	439a      	bics	r2, r3
 8002996:	626a      	str	r2, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8002998:	f7ff f864 	bl	8001a64 <HAL_GetTick>
 800299c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800299e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80029a0:	4233      	tst	r3, r6
 80029a2:	d100      	bne.n	80029a6 <HAL_RCC_OscConfig+0x1fa>
 80029a4:	e715      	b.n	80027d2 <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029a6:	f7ff f85d 	bl	8001a64 <HAL_GetTick>
 80029aa:	1bc0      	subs	r0, r0, r7
 80029ac:	2802      	cmp	r0, #2
 80029ae:	d9f6      	bls.n	800299e <HAL_RCC_OscConfig+0x1f2>
 80029b0:	e769      	b.n	8002886 <HAL_RCC_OscConfig+0xda>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029b2:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80029b4:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029b6:	4d47      	ldr	r5, [pc, #284]	; (8002ad4 <HAL_RCC_OscConfig+0x328>)
 80029b8:	0552      	lsls	r2, r2, #21
 80029ba:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 80029bc:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029be:	4213      	tst	r3, r2
 80029c0:	d108      	bne.n	80029d4 <HAL_RCC_OscConfig+0x228>
      __HAL_RCC_PWR_CLK_ENABLE();
 80029c2:	69eb      	ldr	r3, [r5, #28]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	61eb      	str	r3, [r5, #28]
 80029c8:	69eb      	ldr	r3, [r5, #28]
 80029ca:	4013      	ands	r3, r2
 80029cc:	9303      	str	r3, [sp, #12]
 80029ce:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 80029d0:	2301      	movs	r3, #1
 80029d2:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d4:	2780      	movs	r7, #128	; 0x80
 80029d6:	4e42      	ldr	r6, [pc, #264]	; (8002ae0 <HAL_RCC_OscConfig+0x334>)
 80029d8:	007f      	lsls	r7, r7, #1
 80029da:	6833      	ldr	r3, [r6, #0]
 80029dc:	423b      	tst	r3, r7
 80029de:	d006      	beq.n	80029ee <HAL_RCC_OscConfig+0x242>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029e0:	68a3      	ldr	r3, [r4, #8]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d113      	bne.n	8002a0e <HAL_RCC_OscConfig+0x262>
 80029e6:	6a2a      	ldr	r2, [r5, #32]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	622b      	str	r3, [r5, #32]
 80029ec:	e030      	b.n	8002a50 <HAL_RCC_OscConfig+0x2a4>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029ee:	6833      	ldr	r3, [r6, #0]
 80029f0:	433b      	orrs	r3, r7
 80029f2:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80029f4:	f7ff f836 	bl	8001a64 <HAL_GetTick>
 80029f8:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029fa:	6833      	ldr	r3, [r6, #0]
 80029fc:	423b      	tst	r3, r7
 80029fe:	d1ef      	bne.n	80029e0 <HAL_RCC_OscConfig+0x234>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a00:	f7ff f830 	bl	8001a64 <HAL_GetTick>
 8002a04:	9b01      	ldr	r3, [sp, #4]
 8002a06:	1ac0      	subs	r0, r0, r3
 8002a08:	2864      	cmp	r0, #100	; 0x64
 8002a0a:	d9f6      	bls.n	80029fa <HAL_RCC_OscConfig+0x24e>
 8002a0c:	e73b      	b.n	8002886 <HAL_RCC_OscConfig+0xda>
 8002a0e:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d114      	bne.n	8002a3e <HAL_RCC_OscConfig+0x292>
 8002a14:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a16:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a18:	4393      	bics	r3, r2
 8002a1a:	622b      	str	r3, [r5, #32]
 8002a1c:	6a2b      	ldr	r3, [r5, #32]
 8002a1e:	3203      	adds	r2, #3
 8002a20:	4393      	bics	r3, r2
 8002a22:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8002a24:	f7ff f81e 	bl	8001a64 <HAL_GetTick>
 8002a28:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a2a:	6a2b      	ldr	r3, [r5, #32]
 8002a2c:	423b      	tst	r3, r7
 8002a2e:	d025      	beq.n	8002a7c <HAL_RCC_OscConfig+0x2d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a30:	f7ff f818 	bl	8001a64 <HAL_GetTick>
 8002a34:	4b2b      	ldr	r3, [pc, #172]	; (8002ae4 <HAL_RCC_OscConfig+0x338>)
 8002a36:	1b80      	subs	r0, r0, r6
 8002a38:	4298      	cmp	r0, r3
 8002a3a:	d9f6      	bls.n	8002a2a <HAL_RCC_OscConfig+0x27e>
 8002a3c:	e723      	b.n	8002886 <HAL_RCC_OscConfig+0xda>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a3e:	2b05      	cmp	r3, #5
 8002a40:	d10b      	bne.n	8002a5a <HAL_RCC_OscConfig+0x2ae>
 8002a42:	6a29      	ldr	r1, [r5, #32]
 8002a44:	3b01      	subs	r3, #1
 8002a46:	430b      	orrs	r3, r1
 8002a48:	622b      	str	r3, [r5, #32]
 8002a4a:	6a2b      	ldr	r3, [r5, #32]
 8002a4c:	431a      	orrs	r2, r3
 8002a4e:	622a      	str	r2, [r5, #32]
      tickstart = HAL_GetTick();
 8002a50:	f7ff f808 	bl	8001a64 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a54:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8002a56:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a58:	e00d      	b.n	8002a76 <HAL_RCC_OscConfig+0x2ca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a5a:	6a2b      	ldr	r3, [r5, #32]
 8002a5c:	4393      	bics	r3, r2
 8002a5e:	2204      	movs	r2, #4
 8002a60:	622b      	str	r3, [r5, #32]
 8002a62:	6a2b      	ldr	r3, [r5, #32]
 8002a64:	4393      	bics	r3, r2
 8002a66:	e7c0      	b.n	80029ea <HAL_RCC_OscConfig+0x23e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a68:	f7fe fffc 	bl	8001a64 <HAL_GetTick>
 8002a6c:	4b1d      	ldr	r3, [pc, #116]	; (8002ae4 <HAL_RCC_OscConfig+0x338>)
 8002a6e:	1b80      	subs	r0, r0, r6
 8002a70:	4298      	cmp	r0, r3
 8002a72:	d900      	bls.n	8002a76 <HAL_RCC_OscConfig+0x2ca>
 8002a74:	e707      	b.n	8002886 <HAL_RCC_OscConfig+0xda>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a76:	6a2b      	ldr	r3, [r5, #32]
 8002a78:	423b      	tst	r3, r7
 8002a7a:	d0f5      	beq.n	8002a68 <HAL_RCC_OscConfig+0x2bc>
    if(pwrclkchanged == SET)
 8002a7c:	9b00      	ldr	r3, [sp, #0]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d000      	beq.n	8002a84 <HAL_RCC_OscConfig+0x2d8>
 8002a82:	e6aa      	b.n	80027da <HAL_RCC_OscConfig+0x2e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a84:	69eb      	ldr	r3, [r5, #28]
 8002a86:	4a18      	ldr	r2, [pc, #96]	; (8002ae8 <HAL_RCC_OscConfig+0x33c>)
 8002a88:	4013      	ands	r3, r2
 8002a8a:	61eb      	str	r3, [r5, #28]
 8002a8c:	e6a5      	b.n	80027da <HAL_RCC_OscConfig+0x2e>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002a8e:	f7fe ffe9 	bl	8001a64 <HAL_GetTick>
 8002a92:	1bc0      	subs	r0, r0, r7
 8002a94:	2802      	cmp	r0, #2
 8002a96:	d800      	bhi.n	8002a9a <HAL_RCC_OscConfig+0x2ee>
 8002a98:	e6b2      	b.n	8002800 <HAL_RCC_OscConfig+0x54>
 8002a9a:	e6f4      	b.n	8002886 <HAL_RCC_OscConfig+0xda>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002a9c:	3205      	adds	r2, #5
 8002a9e:	d103      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x2fc>
      __HAL_RCC_HSI14ADC_ENABLE();
 8002aa0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002aa2:	439a      	bics	r2, r3
 8002aa4:	636a      	str	r2, [r5, #52]	; 0x34
 8002aa6:	e6af      	b.n	8002808 <HAL_RCC_OscConfig+0x5c>
      __HAL_RCC_HSI14ADC_DISABLE();
 8002aa8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002aaa:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8002aac:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8002aae:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8002ab0:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8002ab2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002ab4:	4393      	bics	r3, r2
 8002ab6:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8002ab8:	f7fe ffd4 	bl	8001a64 <HAL_GetTick>
 8002abc:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002abe:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002ac0:	4233      	tst	r3, r6
 8002ac2:	d100      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x31a>
 8002ac4:	e6a7      	b.n	8002816 <HAL_RCC_OscConfig+0x6a>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002ac6:	f7fe ffcd 	bl	8001a64 <HAL_GetTick>
 8002aca:	1bc0      	subs	r0, r0, r7
 8002acc:	2802      	cmp	r0, #2
 8002ace:	d9f6      	bls.n	8002abe <HAL_RCC_OscConfig+0x312>
 8002ad0:	e6d9      	b.n	8002886 <HAL_RCC_OscConfig+0xda>
 8002ad2:	46c0      	nop			; (mov r8, r8)
 8002ad4:	40021000 	.word	0x40021000
 8002ad8:	fffeffff 	.word	0xfffeffff
 8002adc:	fffbffff 	.word	0xfffbffff
 8002ae0:	40007000 	.word	0x40007000
 8002ae4:	00001388 	.word	0x00001388
 8002ae8:	efffffff 	.word	0xefffffff
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002aec:	210c      	movs	r1, #12
 8002aee:	4d53      	ldr	r5, [pc, #332]	; (8002c3c <HAL_RCC_OscConfig+0x490>)
 8002af0:	686a      	ldr	r2, [r5, #4]
 8002af2:	400a      	ands	r2, r1
 8002af4:	428a      	cmp	r2, r1
 8002af6:	d009      	beq.n	8002b0c <HAL_RCC_OscConfig+0x360>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002af8:	686b      	ldr	r3, [r5, #4]
 8002afa:	400b      	ands	r3, r1
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002afc:	2b08      	cmp	r3, #8
 8002afe:	d10e      	bne.n	8002b1e <HAL_RCC_OscConfig+0x372>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002b00:	22c0      	movs	r2, #192	; 0xc0
 8002b02:	686b      	ldr	r3, [r5, #4]
 8002b04:	0252      	lsls	r2, r2, #9
 8002b06:	4013      	ands	r3, r2
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d108      	bne.n	8002b1e <HAL_RCC_OscConfig+0x372>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002b0c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002b0e:	03db      	lsls	r3, r3, #15
 8002b10:	d400      	bmi.n	8002b14 <HAL_RCC_OscConfig+0x368>
 8002b12:	e684      	b.n	800281e <HAL_RCC_OscConfig+0x72>
 8002b14:	6a23      	ldr	r3, [r4, #32]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d000      	beq.n	8002b1c <HAL_RCC_OscConfig+0x370>
 8002b1a:	e64c      	b.n	80027b6 <HAL_RCC_OscConfig+0xa>
 8002b1c:	e67f      	b.n	800281e <HAL_RCC_OscConfig+0x72>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002b1e:	6a23      	ldr	r3, [r4, #32]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d011      	beq.n	8002b48 <HAL_RCC_OscConfig+0x39c>
        __HAL_RCC_HSI48_ENABLE();
 8002b24:	2680      	movs	r6, #128	; 0x80
 8002b26:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002b28:	0276      	lsls	r6, r6, #9
 8002b2a:	4333      	orrs	r3, r6
 8002b2c:	636b      	str	r3, [r5, #52]	; 0x34
        tickstart = HAL_GetTick();
 8002b2e:	f7fe ff99 	bl	8001a64 <HAL_GetTick>
 8002b32:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002b34:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002b36:	4233      	tst	r3, r6
 8002b38:	d000      	beq.n	8002b3c <HAL_RCC_OscConfig+0x390>
 8002b3a:	e670      	b.n	800281e <HAL_RCC_OscConfig+0x72>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b3c:	f7fe ff92 	bl	8001a64 <HAL_GetTick>
 8002b40:	1bc0      	subs	r0, r0, r7
 8002b42:	2802      	cmp	r0, #2
 8002b44:	d9f6      	bls.n	8002b34 <HAL_RCC_OscConfig+0x388>
 8002b46:	e69e      	b.n	8002886 <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_HSI48_DISABLE();
 8002b48:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002b4a:	4a3d      	ldr	r2, [pc, #244]	; (8002c40 <HAL_RCC_OscConfig+0x494>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002b4c:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_HSI48_DISABLE();
 8002b4e:	4013      	ands	r3, r2
 8002b50:	636b      	str	r3, [r5, #52]	; 0x34
        tickstart = HAL_GetTick();
 8002b52:	f7fe ff87 	bl	8001a64 <HAL_GetTick>
 8002b56:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002b58:	0276      	lsls	r6, r6, #9
 8002b5a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002b5c:	4233      	tst	r3, r6
 8002b5e:	d100      	bne.n	8002b62 <HAL_RCC_OscConfig+0x3b6>
 8002b60:	e65d      	b.n	800281e <HAL_RCC_OscConfig+0x72>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b62:	f7fe ff7f 	bl	8001a64 <HAL_GetTick>
 8002b66:	1bc0      	subs	r0, r0, r7
 8002b68:	2802      	cmp	r0, #2
 8002b6a:	d9f6      	bls.n	8002b5a <HAL_RCC_OscConfig+0x3ae>
 8002b6c:	e68b      	b.n	8002886 <HAL_RCC_OscConfig+0xda>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b6e:	200c      	movs	r0, #12
 8002b70:	4b32      	ldr	r3, [pc, #200]	; (8002c3c <HAL_RCC_OscConfig+0x490>)
 8002b72:	6859      	ldr	r1, [r3, #4]
 8002b74:	001d      	movs	r5, r3
 8002b76:	4001      	ands	r1, r0
 8002b78:	2908      	cmp	r1, #8
 8002b7a:	d044      	beq.n	8002c06 <HAL_RCC_OscConfig+0x45a>
        __HAL_RCC_PLL_DISABLE();
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4931      	ldr	r1, [pc, #196]	; (8002c44 <HAL_RCC_OscConfig+0x498>)
 8002b80:	400b      	ands	r3, r1
 8002b82:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b84:	2a02      	cmp	r2, #2
 8002b86:	d12f      	bne.n	8002be8 <HAL_RCC_OscConfig+0x43c>
        tickstart = HAL_GetTick();
 8002b88:	f7fe ff6c 	bl	8001a64 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b8c:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8002b8e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b90:	04b6      	lsls	r6, r6, #18
 8002b92:	682b      	ldr	r3, [r5, #0]
 8002b94:	4233      	tst	r3, r6
 8002b96:	d121      	bne.n	8002bdc <HAL_RCC_OscConfig+0x430>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b98:	220f      	movs	r2, #15
 8002b9a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002b9c:	4393      	bics	r3, r2
 8002b9e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	62eb      	str	r3, [r5, #44]	; 0x2c
 8002ba4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002ba6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002ba8:	686a      	ldr	r2, [r5, #4]
 8002baa:	430b      	orrs	r3, r1
 8002bac:	4926      	ldr	r1, [pc, #152]	; (8002c48 <HAL_RCC_OscConfig+0x49c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bae:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bb0:	400a      	ands	r2, r1
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002bb6:	2380      	movs	r3, #128	; 0x80
 8002bb8:	682a      	ldr	r2, [r5, #0]
 8002bba:	045b      	lsls	r3, r3, #17
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002bc0:	f7fe ff50 	bl	8001a64 <HAL_GetTick>
 8002bc4:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bc6:	04a4      	lsls	r4, r4, #18
 8002bc8:	682b      	ldr	r3, [r5, #0]
 8002bca:	4223      	tst	r3, r4
 8002bcc:	d000      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x424>
 8002bce:	e62a      	b.n	8002826 <HAL_RCC_OscConfig+0x7a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bd0:	f7fe ff48 	bl	8001a64 <HAL_GetTick>
 8002bd4:	1b80      	subs	r0, r0, r6
 8002bd6:	2802      	cmp	r0, #2
 8002bd8:	d9f6      	bls.n	8002bc8 <HAL_RCC_OscConfig+0x41c>
 8002bda:	e654      	b.n	8002886 <HAL_RCC_OscConfig+0xda>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bdc:	f7fe ff42 	bl	8001a64 <HAL_GetTick>
 8002be0:	1bc0      	subs	r0, r0, r7
 8002be2:	2802      	cmp	r0, #2
 8002be4:	d9d5      	bls.n	8002b92 <HAL_RCC_OscConfig+0x3e6>
 8002be6:	e64e      	b.n	8002886 <HAL_RCC_OscConfig+0xda>
        tickstart = HAL_GetTick();
 8002be8:	f7fe ff3c 	bl	8001a64 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bec:	2480      	movs	r4, #128	; 0x80
        tickstart = HAL_GetTick();
 8002bee:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bf0:	04a4      	lsls	r4, r4, #18
 8002bf2:	682b      	ldr	r3, [r5, #0]
 8002bf4:	4223      	tst	r3, r4
 8002bf6:	d100      	bne.n	8002bfa <HAL_RCC_OscConfig+0x44e>
 8002bf8:	e615      	b.n	8002826 <HAL_RCC_OscConfig+0x7a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bfa:	f7fe ff33 	bl	8001a64 <HAL_GetTick>
 8002bfe:	1b80      	subs	r0, r0, r6
 8002c00:	2802      	cmp	r0, #2
 8002c02:	d9f6      	bls.n	8002bf2 <HAL_RCC_OscConfig+0x446>
 8002c04:	e63f      	b.n	8002886 <HAL_RCC_OscConfig+0xda>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c06:	2a01      	cmp	r2, #1
 8002c08:	d100      	bne.n	8002c0c <HAL_RCC_OscConfig+0x460>
 8002c0a:	e5d4      	b.n	80027b6 <HAL_RCC_OscConfig+0xa>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c0c:	22c0      	movs	r2, #192	; 0xc0
        pll_config  = RCC->CFGR;
 8002c0e:	6858      	ldr	r0, [r3, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c10:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002c12:	0252      	lsls	r2, r2, #9
        pll_config2 = RCC->CFGR2;
 8002c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c16:	4002      	ands	r2, r0
 8002c18:	428a      	cmp	r2, r1
 8002c1a:	d000      	beq.n	8002c1e <HAL_RCC_OscConfig+0x472>
 8002c1c:	e5cb      	b.n	80027b6 <HAL_RCC_OscConfig+0xa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002c1e:	220f      	movs	r2, #15
 8002c20:	4013      	ands	r3, r2
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c22:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d000      	beq.n	8002c2a <HAL_RCC_OscConfig+0x47e>
 8002c28:	e5c5      	b.n	80027b6 <HAL_RCC_OscConfig+0xa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002c2a:	23f0      	movs	r3, #240	; 0xf0
 8002c2c:	039b      	lsls	r3, r3, #14
 8002c2e:	4018      	ands	r0, r3
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002c30:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002c32:	1ac0      	subs	r0, r0, r3
 8002c34:	1e43      	subs	r3, r0, #1
 8002c36:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 8002c38:	b2c0      	uxtb	r0, r0
 8002c3a:	e5bd      	b.n	80027b8 <HAL_RCC_OscConfig+0xc>
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	fffeffff 	.word	0xfffeffff
 8002c44:	feffffff 	.word	0xfeffffff
 8002c48:	ffc27fff 	.word	0xffc27fff

08002c4c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c4c:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002c4e:	4c1b      	ldr	r4, [pc, #108]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x70>)
{
 8002c50:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002c52:	2210      	movs	r2, #16
 8002c54:	0021      	movs	r1, r4
 8002c56:	4668      	mov	r0, sp
 8002c58:	f000 fb6e 	bl	8003338 <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002c5c:	0021      	movs	r1, r4
 8002c5e:	ad04      	add	r5, sp, #16
 8002c60:	2210      	movs	r2, #16
 8002c62:	3110      	adds	r1, #16
 8002c64:	0028      	movs	r0, r5
 8002c66:	f000 fb67 	bl	8003338 <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c6a:	200c      	movs	r0, #12
  tmpreg = RCC->CFGR;
 8002c6c:	4a14      	ldr	r2, [pc, #80]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0x74>)
 8002c6e:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002c70:	4018      	ands	r0, r3
 8002c72:	2808      	cmp	r0, #8
 8002c74:	d009      	beq.n	8002c8a <HAL_RCC_GetSysClockFreq+0x3e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c76:	380c      	subs	r0, #12
 8002c78:	4243      	negs	r3, r0
 8002c7a:	4158      	adcs	r0, r3
 8002c7c:	4b11      	ldr	r3, [pc, #68]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x78>)
 8002c7e:	4240      	negs	r0, r0
 8002c80:	4018      	ands	r0, r3
 8002c82:	4b11      	ldr	r3, [pc, #68]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0x7c>)
 8002c84:	18c0      	adds	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002c86:	b009      	add	sp, #36	; 0x24
 8002c88:	bd30      	pop	{r4, r5, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002c8a:	200f      	movs	r0, #15
 8002c8c:	466c      	mov	r4, sp
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002c8e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002c90:	0c99      	lsrs	r1, r3, #18
 8002c92:	4001      	ands	r1, r0
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002c94:	4002      	ands	r2, r0
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002c96:	5c64      	ldrb	r4, [r4, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002c98:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002c9a:	22c0      	movs	r2, #192	; 0xc0
 8002c9c:	2080      	movs	r0, #128	; 0x80
 8002c9e:	0252      	lsls	r2, r2, #9
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	0240      	lsls	r0, r0, #9
 8002ca4:	4283      	cmp	r3, r0
 8002ca6:	d101      	bne.n	8002cac <HAL_RCC_GetSysClockFreq+0x60>
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002ca8:	4807      	ldr	r0, [pc, #28]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0x7c>)
 8002caa:	e002      	b.n	8002cb2 <HAL_RCC_GetSysClockFreq+0x66>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d1fb      	bne.n	8002ca8 <HAL_RCC_GetSysClockFreq+0x5c>
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002cb0:	4806      	ldr	r0, [pc, #24]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x80>)
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002cb2:	f7fd fa3d 	bl	8000130 <__udivsi3>
 8002cb6:	4360      	muls	r0, r4
 8002cb8:	e7e5      	b.n	8002c86 <HAL_RCC_GetSysClockFreq+0x3a>
 8002cba:	46c0      	nop			; (mov r8, r8)
 8002cbc:	08003b70 	.word	0x08003b70
 8002cc0:	40021000 	.word	0x40021000
 8002cc4:	02625a00 	.word	0x02625a00
 8002cc8:	007a1200 	.word	0x007a1200
 8002ccc:	02dc6c00 	.word	0x02dc6c00

08002cd0 <HAL_RCC_ClockConfig>:
{
 8002cd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002cd2:	0005      	movs	r5, r0
 8002cd4:	000f      	movs	r7, r1
  if(RCC_ClkInitStruct == NULL)
 8002cd6:	2800      	cmp	r0, #0
 8002cd8:	d101      	bne.n	8002cde <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 8002cda:	2001      	movs	r0, #1
}
 8002cdc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cde:	2201      	movs	r2, #1
 8002ce0:	4c3b      	ldr	r4, [pc, #236]	; (8002dd0 <HAL_RCC_ClockConfig+0x100>)
 8002ce2:	6823      	ldr	r3, [r4, #0]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	428b      	cmp	r3, r1
 8002ce8:	d31c      	bcc.n	8002d24 <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cea:	6829      	ldr	r1, [r5, #0]
 8002cec:	078b      	lsls	r3, r1, #30
 8002cee:	d422      	bmi.n	8002d36 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cf0:	07cb      	lsls	r3, r1, #31
 8002cf2:	d42f      	bmi.n	8002d54 <HAL_RCC_ClockConfig+0x84>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	6822      	ldr	r2, [r4, #0]
 8002cf8:	401a      	ands	r2, r3
 8002cfa:	42ba      	cmp	r2, r7
 8002cfc:	d859      	bhi.n	8002db2 <HAL_RCC_ClockConfig+0xe2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cfe:	682b      	ldr	r3, [r5, #0]
 8002d00:	4c34      	ldr	r4, [pc, #208]	; (8002dd4 <HAL_RCC_ClockConfig+0x104>)
 8002d02:	075b      	lsls	r3, r3, #29
 8002d04:	d45c      	bmi.n	8002dc0 <HAL_RCC_ClockConfig+0xf0>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002d06:	f7ff ffa1 	bl	8002c4c <HAL_RCC_GetSysClockFreq>
 8002d0a:	6863      	ldr	r3, [r4, #4]
 8002d0c:	4a32      	ldr	r2, [pc, #200]	; (8002dd8 <HAL_RCC_ClockConfig+0x108>)
 8002d0e:	061b      	lsls	r3, r3, #24
 8002d10:	0f1b      	lsrs	r3, r3, #28
 8002d12:	5cd3      	ldrb	r3, [r2, r3]
 8002d14:	40d8      	lsrs	r0, r3
 8002d16:	4b31      	ldr	r3, [pc, #196]	; (8002ddc <HAL_RCC_ClockConfig+0x10c>)
 8002d18:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002d1a:	2000      	movs	r0, #0
 8002d1c:	f7fe fe62 	bl	80019e4 <HAL_InitTick>
  return HAL_OK;
 8002d20:	2000      	movs	r0, #0
 8002d22:	e7db      	b.n	8002cdc <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d24:	6823      	ldr	r3, [r4, #0]
 8002d26:	4393      	bics	r3, r2
 8002d28:	430b      	orrs	r3, r1
 8002d2a:	6023      	str	r3, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d2c:	6823      	ldr	r3, [r4, #0]
 8002d2e:	4013      	ands	r3, r2
 8002d30:	428b      	cmp	r3, r1
 8002d32:	d1d2      	bne.n	8002cda <HAL_RCC_ClockConfig+0xa>
 8002d34:	e7d9      	b.n	8002cea <HAL_RCC_ClockConfig+0x1a>
 8002d36:	4a27      	ldr	r2, [pc, #156]	; (8002dd4 <HAL_RCC_ClockConfig+0x104>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d38:	074b      	lsls	r3, r1, #29
 8002d3a:	d504      	bpl.n	8002d46 <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002d3c:	23e0      	movs	r3, #224	; 0xe0
 8002d3e:	6850      	ldr	r0, [r2, #4]
 8002d40:	00db      	lsls	r3, r3, #3
 8002d42:	4303      	orrs	r3, r0
 8002d44:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d46:	20f0      	movs	r0, #240	; 0xf0
 8002d48:	6853      	ldr	r3, [r2, #4]
 8002d4a:	4383      	bics	r3, r0
 8002d4c:	68a8      	ldr	r0, [r5, #8]
 8002d4e:	4303      	orrs	r3, r0
 8002d50:	6053      	str	r3, [r2, #4]
 8002d52:	e7cd      	b.n	8002cf0 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d54:	686a      	ldr	r2, [r5, #4]
 8002d56:	4e1f      	ldr	r6, [pc, #124]	; (8002dd4 <HAL_RCC_ClockConfig+0x104>)
 8002d58:	2a01      	cmp	r2, #1
 8002d5a:	d11a      	bne.n	8002d92 <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d5c:	6833      	ldr	r3, [r6, #0]
 8002d5e:	039b      	lsls	r3, r3, #14
 8002d60:	d5bb      	bpl.n	8002cda <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d62:	2103      	movs	r1, #3
 8002d64:	6873      	ldr	r3, [r6, #4]
 8002d66:	438b      	bics	r3, r1
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8002d6c:	f7fe fe7a 	bl	8001a64 <HAL_GetTick>
 8002d70:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d72:	230c      	movs	r3, #12
 8002d74:	6872      	ldr	r2, [r6, #4]
 8002d76:	401a      	ands	r2, r3
 8002d78:	686b      	ldr	r3, [r5, #4]
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d0b9      	beq.n	8002cf4 <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d80:	f7fe fe70 	bl	8001a64 <HAL_GetTick>
 8002d84:	9b01      	ldr	r3, [sp, #4]
 8002d86:	1ac0      	subs	r0, r0, r3
 8002d88:	4b15      	ldr	r3, [pc, #84]	; (8002de0 <HAL_RCC_ClockConfig+0x110>)
 8002d8a:	4298      	cmp	r0, r3
 8002d8c:	d9f1      	bls.n	8002d72 <HAL_RCC_ClockConfig+0xa2>
        return HAL_TIMEOUT;
 8002d8e:	2003      	movs	r0, #3
 8002d90:	e7a4      	b.n	8002cdc <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d92:	2a02      	cmp	r2, #2
 8002d94:	d103      	bne.n	8002d9e <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d96:	6833      	ldr	r3, [r6, #0]
 8002d98:	019b      	lsls	r3, r3, #6
 8002d9a:	d4e2      	bmi.n	8002d62 <HAL_RCC_ClockConfig+0x92>
 8002d9c:	e79d      	b.n	8002cda <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002d9e:	2a03      	cmp	r2, #3
 8002da0:	d103      	bne.n	8002daa <HAL_RCC_ClockConfig+0xda>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002da2:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8002da4:	03db      	lsls	r3, r3, #15
 8002da6:	d4dc      	bmi.n	8002d62 <HAL_RCC_ClockConfig+0x92>
 8002da8:	e797      	b.n	8002cda <HAL_RCC_ClockConfig+0xa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002daa:	6833      	ldr	r3, [r6, #0]
 8002dac:	079b      	lsls	r3, r3, #30
 8002dae:	d4d8      	bmi.n	8002d62 <HAL_RCC_ClockConfig+0x92>
 8002db0:	e793      	b.n	8002cda <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002db2:	6822      	ldr	r2, [r4, #0]
 8002db4:	439a      	bics	r2, r3
 8002db6:	6022      	str	r2, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002db8:	6822      	ldr	r2, [r4, #0]
 8002dba:	421a      	tst	r2, r3
 8002dbc:	d09f      	beq.n	8002cfe <HAL_RCC_ClockConfig+0x2e>
 8002dbe:	e78c      	b.n	8002cda <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002dc0:	6863      	ldr	r3, [r4, #4]
 8002dc2:	4a08      	ldr	r2, [pc, #32]	; (8002de4 <HAL_RCC_ClockConfig+0x114>)
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	68ea      	ldr	r2, [r5, #12]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	6063      	str	r3, [r4, #4]
 8002dcc:	e79b      	b.n	8002d06 <HAL_RCC_ClockConfig+0x36>
 8002dce:	46c0      	nop			; (mov r8, r8)
 8002dd0:	40022000 	.word	0x40022000
 8002dd4:	40021000 	.word	0x40021000
 8002dd8:	08003be1 	.word	0x08003be1
 8002ddc:	20000200 	.word	0x20000200
 8002de0:	00001388 	.word	0x00001388
 8002de4:	fffff8ff 	.word	0xfffff8ff

08002de8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002de8:	4b04      	ldr	r3, [pc, #16]	; (8002dfc <HAL_RCC_GetPCLK1Freq+0x14>)
 8002dea:	4a05      	ldr	r2, [pc, #20]	; (8002e00 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	055b      	lsls	r3, r3, #21
 8002df0:	0f5b      	lsrs	r3, r3, #29
 8002df2:	5cd3      	ldrb	r3, [r2, r3]
 8002df4:	4a03      	ldr	r2, [pc, #12]	; (8002e04 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002df6:	6810      	ldr	r0, [r2, #0]
 8002df8:	40d8      	lsrs	r0, r3
}    
 8002dfa:	4770      	bx	lr
 8002dfc:	40021000 	.word	0x40021000
 8002e00:	08003bf1 	.word	0x08003bf1
 8002e04:	20000200 	.word	0x20000200

08002e08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e08:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e0a:	6803      	ldr	r3, [r0, #0]
{
 8002e0c:	b085      	sub	sp, #20
 8002e0e:	0005      	movs	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e10:	03db      	lsls	r3, r3, #15
 8002e12:	d528      	bpl.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e14:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8002e16:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e18:	4c40      	ldr	r4, [pc, #256]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8002e1a:	0552      	lsls	r2, r2, #21
 8002e1c:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8002e1e:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e20:	4213      	tst	r3, r2
 8002e22:	d108      	bne.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e24:	69e3      	ldr	r3, [r4, #28]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	61e3      	str	r3, [r4, #28]
 8002e2a:	69e3      	ldr	r3, [r4, #28]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	9303      	str	r3, [sp, #12]
 8002e30:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8002e32:	2301      	movs	r3, #1
 8002e34:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e36:	2780      	movs	r7, #128	; 0x80
 8002e38:	4e39      	ldr	r6, [pc, #228]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8002e3a:	007f      	lsls	r7, r7, #1
 8002e3c:	6833      	ldr	r3, [r6, #0]
 8002e3e:	423b      	tst	r3, r7
 8002e40:	d038      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0xac>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e42:	22c0      	movs	r2, #192	; 0xc0
 8002e44:	6a23      	ldr	r3, [r4, #32]
 8002e46:	0092      	lsls	r2, r2, #2
 8002e48:	4013      	ands	r3, r2
 8002e4a:	4e36      	ldr	r6, [pc, #216]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e4c:	d144      	bne.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0xd0>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e4e:	6a23      	ldr	r3, [r4, #32]
 8002e50:	401e      	ands	r6, r3
 8002e52:	686b      	ldr	r3, [r5, #4]
 8002e54:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e56:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e58:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d103      	bne.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e5e:	69e3      	ldr	r3, [r4, #28]
 8002e60:	4a31      	ldr	r2, [pc, #196]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8002e62:	4013      	ands	r3, r2
 8002e64:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e66:	682a      	ldr	r2, [r5, #0]
 8002e68:	07d3      	lsls	r3, r2, #31
 8002e6a:	d506      	bpl.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e6c:	2003      	movs	r0, #3
 8002e6e:	492b      	ldr	r1, [pc, #172]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8002e70:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8002e72:	4383      	bics	r3, r0
 8002e74:	68a8      	ldr	r0, [r5, #8]
 8002e76:	4303      	orrs	r3, r0
 8002e78:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e7a:	0693      	lsls	r3, r2, #26
 8002e7c:	d506      	bpl.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e7e:	2010      	movs	r0, #16
 8002e80:	4926      	ldr	r1, [pc, #152]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8002e82:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8002e84:	4383      	bics	r3, r0
 8002e86:	68e8      	ldr	r0, [r5, #12]
 8002e88:	4303      	orrs	r3, r0
 8002e8a:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e8c:	0393      	lsls	r3, r2, #14
 8002e8e:	d506      	bpl.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e90:	2080      	movs	r0, #128	; 0x80
 8002e92:	4922      	ldr	r1, [pc, #136]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8002e94:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8002e96:	4383      	bics	r3, r0
 8002e98:	6968      	ldr	r0, [r5, #20]
 8002e9a:	4303      	orrs	r3, r0
 8002e9c:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002e9e:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002ea0:	0553      	lsls	r3, r2, #21
 8002ea2:	d517      	bpl.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002ea4:	2140      	movs	r1, #64	; 0x40
 8002ea6:	4a1d      	ldr	r2, [pc, #116]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8002ea8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002eaa:	438b      	bics	r3, r1
 8002eac:	6929      	ldr	r1, [r5, #16]
 8002eae:	430b      	orrs	r3, r1
 8002eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8002eb2:	e00f      	b.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002eb4:	6833      	ldr	r3, [r6, #0]
 8002eb6:	433b      	orrs	r3, r7
 8002eb8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002eba:	f7fe fdd3 	bl	8001a64 <HAL_GetTick>
 8002ebe:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ec0:	6833      	ldr	r3, [r6, #0]
 8002ec2:	423b      	tst	r3, r7
 8002ec4:	d1bd      	bne.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ec6:	f7fe fdcd 	bl	8001a64 <HAL_GetTick>
 8002eca:	9b01      	ldr	r3, [sp, #4]
 8002ecc:	1ac0      	subs	r0, r0, r3
 8002ece:	2864      	cmp	r0, #100	; 0x64
 8002ed0:	d9f6      	bls.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
          return HAL_TIMEOUT;
 8002ed2:	2003      	movs	r0, #3
}
 8002ed4:	b005      	add	sp, #20
 8002ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ed8:	6869      	ldr	r1, [r5, #4]
 8002eda:	400a      	ands	r2, r1
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d0b6      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x46>
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ee0:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ee2:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ee4:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ee6:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ee8:	025b      	lsls	r3, r3, #9
 8002eea:	4303      	orrs	r3, r0
 8002eec:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002eee:	6a23      	ldr	r3, [r4, #32]
 8002ef0:	480e      	ldr	r0, [pc, #56]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x124>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ef2:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ef4:	4003      	ands	r3, r0
 8002ef6:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 8002ef8:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002efa:	07d3      	lsls	r3, r2, #31
 8002efc:	d5a7      	bpl.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x46>
        tickstart = HAL_GetTick();
 8002efe:	f7fe fdb1 	bl	8001a64 <HAL_GetTick>
 8002f02:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f04:	2202      	movs	r2, #2
 8002f06:	6a23      	ldr	r3, [r4, #32]
 8002f08:	4213      	tst	r3, r2
 8002f0a:	d1a0      	bne.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x46>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f0c:	f7fe fdaa 	bl	8001a64 <HAL_GetTick>
 8002f10:	4b07      	ldr	r3, [pc, #28]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8002f12:	1bc0      	subs	r0, r0, r7
 8002f14:	4298      	cmp	r0, r3
 8002f16:	d9f5      	bls.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8002f18:	e7db      	b.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0xca>
 8002f1a:	46c0      	nop			; (mov r8, r8)
 8002f1c:	40021000 	.word	0x40021000
 8002f20:	40007000 	.word	0x40007000
 8002f24:	fffffcff 	.word	0xfffffcff
 8002f28:	efffffff 	.word	0xefffffff
 8002f2c:	fffeffff 	.word	0xfffeffff
 8002f30:	00001388 	.word	0x00001388

08002f34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f34:	b570      	push	{r4, r5, r6, lr}
 8002f36:	0004      	movs	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f38:	6925      	ldr	r5, [r4, #16]
 8002f3a:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f3c:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f3e:	432b      	orrs	r3, r5
 8002f40:	6965      	ldr	r5, [r4, #20]
 8002f42:	69c1      	ldr	r1, [r0, #28]
 8002f44:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f46:	6810      	ldr	r0, [r2, #0]
 8002f48:	4d43      	ldr	r5, [pc, #268]	; (8003058 <UART_SetConfig+0x124>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f4a:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f4c:	4028      	ands	r0, r5
 8002f4e:	4303      	orrs	r3, r0
 8002f50:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f52:	6853      	ldr	r3, [r2, #4]
 8002f54:	4841      	ldr	r0, [pc, #260]	; (800305c <UART_SetConfig+0x128>)
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  tmpreg |= huart->Init.OneBitSampling;
 8002f56:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f58:	4003      	ands	r3, r0
 8002f5a:	68e0      	ldr	r0, [r4, #12]
 8002f5c:	4303      	orrs	r3, r0
 8002f5e:	6053      	str	r3, [r2, #4]
  tmpreg |= huart->Init.OneBitSampling;
 8002f60:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f62:	6890      	ldr	r0, [r2, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8002f64:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f66:	4d3e      	ldr	r5, [pc, #248]	; (8003060 <UART_SetConfig+0x12c>)
 8002f68:	4028      	ands	r0, r5
 8002f6a:	4303      	orrs	r3, r0
 8002f6c:	6093      	str	r3, [r2, #8]
 8002f6e:	2380      	movs	r3, #128	; 0x80


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f70:	483c      	ldr	r0, [pc, #240]	; (8003064 <UART_SetConfig+0x130>)
 8002f72:	021b      	lsls	r3, r3, #8
 8002f74:	4d3c      	ldr	r5, [pc, #240]	; (8003068 <UART_SetConfig+0x134>)
 8002f76:	4282      	cmp	r2, r0
 8002f78:	d110      	bne.n	8002f9c <UART_SetConfig+0x68>
 8002f7a:	2003      	movs	r0, #3
 8002f7c:	4a3b      	ldr	r2, [pc, #236]	; (800306c <UART_SetConfig+0x138>)
 8002f7e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002f80:	4002      	ands	r2, r0
 8002f82:	483b      	ldr	r0, [pc, #236]	; (8003070 <UART_SetConfig+0x13c>)
 8002f84:	5c80      	ldrb	r0, [r0, r2]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f86:	4299      	cmp	r1, r3
 8002f88:	d013      	beq.n	8002fb2 <UART_SetConfig+0x7e>
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 8002f8a:	2808      	cmp	r0, #8
 8002f8c:	d860      	bhi.n	8003050 <UART_SetConfig+0x11c>
 8002f8e:	f7fd f8c5 	bl	800011c <__gnu_thumb1_case_uqi>
 8002f92:	5f40      	.short	0x5f40
 8002f94:	5f555f45 	.word	0x5f555f45
 8002f98:	5f5f      	.short	0x5f5f
 8002f9a:	58          	.byte	0x58
 8002f9b:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f9c:	4835      	ldr	r0, [pc, #212]	; (8003074 <UART_SetConfig+0x140>)
 8002f9e:	4282      	cmp	r2, r0
 8002fa0:	d154      	bne.n	800304c <UART_SetConfig+0x118>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fa2:	4299      	cmp	r1, r3
 8002fa4:	d135      	bne.n	8003012 <UART_SetConfig+0xde>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fa6:	f7ff ff1f 	bl	8002de8 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002faa:	6863      	ldr	r3, [r4, #4]
 8002fac:	0040      	lsls	r0, r0, #1
 8002fae:	085b      	lsrs	r3, r3, #1
 8002fb0:	e00b      	b.n	8002fca <UART_SetConfig+0x96>
    switch (clocksource)
 8002fb2:	2808      	cmp	r0, #8
 8002fb4:	d820      	bhi.n	8002ff8 <UART_SetConfig+0xc4>
 8002fb6:	f7fd f8a7 	bl	8000108 <__gnu_thumb1_case_sqi>
 8002fba:	1ff6      	.short	0x1ff6
 8002fbc:	1f171f05 	.word	0x1f171f05
 8002fc0:	1f1f      	.short	0x1f1f
 8002fc2:	1a          	.byte	0x1a
 8002fc3:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002fc4:	6863      	ldr	r3, [r4, #4]
 8002fc6:	0858      	lsrs	r0, r3, #1
 8002fc8:	4b2b      	ldr	r3, [pc, #172]	; (8003078 <UART_SetConfig+0x144>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002fca:	18c0      	adds	r0, r0, r3
 8002fcc:	6861      	ldr	r1, [r4, #4]
 8002fce:	f7fd f8af 	bl	8000130 <__udivsi3>
 8002fd2:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8002fd4:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fd6:	001a      	movs	r2, r3
 8002fd8:	3a10      	subs	r2, #16
 8002fda:	42aa      	cmp	r2, r5
 8002fdc:	d90f      	bls.n	8002ffe <UART_SetConfig+0xca>
      ret = HAL_ERROR;
 8002fde:	2001      	movs	r0, #1
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8002fe4:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8002fe6:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetSysClockFreq();
 8002fe8:	f7ff fe30 	bl	8002c4c <HAL_RCC_GetSysClockFreq>
 8002fec:	e7dd      	b.n	8002faa <UART_SetConfig+0x76>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002fee:	6863      	ldr	r3, [r4, #4]
 8002ff0:	0858      	lsrs	r0, r3, #1
 8002ff2:	2380      	movs	r3, #128	; 0x80
 8002ff4:	025b      	lsls	r3, r3, #9
 8002ff6:	e7e8      	b.n	8002fca <UART_SetConfig+0x96>
        ret = HAL_ERROR;
 8002ff8:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	e7eb      	b.n	8002fd6 <UART_SetConfig+0xa2>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ffe:	220f      	movs	r2, #15
 8003000:	0019      	movs	r1, r3
 8003002:	4391      	bics	r1, r2
 8003004:	000a      	movs	r2, r1
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003006:	071b      	lsls	r3, r3, #28
      huart->Instance->BRR = brrtemp;
 8003008:	6821      	ldr	r1, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800300a:	0f5b      	lsrs	r3, r3, #29
      huart->Instance->BRR = brrtemp;
 800300c:	4313      	orrs	r3, r2
 800300e:	60cb      	str	r3, [r1, #12]
 8003010:	e7e6      	b.n	8002fe0 <UART_SetConfig+0xac>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003012:	f7ff fee9 	bl	8002de8 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003016:	6863      	ldr	r3, [r4, #4]
 8003018:	085b      	lsrs	r3, r3, #1
 800301a:	e002      	b.n	8003022 <UART_SetConfig+0xee>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800301c:	6863      	ldr	r3, [r4, #4]
 800301e:	0858      	lsrs	r0, r3, #1
 8003020:	4b16      	ldr	r3, [pc, #88]	; (800307c <UART_SetConfig+0x148>)
 8003022:	18c0      	adds	r0, r0, r3
 8003024:	6861      	ldr	r1, [r4, #4]
 8003026:	f7fd f883 	bl	8000130 <__udivsi3>
 800302a:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 800302c:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800302e:	001a      	movs	r2, r3
 8003030:	3a10      	subs	r2, #16
 8003032:	42aa      	cmp	r2, r5
 8003034:	d8d3      	bhi.n	8002fde <UART_SetConfig+0xaa>
      huart->Instance->BRR = usartdiv;
 8003036:	6822      	ldr	r2, [r4, #0]
 8003038:	60d3      	str	r3, [r2, #12]
 800303a:	e7d1      	b.n	8002fe0 <UART_SetConfig+0xac>
        pclk = HAL_RCC_GetSysClockFreq();
 800303c:	f7ff fe06 	bl	8002c4c <HAL_RCC_GetSysClockFreq>
 8003040:	e7e9      	b.n	8003016 <UART_SetConfig+0xe2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003042:	6863      	ldr	r3, [r4, #4]
 8003044:	0858      	lsrs	r0, r3, #1
 8003046:	2380      	movs	r3, #128	; 0x80
 8003048:	021b      	lsls	r3, r3, #8
 800304a:	e7ea      	b.n	8003022 <UART_SetConfig+0xee>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800304c:	4299      	cmp	r1, r3
 800304e:	d0d3      	beq.n	8002ff8 <UART_SetConfig+0xc4>
        ret = HAL_ERROR;
 8003050:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8003052:	2300      	movs	r3, #0
 8003054:	e7eb      	b.n	800302e <UART_SetConfig+0xfa>
 8003056:	46c0      	nop			; (mov r8, r8)
 8003058:	efff69f3 	.word	0xefff69f3
 800305c:	ffffcfff 	.word	0xffffcfff
 8003060:	fffff4ff 	.word	0xfffff4ff
 8003064:	40013800 	.word	0x40013800
 8003068:	0000ffef 	.word	0x0000ffef
 800306c:	40021000 	.word	0x40021000
 8003070:	08004956 	.word	0x08004956
 8003074:	40004400 	.word	0x40004400
 8003078:	00f42400 	.word	0x00f42400
 800307c:	007a1200 	.word	0x007a1200

08003080 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003080:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8003082:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003084:	07da      	lsls	r2, r3, #31
 8003086:	d506      	bpl.n	8003096 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003088:	6801      	ldr	r1, [r0, #0]
 800308a:	4c28      	ldr	r4, [pc, #160]	; (800312c <UART_AdvFeatureConfig+0xac>)
 800308c:	684a      	ldr	r2, [r1, #4]
 800308e:	4022      	ands	r2, r4
 8003090:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8003092:	4322      	orrs	r2, r4
 8003094:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003096:	079a      	lsls	r2, r3, #30
 8003098:	d506      	bpl.n	80030a8 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800309a:	6801      	ldr	r1, [r0, #0]
 800309c:	4c24      	ldr	r4, [pc, #144]	; (8003130 <UART_AdvFeatureConfig+0xb0>)
 800309e:	684a      	ldr	r2, [r1, #4]
 80030a0:	4022      	ands	r2, r4
 80030a2:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80030a4:	4322      	orrs	r2, r4
 80030a6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80030a8:	075a      	lsls	r2, r3, #29
 80030aa:	d506      	bpl.n	80030ba <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80030ac:	6801      	ldr	r1, [r0, #0]
 80030ae:	4c21      	ldr	r4, [pc, #132]	; (8003134 <UART_AdvFeatureConfig+0xb4>)
 80030b0:	684a      	ldr	r2, [r1, #4]
 80030b2:	4022      	ands	r2, r4
 80030b4:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80030b6:	4322      	orrs	r2, r4
 80030b8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80030ba:	071a      	lsls	r2, r3, #28
 80030bc:	d506      	bpl.n	80030cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80030be:	6801      	ldr	r1, [r0, #0]
 80030c0:	4c1d      	ldr	r4, [pc, #116]	; (8003138 <UART_AdvFeatureConfig+0xb8>)
 80030c2:	684a      	ldr	r2, [r1, #4]
 80030c4:	4022      	ands	r2, r4
 80030c6:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80030c8:	4322      	orrs	r2, r4
 80030ca:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80030cc:	06da      	lsls	r2, r3, #27
 80030ce:	d506      	bpl.n	80030de <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80030d0:	6801      	ldr	r1, [r0, #0]
 80030d2:	4c1a      	ldr	r4, [pc, #104]	; (800313c <UART_AdvFeatureConfig+0xbc>)
 80030d4:	688a      	ldr	r2, [r1, #8]
 80030d6:	4022      	ands	r2, r4
 80030d8:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80030da:	4322      	orrs	r2, r4
 80030dc:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80030de:	069a      	lsls	r2, r3, #26
 80030e0:	d506      	bpl.n	80030f0 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80030e2:	6801      	ldr	r1, [r0, #0]
 80030e4:	4c16      	ldr	r4, [pc, #88]	; (8003140 <UART_AdvFeatureConfig+0xc0>)
 80030e6:	688a      	ldr	r2, [r1, #8]
 80030e8:	4022      	ands	r2, r4
 80030ea:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80030ec:	4322      	orrs	r2, r4
 80030ee:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80030f0:	065a      	lsls	r2, r3, #25
 80030f2:	d510      	bpl.n	8003116 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80030f4:	6801      	ldr	r1, [r0, #0]
 80030f6:	4d13      	ldr	r5, [pc, #76]	; (8003144 <UART_AdvFeatureConfig+0xc4>)
 80030f8:	684a      	ldr	r2, [r1, #4]
 80030fa:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80030fc:	402a      	ands	r2, r5
 80030fe:	4322      	orrs	r2, r4
 8003100:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003102:	2280      	movs	r2, #128	; 0x80
 8003104:	0352      	lsls	r2, r2, #13
 8003106:	4294      	cmp	r4, r2
 8003108:	d105      	bne.n	8003116 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800310a:	684a      	ldr	r2, [r1, #4]
 800310c:	4c0e      	ldr	r4, [pc, #56]	; (8003148 <UART_AdvFeatureConfig+0xc8>)
 800310e:	4022      	ands	r2, r4
 8003110:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003112:	4322      	orrs	r2, r4
 8003114:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003116:	061b      	lsls	r3, r3, #24
 8003118:	d506      	bpl.n	8003128 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800311a:	6802      	ldr	r2, [r0, #0]
 800311c:	490b      	ldr	r1, [pc, #44]	; (800314c <UART_AdvFeatureConfig+0xcc>)
 800311e:	6853      	ldr	r3, [r2, #4]
 8003120:	400b      	ands	r3, r1
 8003122:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003124:	430b      	orrs	r3, r1
 8003126:	6053      	str	r3, [r2, #4]
  }
}
 8003128:	bd30      	pop	{r4, r5, pc}
 800312a:	46c0      	nop			; (mov r8, r8)
 800312c:	fffdffff 	.word	0xfffdffff
 8003130:	fffeffff 	.word	0xfffeffff
 8003134:	fffbffff 	.word	0xfffbffff
 8003138:	ffff7fff 	.word	0xffff7fff
 800313c:	ffffefff 	.word	0xffffefff
 8003140:	ffffdfff 	.word	0xffffdfff
 8003144:	ffefffff 	.word	0xffefffff
 8003148:	ff9fffff 	.word	0xff9fffff
 800314c:	fff7ffff 	.word	0xfff7ffff

08003150 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003150:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003152:	2780      	movs	r7, #128	; 0x80
{
 8003154:	0004      	movs	r4, r0
 8003156:	000e      	movs	r6, r1
 8003158:	0015      	movs	r5, r2
 800315a:	9301      	str	r3, [sp, #4]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800315c:	013f      	lsls	r7, r7, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800315e:	6822      	ldr	r2, [r4, #0]
 8003160:	69d3      	ldr	r3, [r2, #28]
 8003162:	4033      	ands	r3, r6
 8003164:	1b9b      	subs	r3, r3, r6
 8003166:	4259      	negs	r1, r3
 8003168:	414b      	adcs	r3, r1
 800316a:	42ab      	cmp	r3, r5
 800316c:	d001      	beq.n	8003172 <UART_WaitOnFlagUntilTimeout+0x22>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 800316e:	2000      	movs	r0, #0
 8003170:	e01c      	b.n	80031ac <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8003172:	9b08      	ldr	r3, [sp, #32]
 8003174:	3301      	adds	r3, #1
 8003176:	d0f3      	beq.n	8003160 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003178:	f7fe fc74 	bl	8001a64 <HAL_GetTick>
 800317c:	9b01      	ldr	r3, [sp, #4]
 800317e:	9a08      	ldr	r2, [sp, #32]
 8003180:	1ac0      	subs	r0, r0, r3
 8003182:	6823      	ldr	r3, [r4, #0]
 8003184:	4290      	cmp	r0, r2
 8003186:	d801      	bhi.n	800318c <UART_WaitOnFlagUntilTimeout+0x3c>
 8003188:	2a00      	cmp	r2, #0
 800318a:	d110      	bne.n	80031ae <UART_WaitOnFlagUntilTimeout+0x5e>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	4913      	ldr	r1, [pc, #76]	; (80031dc <UART_WaitOnFlagUntilTimeout+0x8c>)
 8003190:	400a      	ands	r2, r1
 8003192:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003194:	689a      	ldr	r2, [r3, #8]
 8003196:	31a3      	adds	r1, #163	; 0xa3
 8003198:	31ff      	adds	r1, #255	; 0xff
 800319a:	438a      	bics	r2, r1
 800319c:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800319e:	2320      	movs	r3, #32
 80031a0:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80031a2:	67a3      	str	r3, [r4, #120]	; 0x78
          __HAL_UNLOCK(huart);
 80031a4:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 80031a6:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 80031a8:	3470      	adds	r4, #112	; 0x70
 80031aa:	7023      	strb	r3, [r4, #0]
}
 80031ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80031ae:	2104      	movs	r1, #4
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	420a      	tst	r2, r1
 80031b4:	d0d3      	beq.n	800315e <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80031b6:	69da      	ldr	r2, [r3, #28]
 80031b8:	423a      	tst	r2, r7
 80031ba:	d0d0      	beq.n	800315e <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031bc:	621f      	str	r7, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	4906      	ldr	r1, [pc, #24]	; (80031dc <UART_WaitOnFlagUntilTimeout+0x8c>)
 80031c2:	400a      	ands	r2, r1
 80031c4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031c6:	689a      	ldr	r2, [r3, #8]
 80031c8:	31a3      	adds	r1, #163	; 0xa3
 80031ca:	31ff      	adds	r1, #255	; 0xff
 80031cc:	438a      	bics	r2, r1
 80031ce:	609a      	str	r2, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 80031d0:	2320      	movs	r3, #32
 80031d2:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80031d4:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80031d6:	67e3      	str	r3, [r4, #124]	; 0x7c
 80031d8:	e7e4      	b.n	80031a4 <UART_WaitOnFlagUntilTimeout+0x54>
 80031da:	46c0      	nop			; (mov r8, r8)
 80031dc:	fffffe5f 	.word	0xfffffe5f

080031e0 <UART_CheckIdleState>:
{
 80031e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031e2:	2600      	movs	r6, #0
{
 80031e4:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031e6:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 80031e8:	f7fe fc3c 	bl	8001a64 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80031ec:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80031ee:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	071b      	lsls	r3, r3, #28
 80031f4:	d415      	bmi.n	8003222 <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80031f6:	6823      	ldr	r3, [r4, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	075b      	lsls	r3, r3, #29
 80031fc:	d50a      	bpl.n	8003214 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031fe:	2180      	movs	r1, #128	; 0x80
 8003200:	4b0e      	ldr	r3, [pc, #56]	; (800323c <UART_CheckIdleState+0x5c>)
 8003202:	2200      	movs	r2, #0
 8003204:	9300      	str	r3, [sp, #0]
 8003206:	03c9      	lsls	r1, r1, #15
 8003208:	002b      	movs	r3, r5
 800320a:	0020      	movs	r0, r4
 800320c:	f7ff ffa0 	bl	8003150 <UART_WaitOnFlagUntilTimeout>
 8003210:	2800      	cmp	r0, #0
 8003212:	d111      	bne.n	8003238 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8003214:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8003216:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8003218:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800321a:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 800321c:	3470      	adds	r4, #112	; 0x70
 800321e:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8003220:	e00b      	b.n	800323a <UART_CheckIdleState+0x5a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003222:	2180      	movs	r1, #128	; 0x80
 8003224:	4b05      	ldr	r3, [pc, #20]	; (800323c <UART_CheckIdleState+0x5c>)
 8003226:	0032      	movs	r2, r6
 8003228:	9300      	str	r3, [sp, #0]
 800322a:	0389      	lsls	r1, r1, #14
 800322c:	0003      	movs	r3, r0
 800322e:	0020      	movs	r0, r4
 8003230:	f7ff ff8e 	bl	8003150 <UART_WaitOnFlagUntilTimeout>
 8003234:	2800      	cmp	r0, #0
 8003236:	d0de      	beq.n	80031f6 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8003238:	2003      	movs	r0, #3
}
 800323a:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 800323c:	01ffffff 	.word	0x01ffffff

08003240 <HAL_UART_Init>:
{
 8003240:	b510      	push	{r4, lr}
 8003242:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8003244:	d101      	bne.n	800324a <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8003246:	2001      	movs	r0, #1
}
 8003248:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 800324a:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800324c:	2b00      	cmp	r3, #0
 800324e:	d104      	bne.n	800325a <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8003250:	0002      	movs	r2, r0
 8003252:	3270      	adds	r2, #112	; 0x70
 8003254:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8003256:	f7fe f97f 	bl	8001558 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800325a:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800325c:	2101      	movs	r1, #1
 800325e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003260:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8003262:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003264:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8003266:	438b      	bics	r3, r1
 8003268:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800326a:	f7ff fe63 	bl	8002f34 <UART_SetConfig>
 800326e:	2801      	cmp	r0, #1
 8003270:	d0e9      	beq.n	8003246 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003272:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003274:	2b00      	cmp	r3, #0
 8003276:	d002      	beq.n	800327e <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 8003278:	0020      	movs	r0, r4
 800327a:	f7ff ff01 	bl	8003080 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800327e:	6823      	ldr	r3, [r4, #0]
 8003280:	4907      	ldr	r1, [pc, #28]	; (80032a0 <HAL_UART_Init+0x60>)
 8003282:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8003284:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003286:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003288:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800328a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800328c:	689a      	ldr	r2, [r3, #8]
 800328e:	438a      	bics	r2, r1
 8003290:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8003292:	2201      	movs	r2, #1
 8003294:	6819      	ldr	r1, [r3, #0]
 8003296:	430a      	orrs	r2, r1
 8003298:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800329a:	f7ff ffa1 	bl	80031e0 <UART_CheckIdleState>
 800329e:	e7d3      	b.n	8003248 <HAL_UART_Init+0x8>
 80032a0:	ffffb7ff 	.word	0xffffb7ff

080032a4 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80032a4:	3002      	adds	r0, #2
 80032a6:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 80032a8:	4a02      	ldr	r2, [pc, #8]	; (80032b4 <USB_DisableGlobalInt+0x10>)
 80032aa:	4013      	ands	r3, r2
 80032ac:	87c3      	strh	r3, [r0, #62]	; 0x3e

  return HAL_OK;
}
 80032ae:	2000      	movs	r0, #0
 80032b0:	4770      	bx	lr
 80032b2:	46c0      	nop			; (mov r8, r8)
 80032b4:	0000407f 	.word	0x0000407f

080032b8 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80032b8:	b084      	sub	sp, #16
 80032ba:	9303      	str	r3, [sp, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 80032bc:	2301      	movs	r3, #1
{
 80032be:	9202      	str	r2, [sp, #8]

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 80032c0:	2200      	movs	r2, #0
{
 80032c2:	9101      	str	r1, [sp, #4]
  USBx->CNTR = USB_CNTR_FRES;
 80032c4:	1c81      	adds	r1, r0, #2
 80032c6:	87cb      	strh	r3, [r1, #62]	; 0x3e

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 80032c8:	1d83      	adds	r3, r0, #6

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80032ca:	3050      	adds	r0, #80	; 0x50
  USBx->CNTR = 0;
 80032cc:	87ca      	strh	r2, [r1, #62]	; 0x3e
  USBx->ISTR = 0;
 80032ce:	87da      	strh	r2, [r3, #62]	; 0x3e
  USBx->BTABLE = BTABLE_ADDRESS;
 80032d0:	8002      	strh	r2, [r0, #0]
  USBx->CNTR |= winterruptmask;
 80032d2:	8fcb      	ldrh	r3, [r1, #62]	; 0x3e
 80032d4:	4802      	ldr	r0, [pc, #8]	; (80032e0 <USB_DevInit+0x28>)
 80032d6:	4303      	orrs	r3, r0
 80032d8:	87cb      	strh	r3, [r1, #62]	; 0x3e

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 80032da:	0010      	movs	r0, r2
 80032dc:	b004      	add	sp, #16
 80032de:	4770      	bx	lr
 80032e0:	0000bf80 	.word	0x0000bf80

080032e4 <__errno>:
 80032e4:	4b01      	ldr	r3, [pc, #4]	; (80032ec <__errno+0x8>)
 80032e6:	6818      	ldr	r0, [r3, #0]
 80032e8:	4770      	bx	lr
 80032ea:	46c0      	nop			; (mov r8, r8)
 80032ec:	20000614 	.word	0x20000614

080032f0 <__libc_init_array>:
 80032f0:	b570      	push	{r4, r5, r6, lr}
 80032f2:	2600      	movs	r6, #0
 80032f4:	4d0c      	ldr	r5, [pc, #48]	; (8003328 <__libc_init_array+0x38>)
 80032f6:	4c0d      	ldr	r4, [pc, #52]	; (800332c <__libc_init_array+0x3c>)
 80032f8:	1b64      	subs	r4, r4, r5
 80032fa:	10a4      	asrs	r4, r4, #2
 80032fc:	42a6      	cmp	r6, r4
 80032fe:	d109      	bne.n	8003314 <__libc_init_array+0x24>
 8003300:	2600      	movs	r6, #0
 8003302:	f000 fc29 	bl	8003b58 <_init>
 8003306:	4d0a      	ldr	r5, [pc, #40]	; (8003330 <__libc_init_array+0x40>)
 8003308:	4c0a      	ldr	r4, [pc, #40]	; (8003334 <__libc_init_array+0x44>)
 800330a:	1b64      	subs	r4, r4, r5
 800330c:	10a4      	asrs	r4, r4, #2
 800330e:	42a6      	cmp	r6, r4
 8003310:	d105      	bne.n	800331e <__libc_init_array+0x2e>
 8003312:	bd70      	pop	{r4, r5, r6, pc}
 8003314:	00b3      	lsls	r3, r6, #2
 8003316:	58eb      	ldr	r3, [r5, r3]
 8003318:	4798      	blx	r3
 800331a:	3601      	adds	r6, #1
 800331c:	e7ee      	b.n	80032fc <__libc_init_array+0xc>
 800331e:	00b3      	lsls	r3, r6, #2
 8003320:	58eb      	ldr	r3, [r5, r3]
 8003322:	4798      	blx	r3
 8003324:	3601      	adds	r6, #1
 8003326:	e7f2      	b.n	800330e <__libc_init_array+0x1e>
 8003328:	08004990 	.word	0x08004990
 800332c:	08004990 	.word	0x08004990
 8003330:	08004990 	.word	0x08004990
 8003334:	08004994 	.word	0x08004994

08003338 <memcpy>:
 8003338:	2300      	movs	r3, #0
 800333a:	b510      	push	{r4, lr}
 800333c:	429a      	cmp	r2, r3
 800333e:	d100      	bne.n	8003342 <memcpy+0xa>
 8003340:	bd10      	pop	{r4, pc}
 8003342:	5ccc      	ldrb	r4, [r1, r3]
 8003344:	54c4      	strb	r4, [r0, r3]
 8003346:	3301      	adds	r3, #1
 8003348:	e7f8      	b.n	800333c <memcpy+0x4>

0800334a <memmove>:
 800334a:	b510      	push	{r4, lr}
 800334c:	4288      	cmp	r0, r1
 800334e:	d902      	bls.n	8003356 <memmove+0xc>
 8003350:	188b      	adds	r3, r1, r2
 8003352:	4298      	cmp	r0, r3
 8003354:	d303      	bcc.n	800335e <memmove+0x14>
 8003356:	2300      	movs	r3, #0
 8003358:	e007      	b.n	800336a <memmove+0x20>
 800335a:	5c8b      	ldrb	r3, [r1, r2]
 800335c:	5483      	strb	r3, [r0, r2]
 800335e:	3a01      	subs	r2, #1
 8003360:	d2fb      	bcs.n	800335a <memmove+0x10>
 8003362:	bd10      	pop	{r4, pc}
 8003364:	5ccc      	ldrb	r4, [r1, r3]
 8003366:	54c4      	strb	r4, [r0, r3]
 8003368:	3301      	adds	r3, #1
 800336a:	429a      	cmp	r2, r3
 800336c:	d1fa      	bne.n	8003364 <memmove+0x1a>
 800336e:	e7f8      	b.n	8003362 <memmove+0x18>

08003370 <memset>:
 8003370:	0003      	movs	r3, r0
 8003372:	1812      	adds	r2, r2, r0
 8003374:	4293      	cmp	r3, r2
 8003376:	d100      	bne.n	800337a <memset+0xa>
 8003378:	4770      	bx	lr
 800337a:	7019      	strb	r1, [r3, #0]
 800337c:	3301      	adds	r3, #1
 800337e:	e7f9      	b.n	8003374 <memset+0x4>

08003380 <siprintf>:
 8003380:	b40e      	push	{r1, r2, r3}
 8003382:	b500      	push	{lr}
 8003384:	490b      	ldr	r1, [pc, #44]	; (80033b4 <siprintf+0x34>)
 8003386:	b09c      	sub	sp, #112	; 0x70
 8003388:	ab1d      	add	r3, sp, #116	; 0x74
 800338a:	9002      	str	r0, [sp, #8]
 800338c:	9006      	str	r0, [sp, #24]
 800338e:	9107      	str	r1, [sp, #28]
 8003390:	9104      	str	r1, [sp, #16]
 8003392:	4809      	ldr	r0, [pc, #36]	; (80033b8 <siprintf+0x38>)
 8003394:	4909      	ldr	r1, [pc, #36]	; (80033bc <siprintf+0x3c>)
 8003396:	cb04      	ldmia	r3!, {r2}
 8003398:	9105      	str	r1, [sp, #20]
 800339a:	6800      	ldr	r0, [r0, #0]
 800339c:	a902      	add	r1, sp, #8
 800339e:	9301      	str	r3, [sp, #4]
 80033a0:	f000 f870 	bl	8003484 <_svfiprintf_r>
 80033a4:	2300      	movs	r3, #0
 80033a6:	9a02      	ldr	r2, [sp, #8]
 80033a8:	7013      	strb	r3, [r2, #0]
 80033aa:	b01c      	add	sp, #112	; 0x70
 80033ac:	bc08      	pop	{r3}
 80033ae:	b003      	add	sp, #12
 80033b0:	4718      	bx	r3
 80033b2:	46c0      	nop			; (mov r8, r8)
 80033b4:	7fffffff 	.word	0x7fffffff
 80033b8:	20000614 	.word	0x20000614
 80033bc:	ffff0208 	.word	0xffff0208

080033c0 <__ssputs_r>:
 80033c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033c2:	688e      	ldr	r6, [r1, #8]
 80033c4:	b085      	sub	sp, #20
 80033c6:	0007      	movs	r7, r0
 80033c8:	000c      	movs	r4, r1
 80033ca:	9203      	str	r2, [sp, #12]
 80033cc:	9301      	str	r3, [sp, #4]
 80033ce:	429e      	cmp	r6, r3
 80033d0:	d83c      	bhi.n	800344c <__ssputs_r+0x8c>
 80033d2:	2390      	movs	r3, #144	; 0x90
 80033d4:	898a      	ldrh	r2, [r1, #12]
 80033d6:	00db      	lsls	r3, r3, #3
 80033d8:	421a      	tst	r2, r3
 80033da:	d034      	beq.n	8003446 <__ssputs_r+0x86>
 80033dc:	2503      	movs	r5, #3
 80033de:	6909      	ldr	r1, [r1, #16]
 80033e0:	6823      	ldr	r3, [r4, #0]
 80033e2:	1a5b      	subs	r3, r3, r1
 80033e4:	9302      	str	r3, [sp, #8]
 80033e6:	6963      	ldr	r3, [r4, #20]
 80033e8:	9802      	ldr	r0, [sp, #8]
 80033ea:	435d      	muls	r5, r3
 80033ec:	0feb      	lsrs	r3, r5, #31
 80033ee:	195d      	adds	r5, r3, r5
 80033f0:	9b01      	ldr	r3, [sp, #4]
 80033f2:	106d      	asrs	r5, r5, #1
 80033f4:	3301      	adds	r3, #1
 80033f6:	181b      	adds	r3, r3, r0
 80033f8:	42ab      	cmp	r3, r5
 80033fa:	d900      	bls.n	80033fe <__ssputs_r+0x3e>
 80033fc:	001d      	movs	r5, r3
 80033fe:	0553      	lsls	r3, r2, #21
 8003400:	d532      	bpl.n	8003468 <__ssputs_r+0xa8>
 8003402:	0029      	movs	r1, r5
 8003404:	0038      	movs	r0, r7
 8003406:	f000 fb07 	bl	8003a18 <_malloc_r>
 800340a:	1e06      	subs	r6, r0, #0
 800340c:	d109      	bne.n	8003422 <__ssputs_r+0x62>
 800340e:	230c      	movs	r3, #12
 8003410:	603b      	str	r3, [r7, #0]
 8003412:	2340      	movs	r3, #64	; 0x40
 8003414:	2001      	movs	r0, #1
 8003416:	89a2      	ldrh	r2, [r4, #12]
 8003418:	4240      	negs	r0, r0
 800341a:	4313      	orrs	r3, r2
 800341c:	81a3      	strh	r3, [r4, #12]
 800341e:	b005      	add	sp, #20
 8003420:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003422:	9a02      	ldr	r2, [sp, #8]
 8003424:	6921      	ldr	r1, [r4, #16]
 8003426:	f7ff ff87 	bl	8003338 <memcpy>
 800342a:	89a3      	ldrh	r3, [r4, #12]
 800342c:	4a14      	ldr	r2, [pc, #80]	; (8003480 <__ssputs_r+0xc0>)
 800342e:	401a      	ands	r2, r3
 8003430:	2380      	movs	r3, #128	; 0x80
 8003432:	4313      	orrs	r3, r2
 8003434:	81a3      	strh	r3, [r4, #12]
 8003436:	9b02      	ldr	r3, [sp, #8]
 8003438:	6126      	str	r6, [r4, #16]
 800343a:	18f6      	adds	r6, r6, r3
 800343c:	6026      	str	r6, [r4, #0]
 800343e:	6165      	str	r5, [r4, #20]
 8003440:	9e01      	ldr	r6, [sp, #4]
 8003442:	1aed      	subs	r5, r5, r3
 8003444:	60a5      	str	r5, [r4, #8]
 8003446:	9b01      	ldr	r3, [sp, #4]
 8003448:	429e      	cmp	r6, r3
 800344a:	d900      	bls.n	800344e <__ssputs_r+0x8e>
 800344c:	9e01      	ldr	r6, [sp, #4]
 800344e:	0032      	movs	r2, r6
 8003450:	9903      	ldr	r1, [sp, #12]
 8003452:	6820      	ldr	r0, [r4, #0]
 8003454:	f7ff ff79 	bl	800334a <memmove>
 8003458:	68a3      	ldr	r3, [r4, #8]
 800345a:	2000      	movs	r0, #0
 800345c:	1b9b      	subs	r3, r3, r6
 800345e:	60a3      	str	r3, [r4, #8]
 8003460:	6823      	ldr	r3, [r4, #0]
 8003462:	199e      	adds	r6, r3, r6
 8003464:	6026      	str	r6, [r4, #0]
 8003466:	e7da      	b.n	800341e <__ssputs_r+0x5e>
 8003468:	002a      	movs	r2, r5
 800346a:	0038      	movs	r0, r7
 800346c:	f000 fb32 	bl	8003ad4 <_realloc_r>
 8003470:	1e06      	subs	r6, r0, #0
 8003472:	d1e0      	bne.n	8003436 <__ssputs_r+0x76>
 8003474:	6921      	ldr	r1, [r4, #16]
 8003476:	0038      	movs	r0, r7
 8003478:	f000 fa84 	bl	8003984 <_free_r>
 800347c:	e7c7      	b.n	800340e <__ssputs_r+0x4e>
 800347e:	46c0      	nop			; (mov r8, r8)
 8003480:	fffffb7f 	.word	0xfffffb7f

08003484 <_svfiprintf_r>:
 8003484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003486:	b0a1      	sub	sp, #132	; 0x84
 8003488:	9003      	str	r0, [sp, #12]
 800348a:	001d      	movs	r5, r3
 800348c:	898b      	ldrh	r3, [r1, #12]
 800348e:	000f      	movs	r7, r1
 8003490:	0016      	movs	r6, r2
 8003492:	061b      	lsls	r3, r3, #24
 8003494:	d511      	bpl.n	80034ba <_svfiprintf_r+0x36>
 8003496:	690b      	ldr	r3, [r1, #16]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d10e      	bne.n	80034ba <_svfiprintf_r+0x36>
 800349c:	2140      	movs	r1, #64	; 0x40
 800349e:	f000 fabb 	bl	8003a18 <_malloc_r>
 80034a2:	6038      	str	r0, [r7, #0]
 80034a4:	6138      	str	r0, [r7, #16]
 80034a6:	2800      	cmp	r0, #0
 80034a8:	d105      	bne.n	80034b6 <_svfiprintf_r+0x32>
 80034aa:	230c      	movs	r3, #12
 80034ac:	9a03      	ldr	r2, [sp, #12]
 80034ae:	3801      	subs	r0, #1
 80034b0:	6013      	str	r3, [r2, #0]
 80034b2:	b021      	add	sp, #132	; 0x84
 80034b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034b6:	2340      	movs	r3, #64	; 0x40
 80034b8:	617b      	str	r3, [r7, #20]
 80034ba:	2300      	movs	r3, #0
 80034bc:	ac08      	add	r4, sp, #32
 80034be:	6163      	str	r3, [r4, #20]
 80034c0:	3320      	adds	r3, #32
 80034c2:	7663      	strb	r3, [r4, #25]
 80034c4:	3310      	adds	r3, #16
 80034c6:	76a3      	strb	r3, [r4, #26]
 80034c8:	9507      	str	r5, [sp, #28]
 80034ca:	0035      	movs	r5, r6
 80034cc:	782b      	ldrb	r3, [r5, #0]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <_svfiprintf_r+0x52>
 80034d2:	2b25      	cmp	r3, #37	; 0x25
 80034d4:	d146      	bne.n	8003564 <_svfiprintf_r+0xe0>
 80034d6:	1bab      	subs	r3, r5, r6
 80034d8:	9305      	str	r3, [sp, #20]
 80034da:	d00c      	beq.n	80034f6 <_svfiprintf_r+0x72>
 80034dc:	0032      	movs	r2, r6
 80034de:	0039      	movs	r1, r7
 80034e0:	9803      	ldr	r0, [sp, #12]
 80034e2:	f7ff ff6d 	bl	80033c0 <__ssputs_r>
 80034e6:	1c43      	adds	r3, r0, #1
 80034e8:	d100      	bne.n	80034ec <_svfiprintf_r+0x68>
 80034ea:	e0ae      	b.n	800364a <_svfiprintf_r+0x1c6>
 80034ec:	6962      	ldr	r2, [r4, #20]
 80034ee:	9b05      	ldr	r3, [sp, #20]
 80034f0:	4694      	mov	ip, r2
 80034f2:	4463      	add	r3, ip
 80034f4:	6163      	str	r3, [r4, #20]
 80034f6:	782b      	ldrb	r3, [r5, #0]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d100      	bne.n	80034fe <_svfiprintf_r+0x7a>
 80034fc:	e0a5      	b.n	800364a <_svfiprintf_r+0x1c6>
 80034fe:	2201      	movs	r2, #1
 8003500:	2300      	movs	r3, #0
 8003502:	4252      	negs	r2, r2
 8003504:	6062      	str	r2, [r4, #4]
 8003506:	a904      	add	r1, sp, #16
 8003508:	3254      	adds	r2, #84	; 0x54
 800350a:	1852      	adds	r2, r2, r1
 800350c:	1c6e      	adds	r6, r5, #1
 800350e:	6023      	str	r3, [r4, #0]
 8003510:	60e3      	str	r3, [r4, #12]
 8003512:	60a3      	str	r3, [r4, #8]
 8003514:	7013      	strb	r3, [r2, #0]
 8003516:	65a3      	str	r3, [r4, #88]	; 0x58
 8003518:	7831      	ldrb	r1, [r6, #0]
 800351a:	2205      	movs	r2, #5
 800351c:	4853      	ldr	r0, [pc, #332]	; (800366c <_svfiprintf_r+0x1e8>)
 800351e:	f000 fa25 	bl	800396c <memchr>
 8003522:	1c75      	adds	r5, r6, #1
 8003524:	2800      	cmp	r0, #0
 8003526:	d11f      	bne.n	8003568 <_svfiprintf_r+0xe4>
 8003528:	6822      	ldr	r2, [r4, #0]
 800352a:	06d3      	lsls	r3, r2, #27
 800352c:	d504      	bpl.n	8003538 <_svfiprintf_r+0xb4>
 800352e:	2353      	movs	r3, #83	; 0x53
 8003530:	a904      	add	r1, sp, #16
 8003532:	185b      	adds	r3, r3, r1
 8003534:	2120      	movs	r1, #32
 8003536:	7019      	strb	r1, [r3, #0]
 8003538:	0713      	lsls	r3, r2, #28
 800353a:	d504      	bpl.n	8003546 <_svfiprintf_r+0xc2>
 800353c:	2353      	movs	r3, #83	; 0x53
 800353e:	a904      	add	r1, sp, #16
 8003540:	185b      	adds	r3, r3, r1
 8003542:	212b      	movs	r1, #43	; 0x2b
 8003544:	7019      	strb	r1, [r3, #0]
 8003546:	7833      	ldrb	r3, [r6, #0]
 8003548:	2b2a      	cmp	r3, #42	; 0x2a
 800354a:	d016      	beq.n	800357a <_svfiprintf_r+0xf6>
 800354c:	0035      	movs	r5, r6
 800354e:	2100      	movs	r1, #0
 8003550:	200a      	movs	r0, #10
 8003552:	68e3      	ldr	r3, [r4, #12]
 8003554:	782a      	ldrb	r2, [r5, #0]
 8003556:	1c6e      	adds	r6, r5, #1
 8003558:	3a30      	subs	r2, #48	; 0x30
 800355a:	2a09      	cmp	r2, #9
 800355c:	d94e      	bls.n	80035fc <_svfiprintf_r+0x178>
 800355e:	2900      	cmp	r1, #0
 8003560:	d018      	beq.n	8003594 <_svfiprintf_r+0x110>
 8003562:	e010      	b.n	8003586 <_svfiprintf_r+0x102>
 8003564:	3501      	adds	r5, #1
 8003566:	e7b1      	b.n	80034cc <_svfiprintf_r+0x48>
 8003568:	4b40      	ldr	r3, [pc, #256]	; (800366c <_svfiprintf_r+0x1e8>)
 800356a:	6822      	ldr	r2, [r4, #0]
 800356c:	1ac0      	subs	r0, r0, r3
 800356e:	2301      	movs	r3, #1
 8003570:	4083      	lsls	r3, r0
 8003572:	4313      	orrs	r3, r2
 8003574:	6023      	str	r3, [r4, #0]
 8003576:	002e      	movs	r6, r5
 8003578:	e7ce      	b.n	8003518 <_svfiprintf_r+0x94>
 800357a:	9b07      	ldr	r3, [sp, #28]
 800357c:	1d19      	adds	r1, r3, #4
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	9107      	str	r1, [sp, #28]
 8003582:	2b00      	cmp	r3, #0
 8003584:	db01      	blt.n	800358a <_svfiprintf_r+0x106>
 8003586:	930b      	str	r3, [sp, #44]	; 0x2c
 8003588:	e004      	b.n	8003594 <_svfiprintf_r+0x110>
 800358a:	425b      	negs	r3, r3
 800358c:	60e3      	str	r3, [r4, #12]
 800358e:	2302      	movs	r3, #2
 8003590:	4313      	orrs	r3, r2
 8003592:	6023      	str	r3, [r4, #0]
 8003594:	782b      	ldrb	r3, [r5, #0]
 8003596:	2b2e      	cmp	r3, #46	; 0x2e
 8003598:	d10a      	bne.n	80035b0 <_svfiprintf_r+0x12c>
 800359a:	786b      	ldrb	r3, [r5, #1]
 800359c:	2b2a      	cmp	r3, #42	; 0x2a
 800359e:	d135      	bne.n	800360c <_svfiprintf_r+0x188>
 80035a0:	9b07      	ldr	r3, [sp, #28]
 80035a2:	3502      	adds	r5, #2
 80035a4:	1d1a      	adds	r2, r3, #4
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	9207      	str	r2, [sp, #28]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	db2b      	blt.n	8003606 <_svfiprintf_r+0x182>
 80035ae:	9309      	str	r3, [sp, #36]	; 0x24
 80035b0:	4e2f      	ldr	r6, [pc, #188]	; (8003670 <_svfiprintf_r+0x1ec>)
 80035b2:	7829      	ldrb	r1, [r5, #0]
 80035b4:	2203      	movs	r2, #3
 80035b6:	0030      	movs	r0, r6
 80035b8:	f000 f9d8 	bl	800396c <memchr>
 80035bc:	2800      	cmp	r0, #0
 80035be:	d006      	beq.n	80035ce <_svfiprintf_r+0x14a>
 80035c0:	2340      	movs	r3, #64	; 0x40
 80035c2:	1b80      	subs	r0, r0, r6
 80035c4:	4083      	lsls	r3, r0
 80035c6:	6822      	ldr	r2, [r4, #0]
 80035c8:	3501      	adds	r5, #1
 80035ca:	4313      	orrs	r3, r2
 80035cc:	6023      	str	r3, [r4, #0]
 80035ce:	7829      	ldrb	r1, [r5, #0]
 80035d0:	2206      	movs	r2, #6
 80035d2:	4828      	ldr	r0, [pc, #160]	; (8003674 <_svfiprintf_r+0x1f0>)
 80035d4:	1c6e      	adds	r6, r5, #1
 80035d6:	7621      	strb	r1, [r4, #24]
 80035d8:	f000 f9c8 	bl	800396c <memchr>
 80035dc:	2800      	cmp	r0, #0
 80035de:	d03c      	beq.n	800365a <_svfiprintf_r+0x1d6>
 80035e0:	4b25      	ldr	r3, [pc, #148]	; (8003678 <_svfiprintf_r+0x1f4>)
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d125      	bne.n	8003632 <_svfiprintf_r+0x1ae>
 80035e6:	2207      	movs	r2, #7
 80035e8:	9b07      	ldr	r3, [sp, #28]
 80035ea:	3307      	adds	r3, #7
 80035ec:	4393      	bics	r3, r2
 80035ee:	3308      	adds	r3, #8
 80035f0:	9307      	str	r3, [sp, #28]
 80035f2:	6963      	ldr	r3, [r4, #20]
 80035f4:	9a04      	ldr	r2, [sp, #16]
 80035f6:	189b      	adds	r3, r3, r2
 80035f8:	6163      	str	r3, [r4, #20]
 80035fa:	e766      	b.n	80034ca <_svfiprintf_r+0x46>
 80035fc:	4343      	muls	r3, r0
 80035fe:	2101      	movs	r1, #1
 8003600:	189b      	adds	r3, r3, r2
 8003602:	0035      	movs	r5, r6
 8003604:	e7a6      	b.n	8003554 <_svfiprintf_r+0xd0>
 8003606:	2301      	movs	r3, #1
 8003608:	425b      	negs	r3, r3
 800360a:	e7d0      	b.n	80035ae <_svfiprintf_r+0x12a>
 800360c:	2300      	movs	r3, #0
 800360e:	200a      	movs	r0, #10
 8003610:	001a      	movs	r2, r3
 8003612:	3501      	adds	r5, #1
 8003614:	6063      	str	r3, [r4, #4]
 8003616:	7829      	ldrb	r1, [r5, #0]
 8003618:	1c6e      	adds	r6, r5, #1
 800361a:	3930      	subs	r1, #48	; 0x30
 800361c:	2909      	cmp	r1, #9
 800361e:	d903      	bls.n	8003628 <_svfiprintf_r+0x1a4>
 8003620:	2b00      	cmp	r3, #0
 8003622:	d0c5      	beq.n	80035b0 <_svfiprintf_r+0x12c>
 8003624:	9209      	str	r2, [sp, #36]	; 0x24
 8003626:	e7c3      	b.n	80035b0 <_svfiprintf_r+0x12c>
 8003628:	4342      	muls	r2, r0
 800362a:	2301      	movs	r3, #1
 800362c:	1852      	adds	r2, r2, r1
 800362e:	0035      	movs	r5, r6
 8003630:	e7f1      	b.n	8003616 <_svfiprintf_r+0x192>
 8003632:	ab07      	add	r3, sp, #28
 8003634:	9300      	str	r3, [sp, #0]
 8003636:	003a      	movs	r2, r7
 8003638:	4b10      	ldr	r3, [pc, #64]	; (800367c <_svfiprintf_r+0x1f8>)
 800363a:	0021      	movs	r1, r4
 800363c:	9803      	ldr	r0, [sp, #12]
 800363e:	e000      	b.n	8003642 <_svfiprintf_r+0x1be>
 8003640:	bf00      	nop
 8003642:	9004      	str	r0, [sp, #16]
 8003644:	9b04      	ldr	r3, [sp, #16]
 8003646:	3301      	adds	r3, #1
 8003648:	d1d3      	bne.n	80035f2 <_svfiprintf_r+0x16e>
 800364a:	89bb      	ldrh	r3, [r7, #12]
 800364c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800364e:	065b      	lsls	r3, r3, #25
 8003650:	d400      	bmi.n	8003654 <_svfiprintf_r+0x1d0>
 8003652:	e72e      	b.n	80034b2 <_svfiprintf_r+0x2e>
 8003654:	2001      	movs	r0, #1
 8003656:	4240      	negs	r0, r0
 8003658:	e72b      	b.n	80034b2 <_svfiprintf_r+0x2e>
 800365a:	ab07      	add	r3, sp, #28
 800365c:	9300      	str	r3, [sp, #0]
 800365e:	003a      	movs	r2, r7
 8003660:	4b06      	ldr	r3, [pc, #24]	; (800367c <_svfiprintf_r+0x1f8>)
 8003662:	0021      	movs	r1, r4
 8003664:	9803      	ldr	r0, [sp, #12]
 8003666:	f000 f879 	bl	800375c <_printf_i>
 800366a:	e7ea      	b.n	8003642 <_svfiprintf_r+0x1be>
 800366c:	0800495a 	.word	0x0800495a
 8003670:	08004960 	.word	0x08004960
 8003674:	08004964 	.word	0x08004964
 8003678:	00000000 	.word	0x00000000
 800367c:	080033c1 	.word	0x080033c1

08003680 <_printf_common>:
 8003680:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003682:	0015      	movs	r5, r2
 8003684:	9301      	str	r3, [sp, #4]
 8003686:	688a      	ldr	r2, [r1, #8]
 8003688:	690b      	ldr	r3, [r1, #16]
 800368a:	9000      	str	r0, [sp, #0]
 800368c:	000c      	movs	r4, r1
 800368e:	4293      	cmp	r3, r2
 8003690:	da00      	bge.n	8003694 <_printf_common+0x14>
 8003692:	0013      	movs	r3, r2
 8003694:	0022      	movs	r2, r4
 8003696:	602b      	str	r3, [r5, #0]
 8003698:	3243      	adds	r2, #67	; 0x43
 800369a:	7812      	ldrb	r2, [r2, #0]
 800369c:	2a00      	cmp	r2, #0
 800369e:	d001      	beq.n	80036a4 <_printf_common+0x24>
 80036a0:	3301      	adds	r3, #1
 80036a2:	602b      	str	r3, [r5, #0]
 80036a4:	6823      	ldr	r3, [r4, #0]
 80036a6:	069b      	lsls	r3, r3, #26
 80036a8:	d502      	bpl.n	80036b0 <_printf_common+0x30>
 80036aa:	682b      	ldr	r3, [r5, #0]
 80036ac:	3302      	adds	r3, #2
 80036ae:	602b      	str	r3, [r5, #0]
 80036b0:	2706      	movs	r7, #6
 80036b2:	6823      	ldr	r3, [r4, #0]
 80036b4:	401f      	ands	r7, r3
 80036b6:	d027      	beq.n	8003708 <_printf_common+0x88>
 80036b8:	0023      	movs	r3, r4
 80036ba:	3343      	adds	r3, #67	; 0x43
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	1e5a      	subs	r2, r3, #1
 80036c0:	4193      	sbcs	r3, r2
 80036c2:	6822      	ldr	r2, [r4, #0]
 80036c4:	0692      	lsls	r2, r2, #26
 80036c6:	d430      	bmi.n	800372a <_printf_common+0xaa>
 80036c8:	0022      	movs	r2, r4
 80036ca:	9901      	ldr	r1, [sp, #4]
 80036cc:	3243      	adds	r2, #67	; 0x43
 80036ce:	9800      	ldr	r0, [sp, #0]
 80036d0:	9e08      	ldr	r6, [sp, #32]
 80036d2:	47b0      	blx	r6
 80036d4:	1c43      	adds	r3, r0, #1
 80036d6:	d025      	beq.n	8003724 <_printf_common+0xa4>
 80036d8:	2306      	movs	r3, #6
 80036da:	6820      	ldr	r0, [r4, #0]
 80036dc:	682a      	ldr	r2, [r5, #0]
 80036de:	68e1      	ldr	r1, [r4, #12]
 80036e0:	4003      	ands	r3, r0
 80036e2:	2500      	movs	r5, #0
 80036e4:	2b04      	cmp	r3, #4
 80036e6:	d103      	bne.n	80036f0 <_printf_common+0x70>
 80036e8:	1a8d      	subs	r5, r1, r2
 80036ea:	43eb      	mvns	r3, r5
 80036ec:	17db      	asrs	r3, r3, #31
 80036ee:	401d      	ands	r5, r3
 80036f0:	68a3      	ldr	r3, [r4, #8]
 80036f2:	6922      	ldr	r2, [r4, #16]
 80036f4:	4293      	cmp	r3, r2
 80036f6:	dd01      	ble.n	80036fc <_printf_common+0x7c>
 80036f8:	1a9b      	subs	r3, r3, r2
 80036fa:	18ed      	adds	r5, r5, r3
 80036fc:	2700      	movs	r7, #0
 80036fe:	42bd      	cmp	r5, r7
 8003700:	d120      	bne.n	8003744 <_printf_common+0xc4>
 8003702:	2000      	movs	r0, #0
 8003704:	e010      	b.n	8003728 <_printf_common+0xa8>
 8003706:	3701      	adds	r7, #1
 8003708:	68e3      	ldr	r3, [r4, #12]
 800370a:	682a      	ldr	r2, [r5, #0]
 800370c:	1a9b      	subs	r3, r3, r2
 800370e:	42bb      	cmp	r3, r7
 8003710:	ddd2      	ble.n	80036b8 <_printf_common+0x38>
 8003712:	0022      	movs	r2, r4
 8003714:	2301      	movs	r3, #1
 8003716:	3219      	adds	r2, #25
 8003718:	9901      	ldr	r1, [sp, #4]
 800371a:	9800      	ldr	r0, [sp, #0]
 800371c:	9e08      	ldr	r6, [sp, #32]
 800371e:	47b0      	blx	r6
 8003720:	1c43      	adds	r3, r0, #1
 8003722:	d1f0      	bne.n	8003706 <_printf_common+0x86>
 8003724:	2001      	movs	r0, #1
 8003726:	4240      	negs	r0, r0
 8003728:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800372a:	2030      	movs	r0, #48	; 0x30
 800372c:	18e1      	adds	r1, r4, r3
 800372e:	3143      	adds	r1, #67	; 0x43
 8003730:	7008      	strb	r0, [r1, #0]
 8003732:	0021      	movs	r1, r4
 8003734:	1c5a      	adds	r2, r3, #1
 8003736:	3145      	adds	r1, #69	; 0x45
 8003738:	7809      	ldrb	r1, [r1, #0]
 800373a:	18a2      	adds	r2, r4, r2
 800373c:	3243      	adds	r2, #67	; 0x43
 800373e:	3302      	adds	r3, #2
 8003740:	7011      	strb	r1, [r2, #0]
 8003742:	e7c1      	b.n	80036c8 <_printf_common+0x48>
 8003744:	0022      	movs	r2, r4
 8003746:	2301      	movs	r3, #1
 8003748:	321a      	adds	r2, #26
 800374a:	9901      	ldr	r1, [sp, #4]
 800374c:	9800      	ldr	r0, [sp, #0]
 800374e:	9e08      	ldr	r6, [sp, #32]
 8003750:	47b0      	blx	r6
 8003752:	1c43      	adds	r3, r0, #1
 8003754:	d0e6      	beq.n	8003724 <_printf_common+0xa4>
 8003756:	3701      	adds	r7, #1
 8003758:	e7d1      	b.n	80036fe <_printf_common+0x7e>
	...

0800375c <_printf_i>:
 800375c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800375e:	b089      	sub	sp, #36	; 0x24
 8003760:	9204      	str	r2, [sp, #16]
 8003762:	000a      	movs	r2, r1
 8003764:	3243      	adds	r2, #67	; 0x43
 8003766:	9305      	str	r3, [sp, #20]
 8003768:	9003      	str	r0, [sp, #12]
 800376a:	9202      	str	r2, [sp, #8]
 800376c:	7e0a      	ldrb	r2, [r1, #24]
 800376e:	000c      	movs	r4, r1
 8003770:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003772:	2a6e      	cmp	r2, #110	; 0x6e
 8003774:	d100      	bne.n	8003778 <_printf_i+0x1c>
 8003776:	e086      	b.n	8003886 <_printf_i+0x12a>
 8003778:	d81f      	bhi.n	80037ba <_printf_i+0x5e>
 800377a:	2a63      	cmp	r2, #99	; 0x63
 800377c:	d033      	beq.n	80037e6 <_printf_i+0x8a>
 800377e:	d808      	bhi.n	8003792 <_printf_i+0x36>
 8003780:	2a00      	cmp	r2, #0
 8003782:	d100      	bne.n	8003786 <_printf_i+0x2a>
 8003784:	e08c      	b.n	80038a0 <_printf_i+0x144>
 8003786:	2a58      	cmp	r2, #88	; 0x58
 8003788:	d04d      	beq.n	8003826 <_printf_i+0xca>
 800378a:	0025      	movs	r5, r4
 800378c:	3542      	adds	r5, #66	; 0x42
 800378e:	702a      	strb	r2, [r5, #0]
 8003790:	e030      	b.n	80037f4 <_printf_i+0x98>
 8003792:	2a64      	cmp	r2, #100	; 0x64
 8003794:	d001      	beq.n	800379a <_printf_i+0x3e>
 8003796:	2a69      	cmp	r2, #105	; 0x69
 8003798:	d1f7      	bne.n	800378a <_printf_i+0x2e>
 800379a:	6819      	ldr	r1, [r3, #0]
 800379c:	6825      	ldr	r5, [r4, #0]
 800379e:	1d0a      	adds	r2, r1, #4
 80037a0:	0628      	lsls	r0, r5, #24
 80037a2:	d529      	bpl.n	80037f8 <_printf_i+0x9c>
 80037a4:	6808      	ldr	r0, [r1, #0]
 80037a6:	601a      	str	r2, [r3, #0]
 80037a8:	2800      	cmp	r0, #0
 80037aa:	da03      	bge.n	80037b4 <_printf_i+0x58>
 80037ac:	232d      	movs	r3, #45	; 0x2d
 80037ae:	9a02      	ldr	r2, [sp, #8]
 80037b0:	4240      	negs	r0, r0
 80037b2:	7013      	strb	r3, [r2, #0]
 80037b4:	4e6b      	ldr	r6, [pc, #428]	; (8003964 <_printf_i+0x208>)
 80037b6:	270a      	movs	r7, #10
 80037b8:	e04f      	b.n	800385a <_printf_i+0xfe>
 80037ba:	2a73      	cmp	r2, #115	; 0x73
 80037bc:	d074      	beq.n	80038a8 <_printf_i+0x14c>
 80037be:	d808      	bhi.n	80037d2 <_printf_i+0x76>
 80037c0:	2a6f      	cmp	r2, #111	; 0x6f
 80037c2:	d01f      	beq.n	8003804 <_printf_i+0xa8>
 80037c4:	2a70      	cmp	r2, #112	; 0x70
 80037c6:	d1e0      	bne.n	800378a <_printf_i+0x2e>
 80037c8:	2220      	movs	r2, #32
 80037ca:	6809      	ldr	r1, [r1, #0]
 80037cc:	430a      	orrs	r2, r1
 80037ce:	6022      	str	r2, [r4, #0]
 80037d0:	e003      	b.n	80037da <_printf_i+0x7e>
 80037d2:	2a75      	cmp	r2, #117	; 0x75
 80037d4:	d016      	beq.n	8003804 <_printf_i+0xa8>
 80037d6:	2a78      	cmp	r2, #120	; 0x78
 80037d8:	d1d7      	bne.n	800378a <_printf_i+0x2e>
 80037da:	0022      	movs	r2, r4
 80037dc:	2178      	movs	r1, #120	; 0x78
 80037de:	3245      	adds	r2, #69	; 0x45
 80037e0:	7011      	strb	r1, [r2, #0]
 80037e2:	4e61      	ldr	r6, [pc, #388]	; (8003968 <_printf_i+0x20c>)
 80037e4:	e022      	b.n	800382c <_printf_i+0xd0>
 80037e6:	0025      	movs	r5, r4
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	3542      	adds	r5, #66	; 0x42
 80037ec:	1d11      	adds	r1, r2, #4
 80037ee:	6019      	str	r1, [r3, #0]
 80037f0:	6813      	ldr	r3, [r2, #0]
 80037f2:	702b      	strb	r3, [r5, #0]
 80037f4:	2301      	movs	r3, #1
 80037f6:	e065      	b.n	80038c4 <_printf_i+0x168>
 80037f8:	6808      	ldr	r0, [r1, #0]
 80037fa:	601a      	str	r2, [r3, #0]
 80037fc:	0669      	lsls	r1, r5, #25
 80037fe:	d5d3      	bpl.n	80037a8 <_printf_i+0x4c>
 8003800:	b200      	sxth	r0, r0
 8003802:	e7d1      	b.n	80037a8 <_printf_i+0x4c>
 8003804:	6819      	ldr	r1, [r3, #0]
 8003806:	6825      	ldr	r5, [r4, #0]
 8003808:	1d08      	adds	r0, r1, #4
 800380a:	6018      	str	r0, [r3, #0]
 800380c:	6808      	ldr	r0, [r1, #0]
 800380e:	062e      	lsls	r6, r5, #24
 8003810:	d505      	bpl.n	800381e <_printf_i+0xc2>
 8003812:	4e54      	ldr	r6, [pc, #336]	; (8003964 <_printf_i+0x208>)
 8003814:	2708      	movs	r7, #8
 8003816:	2a6f      	cmp	r2, #111	; 0x6f
 8003818:	d01b      	beq.n	8003852 <_printf_i+0xf6>
 800381a:	270a      	movs	r7, #10
 800381c:	e019      	b.n	8003852 <_printf_i+0xf6>
 800381e:	066d      	lsls	r5, r5, #25
 8003820:	d5f7      	bpl.n	8003812 <_printf_i+0xb6>
 8003822:	b280      	uxth	r0, r0
 8003824:	e7f5      	b.n	8003812 <_printf_i+0xb6>
 8003826:	3145      	adds	r1, #69	; 0x45
 8003828:	4e4e      	ldr	r6, [pc, #312]	; (8003964 <_printf_i+0x208>)
 800382a:	700a      	strb	r2, [r1, #0]
 800382c:	6818      	ldr	r0, [r3, #0]
 800382e:	6822      	ldr	r2, [r4, #0]
 8003830:	1d01      	adds	r1, r0, #4
 8003832:	6800      	ldr	r0, [r0, #0]
 8003834:	6019      	str	r1, [r3, #0]
 8003836:	0615      	lsls	r5, r2, #24
 8003838:	d521      	bpl.n	800387e <_printf_i+0x122>
 800383a:	07d3      	lsls	r3, r2, #31
 800383c:	d502      	bpl.n	8003844 <_printf_i+0xe8>
 800383e:	2320      	movs	r3, #32
 8003840:	431a      	orrs	r2, r3
 8003842:	6022      	str	r2, [r4, #0]
 8003844:	2710      	movs	r7, #16
 8003846:	2800      	cmp	r0, #0
 8003848:	d103      	bne.n	8003852 <_printf_i+0xf6>
 800384a:	2320      	movs	r3, #32
 800384c:	6822      	ldr	r2, [r4, #0]
 800384e:	439a      	bics	r2, r3
 8003850:	6022      	str	r2, [r4, #0]
 8003852:	0023      	movs	r3, r4
 8003854:	2200      	movs	r2, #0
 8003856:	3343      	adds	r3, #67	; 0x43
 8003858:	701a      	strb	r2, [r3, #0]
 800385a:	6863      	ldr	r3, [r4, #4]
 800385c:	60a3      	str	r3, [r4, #8]
 800385e:	2b00      	cmp	r3, #0
 8003860:	db58      	blt.n	8003914 <_printf_i+0x1b8>
 8003862:	2204      	movs	r2, #4
 8003864:	6821      	ldr	r1, [r4, #0]
 8003866:	4391      	bics	r1, r2
 8003868:	6021      	str	r1, [r4, #0]
 800386a:	2800      	cmp	r0, #0
 800386c:	d154      	bne.n	8003918 <_printf_i+0x1bc>
 800386e:	9d02      	ldr	r5, [sp, #8]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d05a      	beq.n	800392a <_printf_i+0x1ce>
 8003874:	0025      	movs	r5, r4
 8003876:	7833      	ldrb	r3, [r6, #0]
 8003878:	3542      	adds	r5, #66	; 0x42
 800387a:	702b      	strb	r3, [r5, #0]
 800387c:	e055      	b.n	800392a <_printf_i+0x1ce>
 800387e:	0655      	lsls	r5, r2, #25
 8003880:	d5db      	bpl.n	800383a <_printf_i+0xde>
 8003882:	b280      	uxth	r0, r0
 8003884:	e7d9      	b.n	800383a <_printf_i+0xde>
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	680d      	ldr	r5, [r1, #0]
 800388a:	1d10      	adds	r0, r2, #4
 800388c:	6949      	ldr	r1, [r1, #20]
 800388e:	6018      	str	r0, [r3, #0]
 8003890:	6813      	ldr	r3, [r2, #0]
 8003892:	062e      	lsls	r6, r5, #24
 8003894:	d501      	bpl.n	800389a <_printf_i+0x13e>
 8003896:	6019      	str	r1, [r3, #0]
 8003898:	e002      	b.n	80038a0 <_printf_i+0x144>
 800389a:	066d      	lsls	r5, r5, #25
 800389c:	d5fb      	bpl.n	8003896 <_printf_i+0x13a>
 800389e:	8019      	strh	r1, [r3, #0]
 80038a0:	2300      	movs	r3, #0
 80038a2:	9d02      	ldr	r5, [sp, #8]
 80038a4:	6123      	str	r3, [r4, #16]
 80038a6:	e04f      	b.n	8003948 <_printf_i+0x1ec>
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	1d11      	adds	r1, r2, #4
 80038ac:	6019      	str	r1, [r3, #0]
 80038ae:	6815      	ldr	r5, [r2, #0]
 80038b0:	2100      	movs	r1, #0
 80038b2:	6862      	ldr	r2, [r4, #4]
 80038b4:	0028      	movs	r0, r5
 80038b6:	f000 f859 	bl	800396c <memchr>
 80038ba:	2800      	cmp	r0, #0
 80038bc:	d001      	beq.n	80038c2 <_printf_i+0x166>
 80038be:	1b40      	subs	r0, r0, r5
 80038c0:	6060      	str	r0, [r4, #4]
 80038c2:	6863      	ldr	r3, [r4, #4]
 80038c4:	6123      	str	r3, [r4, #16]
 80038c6:	2300      	movs	r3, #0
 80038c8:	9a02      	ldr	r2, [sp, #8]
 80038ca:	7013      	strb	r3, [r2, #0]
 80038cc:	e03c      	b.n	8003948 <_printf_i+0x1ec>
 80038ce:	6923      	ldr	r3, [r4, #16]
 80038d0:	002a      	movs	r2, r5
 80038d2:	9904      	ldr	r1, [sp, #16]
 80038d4:	9803      	ldr	r0, [sp, #12]
 80038d6:	9d05      	ldr	r5, [sp, #20]
 80038d8:	47a8      	blx	r5
 80038da:	1c43      	adds	r3, r0, #1
 80038dc:	d03e      	beq.n	800395c <_printf_i+0x200>
 80038de:	6823      	ldr	r3, [r4, #0]
 80038e0:	079b      	lsls	r3, r3, #30
 80038e2:	d415      	bmi.n	8003910 <_printf_i+0x1b4>
 80038e4:	9b07      	ldr	r3, [sp, #28]
 80038e6:	68e0      	ldr	r0, [r4, #12]
 80038e8:	4298      	cmp	r0, r3
 80038ea:	da39      	bge.n	8003960 <_printf_i+0x204>
 80038ec:	0018      	movs	r0, r3
 80038ee:	e037      	b.n	8003960 <_printf_i+0x204>
 80038f0:	0022      	movs	r2, r4
 80038f2:	2301      	movs	r3, #1
 80038f4:	3219      	adds	r2, #25
 80038f6:	9904      	ldr	r1, [sp, #16]
 80038f8:	9803      	ldr	r0, [sp, #12]
 80038fa:	9e05      	ldr	r6, [sp, #20]
 80038fc:	47b0      	blx	r6
 80038fe:	1c43      	adds	r3, r0, #1
 8003900:	d02c      	beq.n	800395c <_printf_i+0x200>
 8003902:	3501      	adds	r5, #1
 8003904:	68e3      	ldr	r3, [r4, #12]
 8003906:	9a07      	ldr	r2, [sp, #28]
 8003908:	1a9b      	subs	r3, r3, r2
 800390a:	42ab      	cmp	r3, r5
 800390c:	dcf0      	bgt.n	80038f0 <_printf_i+0x194>
 800390e:	e7e9      	b.n	80038e4 <_printf_i+0x188>
 8003910:	2500      	movs	r5, #0
 8003912:	e7f7      	b.n	8003904 <_printf_i+0x1a8>
 8003914:	2800      	cmp	r0, #0
 8003916:	d0ad      	beq.n	8003874 <_printf_i+0x118>
 8003918:	9d02      	ldr	r5, [sp, #8]
 800391a:	0039      	movs	r1, r7
 800391c:	f7fc fc8e 	bl	800023c <__aeabi_uidivmod>
 8003920:	5c73      	ldrb	r3, [r6, r1]
 8003922:	3d01      	subs	r5, #1
 8003924:	702b      	strb	r3, [r5, #0]
 8003926:	2800      	cmp	r0, #0
 8003928:	d1f7      	bne.n	800391a <_printf_i+0x1be>
 800392a:	2f08      	cmp	r7, #8
 800392c:	d109      	bne.n	8003942 <_printf_i+0x1e6>
 800392e:	6823      	ldr	r3, [r4, #0]
 8003930:	07db      	lsls	r3, r3, #31
 8003932:	d506      	bpl.n	8003942 <_printf_i+0x1e6>
 8003934:	6863      	ldr	r3, [r4, #4]
 8003936:	6922      	ldr	r2, [r4, #16]
 8003938:	4293      	cmp	r3, r2
 800393a:	dc02      	bgt.n	8003942 <_printf_i+0x1e6>
 800393c:	2330      	movs	r3, #48	; 0x30
 800393e:	3d01      	subs	r5, #1
 8003940:	702b      	strb	r3, [r5, #0]
 8003942:	9b02      	ldr	r3, [sp, #8]
 8003944:	1b5b      	subs	r3, r3, r5
 8003946:	6123      	str	r3, [r4, #16]
 8003948:	9b05      	ldr	r3, [sp, #20]
 800394a:	aa07      	add	r2, sp, #28
 800394c:	9300      	str	r3, [sp, #0]
 800394e:	0021      	movs	r1, r4
 8003950:	9b04      	ldr	r3, [sp, #16]
 8003952:	9803      	ldr	r0, [sp, #12]
 8003954:	f7ff fe94 	bl	8003680 <_printf_common>
 8003958:	1c43      	adds	r3, r0, #1
 800395a:	d1b8      	bne.n	80038ce <_printf_i+0x172>
 800395c:	2001      	movs	r0, #1
 800395e:	4240      	negs	r0, r0
 8003960:	b009      	add	sp, #36	; 0x24
 8003962:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003964:	0800496b 	.word	0x0800496b
 8003968:	0800497c 	.word	0x0800497c

0800396c <memchr>:
 800396c:	b2c9      	uxtb	r1, r1
 800396e:	1882      	adds	r2, r0, r2
 8003970:	4290      	cmp	r0, r2
 8003972:	d101      	bne.n	8003978 <memchr+0xc>
 8003974:	2000      	movs	r0, #0
 8003976:	4770      	bx	lr
 8003978:	7803      	ldrb	r3, [r0, #0]
 800397a:	428b      	cmp	r3, r1
 800397c:	d0fb      	beq.n	8003976 <memchr+0xa>
 800397e:	3001      	adds	r0, #1
 8003980:	e7f6      	b.n	8003970 <memchr+0x4>
	...

08003984 <_free_r>:
 8003984:	b570      	push	{r4, r5, r6, lr}
 8003986:	0005      	movs	r5, r0
 8003988:	2900      	cmp	r1, #0
 800398a:	d010      	beq.n	80039ae <_free_r+0x2a>
 800398c:	1f0c      	subs	r4, r1, #4
 800398e:	6823      	ldr	r3, [r4, #0]
 8003990:	2b00      	cmp	r3, #0
 8003992:	da00      	bge.n	8003996 <_free_r+0x12>
 8003994:	18e4      	adds	r4, r4, r3
 8003996:	0028      	movs	r0, r5
 8003998:	f000 f8d4 	bl	8003b44 <__malloc_lock>
 800399c:	4a1d      	ldr	r2, [pc, #116]	; (8003a14 <_free_r+0x90>)
 800399e:	6813      	ldr	r3, [r2, #0]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d105      	bne.n	80039b0 <_free_r+0x2c>
 80039a4:	6063      	str	r3, [r4, #4]
 80039a6:	6014      	str	r4, [r2, #0]
 80039a8:	0028      	movs	r0, r5
 80039aa:	f000 f8cc 	bl	8003b46 <__malloc_unlock>
 80039ae:	bd70      	pop	{r4, r5, r6, pc}
 80039b0:	42a3      	cmp	r3, r4
 80039b2:	d909      	bls.n	80039c8 <_free_r+0x44>
 80039b4:	6821      	ldr	r1, [r4, #0]
 80039b6:	1860      	adds	r0, r4, r1
 80039b8:	4283      	cmp	r3, r0
 80039ba:	d1f3      	bne.n	80039a4 <_free_r+0x20>
 80039bc:	6818      	ldr	r0, [r3, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	1841      	adds	r1, r0, r1
 80039c2:	6021      	str	r1, [r4, #0]
 80039c4:	e7ee      	b.n	80039a4 <_free_r+0x20>
 80039c6:	0013      	movs	r3, r2
 80039c8:	685a      	ldr	r2, [r3, #4]
 80039ca:	2a00      	cmp	r2, #0
 80039cc:	d001      	beq.n	80039d2 <_free_r+0x4e>
 80039ce:	42a2      	cmp	r2, r4
 80039d0:	d9f9      	bls.n	80039c6 <_free_r+0x42>
 80039d2:	6819      	ldr	r1, [r3, #0]
 80039d4:	1858      	adds	r0, r3, r1
 80039d6:	42a0      	cmp	r0, r4
 80039d8:	d10b      	bne.n	80039f2 <_free_r+0x6e>
 80039da:	6820      	ldr	r0, [r4, #0]
 80039dc:	1809      	adds	r1, r1, r0
 80039de:	1858      	adds	r0, r3, r1
 80039e0:	6019      	str	r1, [r3, #0]
 80039e2:	4282      	cmp	r2, r0
 80039e4:	d1e0      	bne.n	80039a8 <_free_r+0x24>
 80039e6:	6810      	ldr	r0, [r2, #0]
 80039e8:	6852      	ldr	r2, [r2, #4]
 80039ea:	1841      	adds	r1, r0, r1
 80039ec:	6019      	str	r1, [r3, #0]
 80039ee:	605a      	str	r2, [r3, #4]
 80039f0:	e7da      	b.n	80039a8 <_free_r+0x24>
 80039f2:	42a0      	cmp	r0, r4
 80039f4:	d902      	bls.n	80039fc <_free_r+0x78>
 80039f6:	230c      	movs	r3, #12
 80039f8:	602b      	str	r3, [r5, #0]
 80039fa:	e7d5      	b.n	80039a8 <_free_r+0x24>
 80039fc:	6821      	ldr	r1, [r4, #0]
 80039fe:	1860      	adds	r0, r4, r1
 8003a00:	4282      	cmp	r2, r0
 8003a02:	d103      	bne.n	8003a0c <_free_r+0x88>
 8003a04:	6810      	ldr	r0, [r2, #0]
 8003a06:	6852      	ldr	r2, [r2, #4]
 8003a08:	1841      	adds	r1, r0, r1
 8003a0a:	6021      	str	r1, [r4, #0]
 8003a0c:	6062      	str	r2, [r4, #4]
 8003a0e:	605c      	str	r4, [r3, #4]
 8003a10:	e7ca      	b.n	80039a8 <_free_r+0x24>
 8003a12:	46c0      	nop			; (mov r8, r8)
 8003a14:	20000aa0 	.word	0x20000aa0

08003a18 <_malloc_r>:
 8003a18:	2303      	movs	r3, #3
 8003a1a:	b570      	push	{r4, r5, r6, lr}
 8003a1c:	1ccd      	adds	r5, r1, #3
 8003a1e:	439d      	bics	r5, r3
 8003a20:	3508      	adds	r5, #8
 8003a22:	0006      	movs	r6, r0
 8003a24:	2d0c      	cmp	r5, #12
 8003a26:	d21e      	bcs.n	8003a66 <_malloc_r+0x4e>
 8003a28:	250c      	movs	r5, #12
 8003a2a:	42a9      	cmp	r1, r5
 8003a2c:	d81d      	bhi.n	8003a6a <_malloc_r+0x52>
 8003a2e:	0030      	movs	r0, r6
 8003a30:	f000 f888 	bl	8003b44 <__malloc_lock>
 8003a34:	4a25      	ldr	r2, [pc, #148]	; (8003acc <_malloc_r+0xb4>)
 8003a36:	6814      	ldr	r4, [r2, #0]
 8003a38:	0021      	movs	r1, r4
 8003a3a:	2900      	cmp	r1, #0
 8003a3c:	d119      	bne.n	8003a72 <_malloc_r+0x5a>
 8003a3e:	4c24      	ldr	r4, [pc, #144]	; (8003ad0 <_malloc_r+0xb8>)
 8003a40:	6823      	ldr	r3, [r4, #0]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d103      	bne.n	8003a4e <_malloc_r+0x36>
 8003a46:	0030      	movs	r0, r6
 8003a48:	f000 f86a 	bl	8003b20 <_sbrk_r>
 8003a4c:	6020      	str	r0, [r4, #0]
 8003a4e:	0029      	movs	r1, r5
 8003a50:	0030      	movs	r0, r6
 8003a52:	f000 f865 	bl	8003b20 <_sbrk_r>
 8003a56:	1c43      	adds	r3, r0, #1
 8003a58:	d12b      	bne.n	8003ab2 <_malloc_r+0x9a>
 8003a5a:	230c      	movs	r3, #12
 8003a5c:	0030      	movs	r0, r6
 8003a5e:	6033      	str	r3, [r6, #0]
 8003a60:	f000 f871 	bl	8003b46 <__malloc_unlock>
 8003a64:	e003      	b.n	8003a6e <_malloc_r+0x56>
 8003a66:	2d00      	cmp	r5, #0
 8003a68:	dadf      	bge.n	8003a2a <_malloc_r+0x12>
 8003a6a:	230c      	movs	r3, #12
 8003a6c:	6033      	str	r3, [r6, #0]
 8003a6e:	2000      	movs	r0, #0
 8003a70:	bd70      	pop	{r4, r5, r6, pc}
 8003a72:	680b      	ldr	r3, [r1, #0]
 8003a74:	1b5b      	subs	r3, r3, r5
 8003a76:	d419      	bmi.n	8003aac <_malloc_r+0x94>
 8003a78:	2b0b      	cmp	r3, #11
 8003a7a:	d903      	bls.n	8003a84 <_malloc_r+0x6c>
 8003a7c:	600b      	str	r3, [r1, #0]
 8003a7e:	18cc      	adds	r4, r1, r3
 8003a80:	6025      	str	r5, [r4, #0]
 8003a82:	e003      	b.n	8003a8c <_malloc_r+0x74>
 8003a84:	684b      	ldr	r3, [r1, #4]
 8003a86:	428c      	cmp	r4, r1
 8003a88:	d10d      	bne.n	8003aa6 <_malloc_r+0x8e>
 8003a8a:	6013      	str	r3, [r2, #0]
 8003a8c:	0030      	movs	r0, r6
 8003a8e:	f000 f85a 	bl	8003b46 <__malloc_unlock>
 8003a92:	0020      	movs	r0, r4
 8003a94:	2207      	movs	r2, #7
 8003a96:	300b      	adds	r0, #11
 8003a98:	1d23      	adds	r3, r4, #4
 8003a9a:	4390      	bics	r0, r2
 8003a9c:	1ac3      	subs	r3, r0, r3
 8003a9e:	d0e7      	beq.n	8003a70 <_malloc_r+0x58>
 8003aa0:	425a      	negs	r2, r3
 8003aa2:	50e2      	str	r2, [r4, r3]
 8003aa4:	e7e4      	b.n	8003a70 <_malloc_r+0x58>
 8003aa6:	6063      	str	r3, [r4, #4]
 8003aa8:	000c      	movs	r4, r1
 8003aaa:	e7ef      	b.n	8003a8c <_malloc_r+0x74>
 8003aac:	000c      	movs	r4, r1
 8003aae:	6849      	ldr	r1, [r1, #4]
 8003ab0:	e7c3      	b.n	8003a3a <_malloc_r+0x22>
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	1cc4      	adds	r4, r0, #3
 8003ab6:	439c      	bics	r4, r3
 8003ab8:	42a0      	cmp	r0, r4
 8003aba:	d0e1      	beq.n	8003a80 <_malloc_r+0x68>
 8003abc:	1a21      	subs	r1, r4, r0
 8003abe:	0030      	movs	r0, r6
 8003ac0:	f000 f82e 	bl	8003b20 <_sbrk_r>
 8003ac4:	1c43      	adds	r3, r0, #1
 8003ac6:	d1db      	bne.n	8003a80 <_malloc_r+0x68>
 8003ac8:	e7c7      	b.n	8003a5a <_malloc_r+0x42>
 8003aca:	46c0      	nop			; (mov r8, r8)
 8003acc:	20000aa0 	.word	0x20000aa0
 8003ad0:	20000aa4 	.word	0x20000aa4

08003ad4 <_realloc_r>:
 8003ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ad6:	0007      	movs	r7, r0
 8003ad8:	000d      	movs	r5, r1
 8003ada:	0016      	movs	r6, r2
 8003adc:	2900      	cmp	r1, #0
 8003ade:	d105      	bne.n	8003aec <_realloc_r+0x18>
 8003ae0:	0011      	movs	r1, r2
 8003ae2:	f7ff ff99 	bl	8003a18 <_malloc_r>
 8003ae6:	0004      	movs	r4, r0
 8003ae8:	0020      	movs	r0, r4
 8003aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003aec:	2a00      	cmp	r2, #0
 8003aee:	d103      	bne.n	8003af8 <_realloc_r+0x24>
 8003af0:	f7ff ff48 	bl	8003984 <_free_r>
 8003af4:	0034      	movs	r4, r6
 8003af6:	e7f7      	b.n	8003ae8 <_realloc_r+0x14>
 8003af8:	f000 f826 	bl	8003b48 <_malloc_usable_size_r>
 8003afc:	002c      	movs	r4, r5
 8003afe:	42b0      	cmp	r0, r6
 8003b00:	d2f2      	bcs.n	8003ae8 <_realloc_r+0x14>
 8003b02:	0031      	movs	r1, r6
 8003b04:	0038      	movs	r0, r7
 8003b06:	f7ff ff87 	bl	8003a18 <_malloc_r>
 8003b0a:	1e04      	subs	r4, r0, #0
 8003b0c:	d0ec      	beq.n	8003ae8 <_realloc_r+0x14>
 8003b0e:	0029      	movs	r1, r5
 8003b10:	0032      	movs	r2, r6
 8003b12:	f7ff fc11 	bl	8003338 <memcpy>
 8003b16:	0029      	movs	r1, r5
 8003b18:	0038      	movs	r0, r7
 8003b1a:	f7ff ff33 	bl	8003984 <_free_r>
 8003b1e:	e7e3      	b.n	8003ae8 <_realloc_r+0x14>

08003b20 <_sbrk_r>:
 8003b20:	2300      	movs	r3, #0
 8003b22:	b570      	push	{r4, r5, r6, lr}
 8003b24:	4c06      	ldr	r4, [pc, #24]	; (8003b40 <_sbrk_r+0x20>)
 8003b26:	0005      	movs	r5, r0
 8003b28:	0008      	movs	r0, r1
 8003b2a:	6023      	str	r3, [r4, #0]
 8003b2c:	f7fd fd6a 	bl	8001604 <_sbrk>
 8003b30:	1c43      	adds	r3, r0, #1
 8003b32:	d103      	bne.n	8003b3c <_sbrk_r+0x1c>
 8003b34:	6823      	ldr	r3, [r4, #0]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d000      	beq.n	8003b3c <_sbrk_r+0x1c>
 8003b3a:	602b      	str	r3, [r5, #0]
 8003b3c:	bd70      	pop	{r4, r5, r6, pc}
 8003b3e:	46c0      	nop			; (mov r8, r8)
 8003b40:	200010f4 	.word	0x200010f4

08003b44 <__malloc_lock>:
 8003b44:	4770      	bx	lr

08003b46 <__malloc_unlock>:
 8003b46:	4770      	bx	lr

08003b48 <_malloc_usable_size_r>:
 8003b48:	1f0b      	subs	r3, r1, #4
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	1f18      	subs	r0, r3, #4
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	da01      	bge.n	8003b56 <_malloc_usable_size_r+0xe>
 8003b52:	580b      	ldr	r3, [r1, r0]
 8003b54:	18c0      	adds	r0, r0, r3
 8003b56:	4770      	bx	lr

08003b58 <_init>:
 8003b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b5a:	46c0      	nop			; (mov r8, r8)
 8003b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b5e:	bc08      	pop	{r3}
 8003b60:	469e      	mov	lr, r3
 8003b62:	4770      	bx	lr

08003b64 <_fini>:
 8003b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b66:	46c0      	nop			; (mov r8, r8)
 8003b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b6a:	bc08      	pop	{r3}
 8003b6c:	469e      	mov	lr, r3
 8003b6e:	4770      	bx	lr
