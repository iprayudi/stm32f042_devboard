
stm32f042_dev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000018cc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  0800198c  0800198c  0001198c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080019c8  080019c8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080019c8  080019c8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080019c8  080019c8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080019c8  080019c8  000119c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080019cc  080019cc  000119cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080019d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  2000000c  080019dc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000200  20000180  080019dc  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dd7c  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000022fc  00000000  00000000  0002ddb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000075fa  00000000  00000000  000300ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000948  00000000  00000000  000376a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000bf8  00000000  00000000  00037ff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00015e0d  00000000  00000000  00038be8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000a73b  00000000  00000000  0004e9f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00078886  00000000  00000000  00059130  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000d19b6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001b94  00000000  00000000  000d1a34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001974 	.word	0x08001974

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08001974 	.word	0x08001974

08000108 <__gnu_thumb1_case_sqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5609      	ldrsb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__gnu_thumb1_case_uqi>:
 800011c:	b402      	push	{r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	5c09      	ldrb	r1, [r1, r0]
 8000126:	0049      	lsls	r1, r1, #1
 8000128:	448e      	add	lr, r1
 800012a:	bc02      	pop	{r1}
 800012c:	4770      	bx	lr
 800012e:	46c0      	nop			; (mov r8, r8)

08000130 <__udivsi3>:
 8000130:	2200      	movs	r2, #0
 8000132:	0843      	lsrs	r3, r0, #1
 8000134:	428b      	cmp	r3, r1
 8000136:	d374      	bcc.n	8000222 <__udivsi3+0xf2>
 8000138:	0903      	lsrs	r3, r0, #4
 800013a:	428b      	cmp	r3, r1
 800013c:	d35f      	bcc.n	80001fe <__udivsi3+0xce>
 800013e:	0a03      	lsrs	r3, r0, #8
 8000140:	428b      	cmp	r3, r1
 8000142:	d344      	bcc.n	80001ce <__udivsi3+0x9e>
 8000144:	0b03      	lsrs	r3, r0, #12
 8000146:	428b      	cmp	r3, r1
 8000148:	d328      	bcc.n	800019c <__udivsi3+0x6c>
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d30d      	bcc.n	800016c <__udivsi3+0x3c>
 8000150:	22ff      	movs	r2, #255	; 0xff
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	ba12      	rev	r2, r2
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d302      	bcc.n	8000162 <__udivsi3+0x32>
 800015c:	1212      	asrs	r2, r2, #8
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	d065      	beq.n	800022e <__udivsi3+0xfe>
 8000162:	0b03      	lsrs	r3, r0, #12
 8000164:	428b      	cmp	r3, r1
 8000166:	d319      	bcc.n	800019c <__udivsi3+0x6c>
 8000168:	e000      	b.n	800016c <__udivsi3+0x3c>
 800016a:	0a09      	lsrs	r1, r1, #8
 800016c:	0bc3      	lsrs	r3, r0, #15
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x46>
 8000172:	03cb      	lsls	r3, r1, #15
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b83      	lsrs	r3, r0, #14
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x52>
 800017e:	038b      	lsls	r3, r1, #14
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b43      	lsrs	r3, r0, #13
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x5e>
 800018a:	034b      	lsls	r3, r1, #13
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b03      	lsrs	r3, r0, #12
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x6a>
 8000196:	030b      	lsls	r3, r1, #12
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0ac3      	lsrs	r3, r0, #11
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x76>
 80001a2:	02cb      	lsls	r3, r1, #11
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a83      	lsrs	r3, r0, #10
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x82>
 80001ae:	028b      	lsls	r3, r1, #10
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a43      	lsrs	r3, r0, #9
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x8e>
 80001ba:	024b      	lsls	r3, r1, #9
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a03      	lsrs	r3, r0, #8
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x9a>
 80001c6:	020b      	lsls	r3, r1, #8
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	d2cd      	bcs.n	800016a <__udivsi3+0x3a>
 80001ce:	09c3      	lsrs	r3, r0, #7
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xa8>
 80001d4:	01cb      	lsls	r3, r1, #7
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0983      	lsrs	r3, r0, #6
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xb4>
 80001e0:	018b      	lsls	r3, r1, #6
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0943      	lsrs	r3, r0, #5
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xc0>
 80001ec:	014b      	lsls	r3, r1, #5
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0903      	lsrs	r3, r0, #4
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xcc>
 80001f8:	010b      	lsls	r3, r1, #4
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	08c3      	lsrs	r3, r0, #3
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xd8>
 8000204:	00cb      	lsls	r3, r1, #3
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0883      	lsrs	r3, r0, #2
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xe4>
 8000210:	008b      	lsls	r3, r1, #2
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0843      	lsrs	r3, r0, #1
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xf0>
 800021c:	004b      	lsls	r3, r1, #1
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	1a41      	subs	r1, r0, r1
 8000224:	d200      	bcs.n	8000228 <__udivsi3+0xf8>
 8000226:	4601      	mov	r1, r0
 8000228:	4152      	adcs	r2, r2
 800022a:	4610      	mov	r0, r2
 800022c:	4770      	bx	lr
 800022e:	e7ff      	b.n	8000230 <__udivsi3+0x100>
 8000230:	b501      	push	{r0, lr}
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f806 	bl	8000244 <__aeabi_idiv0>
 8000238:	bd02      	pop	{r1, pc}
 800023a:	46c0      	nop			; (mov r8, r8)

0800023c <__aeabi_uidivmod>:
 800023c:	2900      	cmp	r1, #0
 800023e:	d0f7      	beq.n	8000230 <__udivsi3+0x100>
 8000240:	e776      	b.n	8000130 <__udivsi3>
 8000242:	4770      	bx	lr

08000244 <__aeabi_idiv0>:
 8000244:	4770      	bx	lr
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000248:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800024a:	2410      	movs	r4, #16
{
 800024c:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024e:	2230      	movs	r2, #48	; 0x30
 8000250:	2100      	movs	r1, #0
 8000252:	a80c      	add	r0, sp, #48	; 0x30
 8000254:	f001 fb85 	bl	8001962 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000258:	0022      	movs	r2, r4
 800025a:	2100      	movs	r1, #0
 800025c:	a801      	add	r0, sp, #4
 800025e:	f001 fb80 	bl	8001962 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000262:	2218      	movs	r2, #24
 8000264:	2100      	movs	r1, #0
 8000266:	a805      	add	r0, sp, #20
 8000268:	f001 fb7b 	bl	8001962 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800026c:	2501      	movs	r5, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 800026e:	2332      	movs	r3, #50	; 0x32
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000270:	a80b      	add	r0, sp, #44	; 0x2c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 8000272:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000274:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000276:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000278:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800027a:	9513      	str	r5, [sp, #76]	; 0x4c
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800027c:	9510      	str	r5, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800027e:	f000 fdc7 	bl	8000e10 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000282:	2307      	movs	r3, #7
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000284:	2400      	movs	r4, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000286:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000288:	0029      	movs	r1, r5
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 800028a:	3b04      	subs	r3, #4
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800028c:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 800028e:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000290:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000292:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000294:	f001 f84e 	bl	8001334 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 8000298:	4b04      	ldr	r3, [pc, #16]	; (80002ac <SystemClock_Config+0x64>)
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800029a:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 800029c:	9305      	str	r3, [sp, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800029e:	9408      	str	r4, [sp, #32]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80002a0:	940a      	str	r4, [sp, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002a2:	f001 f8e3 	bl	800146c <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80002a6:	b019      	add	sp, #100	; 0x64
 80002a8:	bd30      	pop	{r4, r5, pc}
 80002aa:	46c0      	nop			; (mov r8, r8)
 80002ac:	00020020 	.word	0x00020020

080002b0 <main>:
{
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 80002b4:	f000 f9f4 	bl	80006a0 <HAL_Init>
  SystemClock_Config();
 80002b8:	f7ff ffc6 	bl	8000248 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002bc:	2214      	movs	r2, #20
 80002be:	2100      	movs	r1, #0
 80002c0:	a805      	add	r0, sp, #20
 80002c2:	f001 fb4e 	bl	8001962 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002c6:	2180      	movs	r1, #128	; 0x80
 80002c8:	4d48      	ldr	r5, [pc, #288]	; (80003ec <main+0x13c>)
 80002ca:	03c9      	lsls	r1, r1, #15
 80002cc:	696a      	ldr	r2, [r5, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80002ce:	4848      	ldr	r0, [pc, #288]	; (80003f0 <main+0x140>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002d0:	430a      	orrs	r2, r1
 80002d2:	616a      	str	r2, [r5, #20]
 80002d4:	696b      	ldr	r3, [r5, #20]

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002d6:	2400      	movs	r4, #0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002d8:	400b      	ands	r3, r1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002da:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002dc:	9302      	str	r3, [sp, #8]
 80002de:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002e0:	696a      	ldr	r2, [r5, #20]
 80002e2:	0289      	lsls	r1, r1, #10
 80002e4:	430a      	orrs	r2, r1
 80002e6:	616a      	str	r2, [r5, #20]
 80002e8:	696b      	ldr	r3, [r5, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002ea:	2701      	movs	r7, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002ec:	400b      	ands	r3, r1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002ee:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002f0:	9303      	str	r3, [sp, #12]
 80002f2:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002f4:	696a      	ldr	r2, [r5, #20]
 80002f6:	02c9      	lsls	r1, r1, #11
 80002f8:	430a      	orrs	r2, r1
 80002fa:	616a      	str	r2, [r5, #20]
 80002fc:	696b      	ldr	r3, [r5, #20]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80002fe:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000300:	400b      	ands	r3, r1
 8000302:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000304:	2102      	movs	r1, #2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000306:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000308:	f000 fcdc 	bl	8000cc4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LED_Pin;
 800030c:	2302      	movs	r3, #2
  ADC_ChannelConfTypeDef sConfig = {0};
 800030e:	260c      	movs	r6, #12
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000310:	a905      	add	r1, sp, #20
 8000312:	4837      	ldr	r0, [pc, #220]	; (80003f0 <main+0x140>)
  GPIO_InitStruct.Pin = LED_Pin;
 8000314:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000316:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000318:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800031a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800031c:	f000 fc28 	bl	8000b70 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000320:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000322:	0022      	movs	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000324:	433b      	orrs	r3, r7
 8000326:	616b      	str	r3, [r5, #20]
 8000328:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800032a:	0021      	movs	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 800032c:	403b      	ands	r3, r7
 800032e:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000330:	2009      	movs	r0, #9
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000332:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000334:	f000 fb50 	bl	80009d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000338:	2009      	movs	r0, #9
 800033a:	f000 fb77 	bl	8000a2c <HAL_NVIC_EnableIRQ>
  ADC_ChannelConfTypeDef sConfig = {0};
 800033e:	0032      	movs	r2, r6
 8000340:	0021      	movs	r1, r4
 8000342:	a805      	add	r0, sp, #20
 8000344:	f001 fb0d 	bl	8001962 <memset>
  hadc.Instance = ADC1;
 8000348:	4d2a      	ldr	r5, [pc, #168]	; (80003f4 <main+0x144>)
 800034a:	4b2b      	ldr	r3, [pc, #172]	; (80003f8 <main+0x148>)
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800034c:	0028      	movs	r0, r5
  hadc.Instance = ADC1;
 800034e:	602b      	str	r3, [r5, #0]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000350:	2304      	movs	r3, #4
 8000352:	616b      	str	r3, [r5, #20]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000354:	23c2      	movs	r3, #194	; 0xc2
 8000356:	33ff      	adds	r3, #255	; 0xff
 8000358:	61eb      	str	r3, [r5, #28]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800035a:	1d6b      	adds	r3, r5, #5
 800035c:	77dc      	strb	r4, [r3, #31]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800035e:	606c      	str	r4, [r5, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000360:	60ac      	str	r4, [r5, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000362:	60ec      	str	r4, [r5, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000364:	612f      	str	r7, [r5, #16]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000366:	762c      	strb	r4, [r5, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000368:	766c      	strb	r4, [r5, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 800036a:	76af      	strb	r7, [r5, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800036c:	76ec      	strb	r4, [r5, #27]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800036e:	622c      	str	r4, [r5, #32]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000370:	62af      	str	r7, [r5, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000372:	f000 f9b7 	bl	80006e4 <HAL_ADC_Init>
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000376:	2380      	movs	r3, #128	; 0x80
 8000378:	015b      	lsls	r3, r3, #5
 800037a:	9306      	str	r3, [sp, #24]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800037c:	2380      	movs	r3, #128	; 0x80
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800037e:	a905      	add	r1, sp, #20
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000380:	055b      	lsls	r3, r3, #21
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000382:	0028      	movs	r0, r5
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000384:	9307      	str	r3, [sp, #28]
  sConfig.Channel = ADC_CHANNEL_0;
 8000386:	9405      	str	r4, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000388:	f000 fa52 	bl	8000830 <HAL_ADC_ConfigChannel>
  huart2.Instance = USART2;
 800038c:	481b      	ldr	r0, [pc, #108]	; (80003fc <main+0x14c>)
 800038e:	4b1c      	ldr	r3, [pc, #112]	; (8000400 <main+0x150>)
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000390:	6146      	str	r6, [r0, #20]
  huart2.Instance = USART2;
 8000392:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8000394:	23e1      	movs	r3, #225	; 0xe1
 8000396:	025b      	lsls	r3, r3, #9
 8000398:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800039a:	6084      	str	r4, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800039c:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800039e:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003a0:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003a2:	61c4      	str	r4, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003a4:	6204      	str	r4, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003a6:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003a8:	f001 fa7c 	bl	80018a4 <HAL_UART_Init>
  hi2c1.Instance = I2C1;
 80003ac:	4e15      	ldr	r6, [pc, #84]	; (8000404 <main+0x154>)
 80003ae:	4b16      	ldr	r3, [pc, #88]	; (8000408 <main+0x158>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003b0:	0030      	movs	r0, r6
  hi2c1.Instance = I2C1;
 80003b2:	6033      	str	r3, [r6, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80003b4:	4b15      	ldr	r3, [pc, #84]	; (800040c <main+0x15c>)
  hi2c1.Init.OwnAddress1 = 0;
 80003b6:	60b4      	str	r4, [r6, #8]
  hi2c1.Init.Timing = 0x2000090E;
 80003b8:	6073      	str	r3, [r6, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003ba:	60f7      	str	r7, [r6, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003bc:	6134      	str	r4, [r6, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80003be:	6174      	str	r4, [r6, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003c0:	61b4      	str	r4, [r6, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003c2:	61f4      	str	r4, [r6, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003c4:	6234      	str	r4, [r6, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003c6:	f000 fc83 	bl	8000cd0 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003ca:	0021      	movs	r1, r4
 80003cc:	0030      	movs	r0, r6
 80003ce:	f000 fcd5 	bl	8000d7c <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003d2:	0021      	movs	r1, r4
 80003d4:	0030      	movs	r0, r6
 80003d6:	f000 fcf7 	bl	8000dc8 <HAL_I2CEx_ConfigDigitalFilter>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, RESET);
 80003da:	4805      	ldr	r0, [pc, #20]	; (80003f0 <main+0x140>)
 80003dc:	0022      	movs	r2, r4
 80003de:	2102      	movs	r1, #2
 80003e0:	f000 fc70 	bl	8000cc4 <HAL_GPIO_WritePin>
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK){
 80003e4:	0028      	movs	r0, r5
 80003e6:	f000 faa3 	bl	8000930 <HAL_ADCEx_Calibration_Start>
 80003ea:	e7fe      	b.n	80003ea <main+0x13a>
 80003ec:	40021000 	.word	0x40021000
 80003f0:	48000400 	.word	0x48000400
 80003f4:	2000013c 	.word	0x2000013c
 80003f8:	40012400 	.word	0x40012400
 80003fc:	20000078 	.word	0x20000078
 8000400:	40004400 	.word	0x40004400
 8000404:	20000028 	.word	0x20000028
 8000408:	40005400 	.word	0x40005400
 800040c:	2000090e 	.word	0x2000090e

08000410 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000410:	4770      	bx	lr
	...

08000414 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000414:	2001      	movs	r0, #1
 8000416:	4b0c      	ldr	r3, [pc, #48]	; (8000448 <HAL_MspInit+0x34>)
{
 8000418:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800041a:	6999      	ldr	r1, [r3, #24]
 800041c:	4301      	orrs	r1, r0
 800041e:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000420:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000422:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000424:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000426:	4002      	ands	r2, r0
 8000428:	9200      	str	r2, [sp, #0]
 800042a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800042c:	69da      	ldr	r2, [r3, #28]
 800042e:	430a      	orrs	r2, r1
 8000430:	61da      	str	r2, [r3, #28]
 8000432:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  __HAL_REMAP_PIN_ENABLE(HAL_REMAP_PA11_PA12);
 8000434:	4a05      	ldr	r2, [pc, #20]	; (800044c <HAL_MspInit+0x38>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000436:	400b      	ands	r3, r1
 8000438:	9301      	str	r3, [sp, #4]
 800043a:	9b01      	ldr	r3, [sp, #4]
  __HAL_REMAP_PIN_ENABLE(HAL_REMAP_PA11_PA12);
 800043c:	2310      	movs	r3, #16
 800043e:	6811      	ldr	r1, [r2, #0]
 8000440:	430b      	orrs	r3, r1
 8000442:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000444:	b002      	add	sp, #8
 8000446:	4770      	bx	lr
 8000448:	40021000 	.word	0x40021000
 800044c:	40010000 	.word	0x40010000

08000450 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000450:	b530      	push	{r4, r5, lr}
 8000452:	0005      	movs	r5, r0
 8000454:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000456:	2214      	movs	r2, #20
 8000458:	2100      	movs	r1, #0
 800045a:	a803      	add	r0, sp, #12
 800045c:	f001 fa81 	bl	8001962 <memset>
  if(hadc->Instance==ADC1)
 8000460:	4b1d      	ldr	r3, [pc, #116]	; (80004d8 <HAL_ADC_MspInit+0x88>)
 8000462:	682a      	ldr	r2, [r5, #0]
 8000464:	429a      	cmp	r2, r3
 8000466:	d134      	bne.n	80004d2 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000468:	2080      	movs	r0, #128	; 0x80
 800046a:	4b1c      	ldr	r3, [pc, #112]	; (80004dc <HAL_ADC_MspInit+0x8c>)
 800046c:	0080      	lsls	r0, r0, #2
 800046e:	6999      	ldr	r1, [r3, #24]
 8000470:	4301      	orrs	r1, r0
 8000472:	6199      	str	r1, [r3, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000474:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000476:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000478:	0289      	lsls	r1, r1, #10
    __HAL_RCC_ADC1_CLK_ENABLE();
 800047a:	4002      	ands	r2, r0
 800047c:	9201      	str	r2, [sp, #4]
 800047e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000480:	695a      	ldr	r2, [r3, #20]
    PA0     ------> ADC_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000482:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000484:	430a      	orrs	r2, r1
 8000486:	615a      	str	r2, [r3, #20]
 8000488:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800048a:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800048c:	400b      	ands	r3, r1
 800048e:	9302      	str	r3, [sp, #8]
 8000490:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000492:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000494:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000496:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000498:	3302      	adds	r3, #2
 800049a:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800049c:	f000 fb68 	bl	8000b70 <HAL_GPIO_Init>
    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80004a0:	2280      	movs	r2, #128	; 0x80
    hdma_adc.Instance = DMA1_Channel1;
 80004a2:	4c0f      	ldr	r4, [pc, #60]	; (80004e0 <HAL_ADC_MspInit+0x90>)
 80004a4:	4b0f      	ldr	r3, [pc, #60]	; (80004e4 <HAL_ADC_MspInit+0x94>)
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80004a6:	60e2      	str	r2, [r4, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80004a8:	1892      	adds	r2, r2, r2
 80004aa:	6122      	str	r2, [r4, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80004ac:	2280      	movs	r2, #128	; 0x80
 80004ae:	00d2      	lsls	r2, r2, #3
    hdma_adc.Instance = DMA1_Channel1;
 80004b0:	6023      	str	r3, [r4, #0]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80004b2:	6162      	str	r2, [r4, #20]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80004b4:	2300      	movs	r3, #0
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80004b6:	2220      	movs	r2, #32
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80004b8:	0020      	movs	r0, r4
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80004ba:	6063      	str	r3, [r4, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80004bc:	60a3      	str	r3, [r4, #8]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80004be:	61a2      	str	r2, [r4, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80004c0:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80004c2:	f000 fad9 	bl	8000a78 <HAL_DMA_Init>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	d001      	beq.n	80004ce <HAL_ADC_MspInit+0x7e>
    {
      Error_Handler();
 80004ca:	f7ff ffa1 	bl	8000410 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 80004ce:	632c      	str	r4, [r5, #48]	; 0x30
 80004d0:	6265      	str	r5, [r4, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80004d2:	b009      	add	sp, #36	; 0x24
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	46c0      	nop			; (mov r8, r8)
 80004d8:	40012400 	.word	0x40012400
 80004dc:	40021000 	.word	0x40021000
 80004e0:	200000f8 	.word	0x200000f8
 80004e4:	40020008 	.word	0x40020008

080004e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80004e8:	b510      	push	{r4, lr}
 80004ea:	0004      	movs	r4, r0
 80004ec:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ee:	2214      	movs	r2, #20
 80004f0:	2100      	movs	r1, #0
 80004f2:	a803      	add	r0, sp, #12
 80004f4:	f001 fa35 	bl	8001962 <memset>
  if(hi2c->Instance==I2C1)
 80004f8:	4b12      	ldr	r3, [pc, #72]	; (8000544 <HAL_I2C_MspInit+0x5c>)
 80004fa:	6822      	ldr	r2, [r4, #0]
 80004fc:	429a      	cmp	r2, r3
 80004fe:	d11e      	bne.n	800053e <HAL_I2C_MspInit+0x56>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000500:	2180      	movs	r1, #128	; 0x80
 8000502:	4c11      	ldr	r4, [pc, #68]	; (8000548 <HAL_I2C_MspInit+0x60>)
 8000504:	03c9      	lsls	r1, r1, #15
 8000506:	6962      	ldr	r2, [r4, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000508:	4810      	ldr	r0, [pc, #64]	; (800054c <HAL_I2C_MspInit+0x64>)
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800050a:	430a      	orrs	r2, r1
 800050c:	6162      	str	r2, [r4, #20]
 800050e:	6963      	ldr	r3, [r4, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000510:	2203      	movs	r2, #3
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000512:	400b      	ands	r3, r1
 8000514:	9301      	str	r3, [sp, #4]
 8000516:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000518:	2312      	movs	r3, #18
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800051a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800051c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800051e:	3b11      	subs	r3, #17
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000520:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000522:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000524:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000526:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000528:	f000 fb22 	bl	8000b70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800052c:	2180      	movs	r1, #128	; 0x80
 800052e:	69e2      	ldr	r2, [r4, #28]
 8000530:	0389      	lsls	r1, r1, #14
 8000532:	430a      	orrs	r2, r1
 8000534:	61e2      	str	r2, [r4, #28]
 8000536:	69e3      	ldr	r3, [r4, #28]
 8000538:	400b      	ands	r3, r1
 800053a:	9302      	str	r3, [sp, #8]
 800053c:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800053e:	b008      	add	sp, #32
 8000540:	bd10      	pop	{r4, pc}
 8000542:	46c0      	nop			; (mov r8, r8)
 8000544:	40005400 	.word	0x40005400
 8000548:	40021000 	.word	0x40021000
 800054c:	48001400 	.word	0x48001400

08000550 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000550:	b510      	push	{r4, lr}
 8000552:	0004      	movs	r4, r0
 8000554:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000556:	2214      	movs	r2, #20
 8000558:	2100      	movs	r1, #0
 800055a:	a803      	add	r0, sp, #12
 800055c:	f001 fa01 	bl	8001962 <memset>
  if(huart->Instance==USART2)
 8000560:	4b11      	ldr	r3, [pc, #68]	; (80005a8 <HAL_UART_MspInit+0x58>)
 8000562:	6822      	ldr	r2, [r4, #0]
 8000564:	429a      	cmp	r2, r3
 8000566:	d11d      	bne.n	80005a4 <HAL_UART_MspInit+0x54>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000568:	2280      	movs	r2, #128	; 0x80
 800056a:	4b10      	ldr	r3, [pc, #64]	; (80005ac <HAL_UART_MspInit+0x5c>)
 800056c:	0292      	lsls	r2, r2, #10
 800056e:	69d9      	ldr	r1, [r3, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000570:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_USART2_CLK_ENABLE();
 8000572:	4311      	orrs	r1, r2
 8000574:	61d9      	str	r1, [r3, #28]
 8000576:	69d9      	ldr	r1, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000578:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART2_CLK_ENABLE();
 800057a:	4011      	ands	r1, r2
 800057c:	9101      	str	r1, [sp, #4]
 800057e:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000580:	6959      	ldr	r1, [r3, #20]
 8000582:	4311      	orrs	r1, r2
 8000584:	6159      	str	r1, [r3, #20]
 8000586:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000588:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800058a:	401a      	ands	r2, r3
 800058c:	9202      	str	r2, [sp, #8]
 800058e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000590:	230c      	movs	r3, #12
 8000592:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000594:	3b0a      	subs	r3, #10
 8000596:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000598:	3301      	adds	r3, #1
 800059a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800059c:	3b02      	subs	r3, #2
 800059e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a0:	f000 fae6 	bl	8000b70 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80005a4:	b008      	add	sp, #32
 80005a6:	bd10      	pop	{r4, pc}
 80005a8:	40004400 	.word	0x40004400
 80005ac:	40021000 	.word	0x40021000

080005b0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80005b0:	4770      	bx	lr

080005b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005b2:	e7fe      	b.n	80005b2 <HardFault_Handler>

080005b4 <SVC_Handler>:
 80005b4:	4770      	bx	lr

080005b6 <PendSV_Handler>:
 80005b6:	4770      	bx	lr

080005b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005b8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005ba:	f000 f881 	bl	80006c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005be:	bd10      	pop	{r4, pc}

080005c0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80005c0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80005c2:	4802      	ldr	r0, [pc, #8]	; (80005cc <DMA1_Channel1_IRQHandler+0xc>)
 80005c4:	f000 fa8a 	bl	8000adc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80005c8:	bd10      	pop	{r4, pc}
 80005ca:	46c0      	nop			; (mov r8, r8)
 80005cc:	200000f8 	.word	0x200000f8

080005d0 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80005d0:	4770      	bx	lr
	...

080005d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005d4:	4813      	ldr	r0, [pc, #76]	; (8000624 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005d6:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 80005d8:	4813      	ldr	r0, [pc, #76]	; (8000628 <LoopForever+0x6>)
    LDR R1, [R0]
 80005da:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80005dc:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80005de:	4a13      	ldr	r2, [pc, #76]	; (800062c <LoopForever+0xa>)
    CMP R1, R2
 80005e0:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80005e2:	d105      	bne.n	80005f0 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 80005e4:	4812      	ldr	r0, [pc, #72]	; (8000630 <LoopForever+0xe>)
    LDR R1,=0x00000001
 80005e6:	4913      	ldr	r1, [pc, #76]	; (8000634 <LoopForever+0x12>)
    STR R1, [R0]
 80005e8:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80005ea:	4813      	ldr	r0, [pc, #76]	; (8000638 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80005ec:	4913      	ldr	r1, [pc, #76]	; (800063c <LoopForever+0x1a>)
    STR R1, [R0]
 80005ee:	6001      	str	r1, [r0, #0]

080005f0 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005f0:	4813      	ldr	r0, [pc, #76]	; (8000640 <LoopForever+0x1e>)
  ldr r1, =_edata
 80005f2:	4914      	ldr	r1, [pc, #80]	; (8000644 <LoopForever+0x22>)
  ldr r2, =_sidata
 80005f4:	4a14      	ldr	r2, [pc, #80]	; (8000648 <LoopForever+0x26>)
  movs r3, #0
 80005f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005f8:	e002      	b.n	8000600 <LoopCopyDataInit>

080005fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005fe:	3304      	adds	r3, #4

08000600 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000600:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000602:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000604:	d3f9      	bcc.n	80005fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000606:	4a11      	ldr	r2, [pc, #68]	; (800064c <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000608:	4c11      	ldr	r4, [pc, #68]	; (8000650 <LoopForever+0x2e>)
  movs r3, #0
 800060a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800060c:	e001      	b.n	8000612 <LoopFillZerobss>

0800060e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800060e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000610:	3204      	adds	r2, #4

08000612 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000612:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000614:	d3fb      	bcc.n	800060e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000616:	f7ff ffdb 	bl	80005d0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800061a:	f001 f975 	bl	8001908 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800061e:	f7ff fe47 	bl	80002b0 <main>

08000622 <LoopForever>:

LoopForever:
    b LoopForever
 8000622:	e7fe      	b.n	8000622 <LoopForever>
  ldr   r0, =_estack
 8000624:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000628:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 800062c:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000630:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000634:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000638:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 800063c:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000640:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000644:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000648:	080019d0 	.word	0x080019d0
  ldr r2, =_sbss
 800064c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000650:	20000180 	.word	0x20000180

08000654 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000654:	e7fe      	b.n	8000654 <ADC1_IRQHandler>
	...

08000658 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800065c:	20fa      	movs	r0, #250	; 0xfa
 800065e:	4b0d      	ldr	r3, [pc, #52]	; (8000694 <HAL_InitTick+0x3c>)
 8000660:	0080      	lsls	r0, r0, #2
 8000662:	7819      	ldrb	r1, [r3, #0]
 8000664:	f7ff fd64 	bl	8000130 <__udivsi3>
 8000668:	4b0b      	ldr	r3, [pc, #44]	; (8000698 <HAL_InitTick+0x40>)
 800066a:	0001      	movs	r1, r0
 800066c:	6818      	ldr	r0, [r3, #0]
 800066e:	f7ff fd5f 	bl	8000130 <__udivsi3>
 8000672:	f000 f9e7 	bl	8000a44 <HAL_SYSTICK_Config>
 8000676:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8000678:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800067a:	2c00      	cmp	r4, #0
 800067c:	d109      	bne.n	8000692 <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800067e:	2d03      	cmp	r5, #3
 8000680:	d807      	bhi.n	8000692 <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000682:	3802      	subs	r0, #2
 8000684:	0022      	movs	r2, r4
 8000686:	0029      	movs	r1, r5
 8000688:	f000 f9a6 	bl	80009d8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800068c:	0020      	movs	r0, r4
 800068e:	4b03      	ldr	r3, [pc, #12]	; (800069c <HAL_InitTick+0x44>)
 8000690:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	20000004 	.word	0x20000004
 8000698:	20000000 	.word	0x20000000
 800069c:	20000008 	.word	0x20000008

080006a0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006a0:	2310      	movs	r3, #16
 80006a2:	4a06      	ldr	r2, [pc, #24]	; (80006bc <HAL_Init+0x1c>)
{
 80006a4:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006a6:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80006a8:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006aa:	430b      	orrs	r3, r1
 80006ac:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80006ae:	f7ff ffd3 	bl	8000658 <HAL_InitTick>
  HAL_MspInit();
 80006b2:	f7ff feaf 	bl	8000414 <HAL_MspInit>
}
 80006b6:	2000      	movs	r0, #0
 80006b8:	bd10      	pop	{r4, pc}
 80006ba:	46c0      	nop			; (mov r8, r8)
 80006bc:	40022000 	.word	0x40022000

080006c0 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80006c0:	4a03      	ldr	r2, [pc, #12]	; (80006d0 <HAL_IncTick+0x10>)
 80006c2:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <HAL_IncTick+0x14>)
 80006c4:	6811      	ldr	r1, [r2, #0]
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	185b      	adds	r3, r3, r1
 80006ca:	6013      	str	r3, [r2, #0]
}
 80006cc:	4770      	bx	lr
 80006ce:	46c0      	nop			; (mov r8, r8)
 80006d0:	2000017c 	.word	0x2000017c
 80006d4:	20000004 	.word	0x20000004

080006d8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80006d8:	4b01      	ldr	r3, [pc, #4]	; (80006e0 <HAL_GetTick+0x8>)
 80006da:	6818      	ldr	r0, [r3, #0]
}
 80006dc:	4770      	bx	lr
 80006de:	46c0      	nop			; (mov r8, r8)
 80006e0:	2000017c 	.word	0x2000017c

080006e4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80006e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006e6:	0004      	movs	r4, r0
  uint32_t tmpCFGR1 = 0U;

  /* Check ADC handle */
  if(hadc == NULL)
  {
    return HAL_ERROR;
 80006e8:	2001      	movs	r0, #1
  if(hadc == NULL)
 80006ea:	2c00      	cmp	r4, #0
 80006ec:	d07e      	beq.n	80007ec <HAL_ADC_Init+0x108>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80006ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d106      	bne.n	8000702 <HAL_ADC_Init+0x1e>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80006f4:	0022      	movs	r2, r4
 80006f6:	3234      	adds	r2, #52	; 0x34
    ADC_CLEAR_ERRORCODE(hadc);
 80006f8:	63e3      	str	r3, [r4, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80006fa:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 80006fc:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 80006fe:	f7ff fea7 	bl	8000450 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000702:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000704:	06db      	lsls	r3, r3, #27
 8000706:	d500      	bpl.n	800070a <HAL_ADC_Init+0x26>
 8000708:	e085      	b.n	8000816 <HAL_ADC_Init+0x132>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800070a:	2204      	movs	r2, #4
 800070c:	6823      	ldr	r3, [r4, #0]
 800070e:	6898      	ldr	r0, [r3, #8]
 8000710:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000712:	d000      	beq.n	8000716 <HAL_ADC_Init+0x32>
 8000714:	e07f      	b.n	8000816 <HAL_ADC_Init+0x132>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000716:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000718:	4942      	ldr	r1, [pc, #264]	; (8000824 <HAL_ADC_Init+0x140>)
 800071a:	4011      	ands	r1, r2
 800071c:	2202      	movs	r2, #2
 800071e:	430a      	orrs	r2, r1
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000720:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State,
 8000722:	63a2      	str	r2, [r4, #56]	; 0x38
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000724:	689a      	ldr	r2, [r3, #8]
 8000726:	400a      	ands	r2, r1
 8000728:	2a01      	cmp	r2, #1
 800072a:	d105      	bne.n	8000738 <HAL_ADC_Init+0x54>
 800072c:	6819      	ldr	r1, [r3, #0]
 800072e:	4211      	tst	r1, r2
 8000730:	d10e      	bne.n	8000750 <HAL_ADC_Init+0x6c>
 8000732:	68da      	ldr	r2, [r3, #12]
 8000734:	0412      	lsls	r2, r2, #16
 8000736:	d40b      	bmi.n	8000750 <HAL_ADC_Init+0x6c>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000738:	2118      	movs	r1, #24
 800073a:	68da      	ldr	r2, [r3, #12]
 800073c:	438a      	bics	r2, r1
 800073e:	68a1      	ldr	r1, [r4, #8]
 8000740:	430a      	orrs	r2, r1
 8000742:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000744:	6919      	ldr	r1, [r3, #16]
 8000746:	6862      	ldr	r2, [r4, #4]
 8000748:	0089      	lsls	r1, r1, #2
 800074a:	0889      	lsrs	r1, r1, #2
 800074c:	4311      	orrs	r1, r2
 800074e:	6119      	str	r1, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000750:	68da      	ldr	r2, [r3, #12]
 8000752:	4935      	ldr	r1, [pc, #212]	; (8000828 <HAL_ADC_Init+0x144>)
 8000754:	400a      	ands	r2, r1
 8000756:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000758:	7e25      	ldrb	r5, [r4, #24]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800075a:	7e62      	ldrb	r2, [r4, #25]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800075c:	03ad      	lsls	r5, r5, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800075e:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000760:	4315      	orrs	r5, r2
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000762:	6aa2      	ldr	r2, [r4, #40]	; 0x28
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000764:	7ea1      	ldrb	r1, [r4, #26]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000766:	3a01      	subs	r2, #1
 8000768:	1e56      	subs	r6, r2, #1
 800076a:	41b2      	sbcs	r2, r6
 800076c:	0316      	lsls	r6, r2, #12
 800076e:	68e2      	ldr	r2, [r4, #12]
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000770:	034f      	lsls	r7, r1, #13
 8000772:	4315      	orrs	r5, r2
                 hadc->Init.DataAlign                                             |
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000774:	6922      	ldr	r2, [r4, #16]
 8000776:	432f      	orrs	r7, r5
 8000778:	2a02      	cmp	r2, #2
 800077a:	d100      	bne.n	800077e <HAL_ADC_Init+0x9a>
 800077c:	2004      	movs	r0, #4
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 800077e:	1d62      	adds	r2, r4, #5
 8000780:	7fd2      	ldrb	r2, [r2, #31]
 8000782:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000784:	433a      	orrs	r2, r7
 8000786:	4332      	orrs	r2, r6
 8000788:	4302      	orrs	r2, r0
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800078a:	7ee0      	ldrb	r0, [r4, #27]
 800078c:	2801      	cmp	r0, #1
 800078e:	d104      	bne.n	800079a <HAL_ADC_Init+0xb6>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000790:	2900      	cmp	r1, #0
 8000792:	d12c      	bne.n	80007ee <HAL_ADC_Init+0x10a>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000794:	2180      	movs	r1, #128	; 0x80
 8000796:	0249      	lsls	r1, r1, #9
 8000798:	430a      	orrs	r2, r1
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800079a:	20c2      	movs	r0, #194	; 0xc2
 800079c:	69e1      	ldr	r1, [r4, #28]
 800079e:	30ff      	adds	r0, #255	; 0xff
 80007a0:	4281      	cmp	r1, r0
 80007a2:	d002      	beq.n	80007aa <HAL_ADC_Init+0xc6>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80007a4:	6a20      	ldr	r0, [r4, #32]
 80007a6:	4301      	orrs	r1, r0
 80007a8:	430a      	orrs	r2, r1
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80007aa:	2080      	movs	r0, #128	; 0x80
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80007ac:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80007ae:	0540      	lsls	r0, r0, #21
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80007b0:	4311      	orrs	r1, r2
 80007b2:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80007b4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80007b6:	4281      	cmp	r1, r0
 80007b8:	d002      	beq.n	80007c0 <HAL_ADC_Init+0xdc>
 80007ba:	1e48      	subs	r0, r1, #1
 80007bc:	2806      	cmp	r0, #6
 80007be:	d807      	bhi.n	80007d0 <HAL_ADC_Init+0xec>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80007c0:	2507      	movs	r5, #7
 80007c2:	6958      	ldr	r0, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80007c4:	4029      	ands	r1, r5
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80007c6:	43a8      	bics	r0, r5
 80007c8:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80007ca:	6958      	ldr	r0, [r3, #20]
 80007cc:	4301      	orrs	r1, r0
 80007ce:	6159      	str	r1, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80007d0:	68db      	ldr	r3, [r3, #12]
 80007d2:	4916      	ldr	r1, [pc, #88]	; (800082c <HAL_ADC_Init+0x148>)
 80007d4:	400b      	ands	r3, r1
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d111      	bne.n	80007fe <HAL_ADC_Init+0x11a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80007da:	2000      	movs	r0, #0
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80007dc:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 80007de:	63e0      	str	r0, [r4, #60]	; 0x3c
      ADC_STATE_CLR_SET(hadc->State,
 80007e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80007e2:	4393      	bics	r3, r2
 80007e4:	001a      	movs	r2, r3
 80007e6:	2301      	movs	r3, #1
 80007e8:	4313      	orrs	r3, r2
 80007ea:	63a3      	str	r3, [r4, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 80007ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80007ee:	2120      	movs	r1, #32
 80007f0:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80007f2:	4329      	orrs	r1, r5
 80007f4:	63a1      	str	r1, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80007f6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80007f8:	4308      	orrs	r0, r1
 80007fa:	63e0      	str	r0, [r4, #60]	; 0x3c
 80007fc:	e7cd      	b.n	800079a <HAL_ADC_Init+0xb6>
      ADC_STATE_CLR_SET(hadc->State,
 80007fe:	2212      	movs	r2, #18
 8000800:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000802:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8000804:	4393      	bics	r3, r2
 8000806:	001a      	movs	r2, r3
 8000808:	2310      	movs	r3, #16
 800080a:	4313      	orrs	r3, r2
 800080c:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800080e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000810:	4303      	orrs	r3, r0
 8000812:	63e3      	str	r3, [r4, #60]	; 0x3c
 8000814:	e7ea      	b.n	80007ec <HAL_ADC_Init+0x108>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000816:	2310      	movs	r3, #16
 8000818:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 800081a:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800081c:	4313      	orrs	r3, r2
 800081e:	63a3      	str	r3, [r4, #56]	; 0x38
 8000820:	e7e4      	b.n	80007ec <HAL_ADC_Init+0x108>
 8000822:	46c0      	nop			; (mov r8, r8)
 8000824:	fffffefd 	.word	0xfffffefd
 8000828:	fffe0219 	.word	0xfffe0219
 800082c:	833fffe7 	.word	0x833fffe7

08000830 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000830:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8000832:	2200      	movs	r2, #0
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000834:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0U;
 8000836:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8000838:	3434      	adds	r4, #52	; 0x34
 800083a:	7822      	ldrb	r2, [r4, #0]
{
 800083c:	0003      	movs	r3, r0
  __HAL_LOCK(hadc);
 800083e:	2002      	movs	r0, #2
 8000840:	2a01      	cmp	r2, #1
 8000842:	d02b      	beq.n	800089c <HAL_ADC_ConfigChannel+0x6c>
 8000844:	2201      	movs	r2, #1
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000846:	681d      	ldr	r5, [r3, #0]
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000848:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800084a:	68a8      	ldr	r0, [r5, #8]
  __HAL_LOCK(hadc);
 800084c:	7022      	strb	r2, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800084e:	0740      	lsls	r0, r0, #29
 8000850:	d45a      	bmi.n	8000908 <HAL_ADC_ConfigChannel+0xd8>
 8000852:	680b      	ldr	r3, [r1, #0]
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8000854:	482f      	ldr	r0, [pc, #188]	; (8000914 <HAL_ADC_ConfigChannel+0xe4>)
 8000856:	001f      	movs	r7, r3
 8000858:	4684      	mov	ip, r0
 800085a:	6848      	ldr	r0, [r1, #4]
 800085c:	409a      	lsls	r2, r3
 800085e:	3f10      	subs	r7, #16
 8000860:	4560      	cmp	r0, ip
 8000862:	d03b      	beq.n	80008dc <HAL_ADC_ConfigChannel+0xac>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000864:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8000866:	4310      	orrs	r0, r2
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000868:	2280      	movs	r2, #128	; 0x80
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800086a:	62a8      	str	r0, [r5, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800086c:	0552      	lsls	r2, r2, #21
 800086e:	4296      	cmp	r6, r2
 8000870:	d00f      	beq.n	8000892 <HAL_ADC_ConfigChannel+0x62>
 8000872:	3e01      	subs	r6, #1
 8000874:	2e06      	cmp	r6, #6
 8000876:	d90c      	bls.n	8000892 <HAL_ADC_ConfigChannel+0x62>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8000878:	688a      	ldr	r2, [r1, #8]
 800087a:	2107      	movs	r1, #7
 800087c:	6968      	ldr	r0, [r5, #20]
 800087e:	4008      	ands	r0, r1
 8000880:	4282      	cmp	r2, r0
 8000882:	d006      	beq.n	8000892 <HAL_ADC_ConfigChannel+0x62>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000884:	6968      	ldr	r0, [r5, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000886:	400a      	ands	r2, r1
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000888:	4388      	bics	r0, r1
 800088a:	6168      	str	r0, [r5, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800088c:	6968      	ldr	r0, [r5, #20]
 800088e:	4302      	orrs	r2, r0
 8000890:	616a      	str	r2, [r5, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000892:	2f02      	cmp	r7, #2
 8000894:	d903      	bls.n	800089e <HAL_ADC_ConfigChannel+0x6e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000896:	2000      	movs	r0, #0
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000898:	2300      	movs	r3, #0
 800089a:	7023      	strb	r3, [r4, #0]
  
  /* Return function status */
  return tmp_hal_status;
}
 800089c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800089e:	4a1e      	ldr	r2, [pc, #120]	; (8000918 <HAL_ADC_ConfigChannel+0xe8>)
 80008a0:	2080      	movs	r0, #128	; 0x80
 80008a2:	6811      	ldr	r1, [r2, #0]
 80008a4:	2b10      	cmp	r3, #16
 80008a6:	d015      	beq.n	80008d4 <HAL_ADC_ConfigChannel+0xa4>
 80008a8:	2b11      	cmp	r3, #17
 80008aa:	d115      	bne.n	80008d8 <HAL_ADC_ConfigChannel+0xa8>
 80008ac:	03c0      	lsls	r0, r0, #15
 80008ae:	4301      	orrs	r1, r0
 80008b0:	6011      	str	r1, [r2, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80008b2:	2b10      	cmp	r3, #16
 80008b4:	d1ef      	bne.n	8000896 <HAL_ADC_ConfigChannel+0x66>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80008b6:	4b19      	ldr	r3, [pc, #100]	; (800091c <HAL_ADC_ConfigChannel+0xec>)
 80008b8:	4919      	ldr	r1, [pc, #100]	; (8000920 <HAL_ADC_ConfigChannel+0xf0>)
 80008ba:	6818      	ldr	r0, [r3, #0]
 80008bc:	f7ff fc38 	bl	8000130 <__udivsi3>
 80008c0:	230a      	movs	r3, #10
 80008c2:	4358      	muls	r0, r3
 80008c4:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0U)
 80008c6:	9b01      	ldr	r3, [sp, #4]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d0e4      	beq.n	8000896 <HAL_ADC_ConfigChannel+0x66>
            wait_loop_index--;
 80008cc:	9b01      	ldr	r3, [sp, #4]
 80008ce:	3b01      	subs	r3, #1
 80008d0:	9301      	str	r3, [sp, #4]
 80008d2:	e7f8      	b.n	80008c6 <HAL_ADC_ConfigChannel+0x96>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80008d4:	0400      	lsls	r0, r0, #16
 80008d6:	e7ea      	b.n	80008ae <HAL_ADC_ConfigChannel+0x7e>
 80008d8:	0440      	lsls	r0, r0, #17
 80008da:	e7e8      	b.n	80008ae <HAL_ADC_ConfigChannel+0x7e>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80008dc:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80008de:	4391      	bics	r1, r2
 80008e0:	62a9      	str	r1, [r5, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80008e2:	2f02      	cmp	r7, #2
 80008e4:	d8d7      	bhi.n	8000896 <HAL_ADC_ConfigChannel+0x66>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80008e6:	4a0c      	ldr	r2, [pc, #48]	; (8000918 <HAL_ADC_ConfigChannel+0xe8>)
 80008e8:	6811      	ldr	r1, [r2, #0]
 80008ea:	2b10      	cmp	r3, #16
 80008ec:	d00a      	beq.n	8000904 <HAL_ADC_ConfigChannel+0xd4>
 80008ee:	3b11      	subs	r3, #17
 80008f0:	1e58      	subs	r0, r3, #1
 80008f2:	4183      	sbcs	r3, r0
 80008f4:	480b      	ldr	r0, [pc, #44]	; (8000924 <HAL_ADC_ConfigChannel+0xf4>)
 80008f6:	425b      	negs	r3, r3
 80008f8:	4003      	ands	r3, r0
 80008fa:	480b      	ldr	r0, [pc, #44]	; (8000928 <HAL_ADC_ConfigChannel+0xf8>)
 80008fc:	181b      	adds	r3, r3, r0
 80008fe:	400b      	ands	r3, r1
 8000900:	6013      	str	r3, [r2, #0]
 8000902:	e7c8      	b.n	8000896 <HAL_ADC_ConfigChannel+0x66>
 8000904:	4b09      	ldr	r3, [pc, #36]	; (800092c <HAL_ADC_ConfigChannel+0xfc>)
 8000906:	e7fa      	b.n	80008fe <HAL_ADC_ConfigChannel+0xce>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000908:	2120      	movs	r1, #32
 800090a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800090c:	4301      	orrs	r1, r0
 800090e:	6399      	str	r1, [r3, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 8000910:	0010      	movs	r0, r2
 8000912:	e7c1      	b.n	8000898 <HAL_ADC_ConfigChannel+0x68>
 8000914:	00001001 	.word	0x00001001
 8000918:	40012708 	.word	0x40012708
 800091c:	20000000 	.word	0x20000000
 8000920:	000f4240 	.word	0x000f4240
 8000924:	ff400000 	.word	0xff400000
 8000928:	ffbfffff 	.word	0xffbfffff
 800092c:	ff7fffff 	.word	0xff7fffff

08000930 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8000930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000932:	0006      	movs	r6, r0
 8000934:	3634      	adds	r6, #52	; 0x34
 8000936:	7833      	ldrb	r3, [r6, #0]
{
 8000938:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 800093a:	2002      	movs	r0, #2
 800093c:	2b01      	cmp	r3, #1
 800093e:	d042      	beq.n	80009c6 <HAL_ADCEx_Calibration_Start+0x96>
 8000940:	2301      	movs	r3, #1
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000942:	2103      	movs	r1, #3
  __HAL_LOCK(hadc);
 8000944:	7033      	strb	r3, [r6, #0]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000946:	6823      	ldr	r3, [r4, #0]
 8000948:	689a      	ldr	r2, [r3, #8]
 800094a:	400a      	ands	r2, r1
 800094c:	2a01      	cmp	r2, #1
 800094e:	d105      	bne.n	800095c <HAL_ADCEx_Calibration_Start+0x2c>
 8000950:	6819      	ldr	r1, [r3, #0]
 8000952:	4211      	tst	r1, r2
 8000954:	d138      	bne.n	80009c8 <HAL_ADCEx_Calibration_Start+0x98>
 8000956:	68da      	ldr	r2, [r3, #12]
 8000958:	0412      	lsls	r2, r2, #16
 800095a:	d435      	bmi.n	80009c8 <HAL_ADCEx_Calibration_Start+0x98>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 800095c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800095e:	491d      	ldr	r1, [pc, #116]	; (80009d4 <HAL_ADCEx_Calibration_Start+0xa4>)
 8000960:	4011      	ands	r1, r2
 8000962:	2202      	movs	r2, #2
 8000964:	430a      	orrs	r2, r1
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8000966:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State, 
 8000968:	63a2      	str	r2, [r4, #56]	; 0x38
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800096a:	68dd      	ldr	r5, [r3, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800096c:	68da      	ldr	r2, [r3, #12]
 800096e:	438a      	bics	r2, r1
 8000970:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8000972:	2280      	movs	r2, #128	; 0x80
 8000974:	6899      	ldr	r1, [r3, #8]
 8000976:	0612      	lsls	r2, r2, #24
 8000978:	430a      	orrs	r2, r1
 800097a:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 800097c:	f7ff feac 	bl	80006d8 <HAL_GetTick>
 8000980:	0007      	movs	r7, r0

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8000982:	6823      	ldr	r3, [r4, #0]
 8000984:	689a      	ldr	r2, [r3, #8]
 8000986:	2a00      	cmp	r2, #0
 8000988:	db0e      	blt.n	80009a8 <HAL_ADCEx_Calibration_Start+0x78>
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800098a:	2203      	movs	r2, #3
        return HAL_ERROR;
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 800098c:	68d9      	ldr	r1, [r3, #12]
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800098e:	4015      	ands	r5, r2
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8000990:	430d      	orrs	r5, r1
 8000992:	60dd      	str	r5, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000994:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000996:	2000      	movs	r0, #0
    ADC_STATE_CLR_SET(hadc->State,
 8000998:	4393      	bics	r3, r2
 800099a:	001a      	movs	r2, r3
 800099c:	2301      	movs	r3, #1
 800099e:	4313      	orrs	r3, r2
 80009a0:	63a3      	str	r3, [r4, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80009a2:	2300      	movs	r3, #0
 80009a4:	7033      	strb	r3, [r6, #0]
  
  /* Return function status */
  return tmp_hal_status;
 80009a6:	e00e      	b.n	80009c6 <HAL_ADCEx_Calibration_Start+0x96>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80009a8:	f7ff fe96 	bl	80006d8 <HAL_GetTick>
 80009ac:	1bc0      	subs	r0, r0, r7
 80009ae:	2802      	cmp	r0, #2
 80009b0:	d9e7      	bls.n	8000982 <HAL_ADCEx_Calibration_Start+0x52>
        ADC_STATE_CLR_SET(hadc->State,
 80009b2:	2212      	movs	r2, #18
 80009b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        return HAL_ERROR;
 80009b6:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 80009b8:	4393      	bics	r3, r2
 80009ba:	001a      	movs	r2, r3
 80009bc:	2310      	movs	r3, #16
 80009be:	4313      	orrs	r3, r2
 80009c0:	63a3      	str	r3, [r4, #56]	; 0x38
        __HAL_UNLOCK(hadc);
 80009c2:	2300      	movs	r3, #0
 80009c4:	7033      	strb	r3, [r6, #0]
}
 80009c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80009c8:	2320      	movs	r3, #32
 80009ca:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 80009cc:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80009ce:	4313      	orrs	r3, r2
 80009d0:	63a3      	str	r3, [r4, #56]	; 0x38
 80009d2:	e7e6      	b.n	80009a2 <HAL_ADCEx_Calibration_Start+0x72>
 80009d4:	fffffefd 	.word	0xfffffefd

080009d8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009d8:	b530      	push	{r4, r5, lr}
 80009da:	25ff      	movs	r5, #255	; 0xff
 80009dc:	2403      	movs	r4, #3
 80009de:	002a      	movs	r2, r5
 80009e0:	b2c3      	uxtb	r3, r0
 80009e2:	401c      	ands	r4, r3
 80009e4:	00e4      	lsls	r4, r4, #3
 80009e6:	40a2      	lsls	r2, r4
 80009e8:	0189      	lsls	r1, r1, #6
 80009ea:	4029      	ands	r1, r5
 80009ec:	43d2      	mvns	r2, r2
 80009ee:	40a1      	lsls	r1, r4
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80009f0:	2800      	cmp	r0, #0
 80009f2:	db0a      	blt.n	8000a0a <HAL_NVIC_SetPriority+0x32>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009f4:	24c0      	movs	r4, #192	; 0xc0
 80009f6:	4b0b      	ldr	r3, [pc, #44]	; (8000a24 <HAL_NVIC_SetPriority+0x4c>)
 80009f8:	0880      	lsrs	r0, r0, #2
 80009fa:	0080      	lsls	r0, r0, #2
 80009fc:	18c0      	adds	r0, r0, r3
 80009fe:	00a4      	lsls	r4, r4, #2
 8000a00:	5903      	ldr	r3, [r0, r4]
 8000a02:	401a      	ands	r2, r3
 8000a04:	4311      	orrs	r1, r2
 8000a06:	5101      	str	r1, [r0, r4]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000a08:	bd30      	pop	{r4, r5, pc}
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a0a:	200f      	movs	r0, #15
 8000a0c:	4003      	ands	r3, r0
 8000a0e:	3b08      	subs	r3, #8
 8000a10:	4805      	ldr	r0, [pc, #20]	; (8000a28 <HAL_NVIC_SetPriority+0x50>)
 8000a12:	089b      	lsrs	r3, r3, #2
 8000a14:	009b      	lsls	r3, r3, #2
 8000a16:	181b      	adds	r3, r3, r0
 8000a18:	69d8      	ldr	r0, [r3, #28]
 8000a1a:	4002      	ands	r2, r0
 8000a1c:	4311      	orrs	r1, r2
 8000a1e:	61d9      	str	r1, [r3, #28]
 8000a20:	e7f2      	b.n	8000a08 <HAL_NVIC_SetPriority+0x30>
 8000a22:	46c0      	nop			; (mov r8, r8)
 8000a24:	e000e100 	.word	0xe000e100
 8000a28:	e000ed00 	.word	0xe000ed00

08000a2c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000a2c:	2800      	cmp	r0, #0
 8000a2e:	db05      	blt.n	8000a3c <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a30:	231f      	movs	r3, #31
 8000a32:	4018      	ands	r0, r3
 8000a34:	3b1e      	subs	r3, #30
 8000a36:	4083      	lsls	r3, r0
 8000a38:	4a01      	ldr	r2, [pc, #4]	; (8000a40 <HAL_NVIC_EnableIRQ+0x14>)
 8000a3a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000a3c:	4770      	bx	lr
 8000a3e:	46c0      	nop			; (mov r8, r8)
 8000a40:	e000e100 	.word	0xe000e100

08000a44 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a44:	4a09      	ldr	r2, [pc, #36]	; (8000a6c <HAL_SYSTICK_Config+0x28>)
 8000a46:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a48:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d80d      	bhi.n	8000a6a <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a4e:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a50:	4a07      	ldr	r2, [pc, #28]	; (8000a70 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a52:	4808      	ldr	r0, [pc, #32]	; (8000a74 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a54:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a56:	6a03      	ldr	r3, [r0, #32]
 8000a58:	0609      	lsls	r1, r1, #24
 8000a5a:	021b      	lsls	r3, r3, #8
 8000a5c:	0a1b      	lsrs	r3, r3, #8
 8000a5e:	430b      	orrs	r3, r1
 8000a60:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a62:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a64:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a66:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a68:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000a6a:	4770      	bx	lr
 8000a6c:	00ffffff 	.word	0x00ffffff
 8000a70:	e000e010 	.word	0xe000e010
 8000a74:	e000ed00 	.word	0xe000ed00

08000a78 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000a78:	b570      	push	{r4, r5, r6, lr}
 8000a7a:	0004      	movs	r4, r0
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
  {
    return HAL_ERROR;
 8000a7c:	2501      	movs	r5, #1
  if(NULL == hdma)
 8000a7e:	2800      	cmp	r0, #0
 8000a80:	d024      	beq.n	8000acc <HAL_DMA_Init+0x54>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000a82:	2302      	movs	r3, #2
 8000a84:	1c86      	adds	r6, r0, #2

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000a86:	6800      	ldr	r0, [r0, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8000a88:	77f3      	strb	r3, [r6, #31]
  tmp = hdma->Instance->CCR;
 8000a8a:	6802      	ldr	r2, [r0, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000a8c:	4b10      	ldr	r3, [pc, #64]	; (8000ad0 <HAL_DMA_Init+0x58>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000a8e:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000a90:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8000a92:	6863      	ldr	r3, [r4, #4]
 8000a94:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a96:	68e1      	ldr	r1, [r4, #12]
 8000a98:	430b      	orrs	r3, r1
 8000a9a:	6921      	ldr	r1, [r4, #16]
 8000a9c:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a9e:	6961      	ldr	r1, [r4, #20]
 8000aa0:	430b      	orrs	r3, r1
 8000aa2:	69a1      	ldr	r1, [r4, #24]
 8000aa4:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8000aa6:	69e1      	ldr	r1, [r4, #28]
 8000aa8:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 8000aaa:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000aac:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000aae:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <HAL_DMA_Init+0x5c>)
 8000ab0:	2114      	movs	r1, #20
 8000ab2:	18c0      	adds	r0, r0, r3
 8000ab4:	f7ff fb3c 	bl	8000130 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8000ab8:	4b07      	ldr	r3, [pc, #28]	; (8000ad8 <HAL_DMA_Init+0x60>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000aba:	0080      	lsls	r0, r0, #2
  hdma->DmaBaseAddress = DMA1;
 8000abc:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000abe:	2300      	movs	r3, #0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000ac0:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ac2:	63a3      	str	r3, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8000ac4:	77f5      	strb	r5, [r6, #31]
  hdma->Lock = HAL_UNLOCKED;
 8000ac6:	1964      	adds	r4, r4, r5
  return HAL_OK;
 8000ac8:	001d      	movs	r5, r3
  hdma->Lock = HAL_UNLOCKED;
 8000aca:	77e3      	strb	r3, [r4, #31]
}  
 8000acc:	0028      	movs	r0, r5
 8000ace:	bd70      	pop	{r4, r5, r6, pc}
 8000ad0:	ffffc00f 	.word	0xffffc00f
 8000ad4:	bffdfff8 	.word	0xbffdfff8
 8000ad8:	40020000 	.word	0x40020000

08000adc <HAL_DMA_IRQHandler>:
{
 8000adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000ade:	2704      	movs	r7, #4
 8000ae0:	003e      	movs	r6, r7
 8000ae2:	6c01      	ldr	r1, [r0, #64]	; 0x40
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000ae4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000ae6:	408e      	lsls	r6, r1
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000ae8:	6815      	ldr	r5, [r2, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000aea:	6803      	ldr	r3, [r0, #0]
 8000aec:	681c      	ldr	r4, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000aee:	4235      	tst	r5, r6
 8000af0:	d00d      	beq.n	8000b0e <HAL_DMA_IRQHandler+0x32>
 8000af2:	423c      	tst	r4, r7
 8000af4:	d00b      	beq.n	8000b0e <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000af6:	6819      	ldr	r1, [r3, #0]
 8000af8:	0689      	lsls	r1, r1, #26
 8000afa:	d402      	bmi.n	8000b02 <HAL_DMA_IRQHandler+0x26>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000afc:	6819      	ldr	r1, [r3, #0]
 8000afe:	43b9      	bics	r1, r7
 8000b00:	6019      	str	r1, [r3, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 8000b02:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000b04:	6056      	str	r6, [r2, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d019      	beq.n	8000b3e <HAL_DMA_IRQHandler+0x62>
    	hdma->XferErrorCallback(hdma);
 8000b0a:	4798      	blx	r3
}  
 8000b0c:	e017      	b.n	8000b3e <HAL_DMA_IRQHandler+0x62>
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000b0e:	2702      	movs	r7, #2
 8000b10:	003e      	movs	r6, r7
 8000b12:	408e      	lsls	r6, r1
 8000b14:	4235      	tst	r5, r6
 8000b16:	d013      	beq.n	8000b40 <HAL_DMA_IRQHandler+0x64>
 8000b18:	423c      	tst	r4, r7
 8000b1a:	d011      	beq.n	8000b40 <HAL_DMA_IRQHandler+0x64>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000b1c:	6819      	ldr	r1, [r3, #0]
 8000b1e:	0689      	lsls	r1, r1, #26
 8000b20:	d406      	bmi.n	8000b30 <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000b22:	240a      	movs	r4, #10
 8000b24:	6819      	ldr	r1, [r3, #0]
 8000b26:	43a1      	bics	r1, r4
 8000b28:	6019      	str	r1, [r3, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8000b2a:	2101      	movs	r1, #1
 8000b2c:	19c3      	adds	r3, r0, r7
 8000b2e:	77d9      	strb	r1, [r3, #31]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000b30:	6056      	str	r6, [r2, #4]
  	__HAL_UNLOCK(hdma);
 8000b32:	2200      	movs	r2, #0
 8000b34:	1c43      	adds	r3, r0, #1
 8000b36:	77da      	strb	r2, [r3, #31]
  	if(hdma->XferCpltCallback != NULL)
 8000b38:	6a83      	ldr	r3, [r0, #40]	; 0x28
    if(hdma->XferErrorCallback != NULL)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d1e5      	bne.n	8000b0a <HAL_DMA_IRQHandler+0x2e>
}  
 8000b3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000b40:	2608      	movs	r6, #8
 8000b42:	0037      	movs	r7, r6
 8000b44:	408f      	lsls	r7, r1
 8000b46:	423d      	tst	r5, r7
 8000b48:	d0f9      	beq.n	8000b3e <HAL_DMA_IRQHandler+0x62>
 8000b4a:	4234      	tst	r4, r6
 8000b4c:	d0f7      	beq.n	8000b3e <HAL_DMA_IRQHandler+0x62>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b4e:	250e      	movs	r5, #14
 8000b50:	681c      	ldr	r4, [r3, #0]
 8000b52:	43ac      	bics	r4, r5
 8000b54:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000b56:	2301      	movs	r3, #1
 8000b58:	001c      	movs	r4, r3
 8000b5a:	408c      	lsls	r4, r1
 8000b5c:	6054      	str	r4, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;    
 8000b5e:	1c82      	adds	r2, r0, #2
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000b60:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8000b62:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma); 
 8000b64:	2200      	movs	r2, #0
 8000b66:	18c3      	adds	r3, r0, r3
 8000b68:	77da      	strb	r2, [r3, #31]
    if(hdma->XferErrorCallback != NULL)
 8000b6a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000b6c:	e7e5      	b.n	8000b3a <HAL_DMA_IRQHandler+0x5e>
	...

08000b70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000b70:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b72:	680b      	ldr	r3, [r1, #0]
{ 
 8000b74:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b76:	9303      	str	r3, [sp, #12]
  uint32_t position = 0x00u;
 8000b78:	2300      	movs	r3, #0
{ 
 8000b7a:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b7c:	9a03      	ldr	r2, [sp, #12]
 8000b7e:	40da      	lsrs	r2, r3
 8000b80:	d101      	bne.n	8000b86 <HAL_GPIO_Init+0x16>
      }
    }

    position++;
  } 
}
 8000b82:	b007      	add	sp, #28
 8000b84:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b86:	2201      	movs	r2, #1
 8000b88:	409a      	lsls	r2, r3
 8000b8a:	9202      	str	r2, [sp, #8]
 8000b8c:	9902      	ldr	r1, [sp, #8]
 8000b8e:	9a03      	ldr	r2, [sp, #12]
 8000b90:	400a      	ands	r2, r1
 8000b92:	9200      	str	r2, [sp, #0]
    if (iocurrent != 0x00u)
 8000b94:	d100      	bne.n	8000b98 <HAL_GPIO_Init+0x28>
 8000b96:	e088      	b.n	8000caa <HAL_GPIO_Init+0x13a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b98:	9a01      	ldr	r2, [sp, #4]
 8000b9a:	2110      	movs	r1, #16
 8000b9c:	6852      	ldr	r2, [r2, #4]
 8000b9e:	0016      	movs	r6, r2
 8000ba0:	438e      	bics	r6, r1
 8000ba2:	2e02      	cmp	r6, #2
 8000ba4:	d10e      	bne.n	8000bc4 <HAL_GPIO_Init+0x54>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ba6:	2507      	movs	r5, #7
 8000ba8:	401d      	ands	r5, r3
 8000baa:	00ad      	lsls	r5, r5, #2
 8000bac:	3901      	subs	r1, #1
 8000bae:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3u];
 8000bb0:	08dc      	lsrs	r4, r3, #3
 8000bb2:	00a4      	lsls	r4, r4, #2
 8000bb4:	1904      	adds	r4, r0, r4
 8000bb6:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000bb8:	438f      	bics	r7, r1
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bba:	9901      	ldr	r1, [sp, #4]
 8000bbc:	6909      	ldr	r1, [r1, #16]
 8000bbe:	40a9      	lsls	r1, r5
 8000bc0:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3u] = temp;
 8000bc2:	6227      	str	r7, [r4, #32]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000bc4:	2403      	movs	r4, #3
 8000bc6:	005f      	lsls	r7, r3, #1
 8000bc8:	40bc      	lsls	r4, r7
 8000bca:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 8000bcc:	6805      	ldr	r5, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bce:	3e01      	subs	r6, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000bd0:	4025      	ands	r5, r4
 8000bd2:	46ac      	mov	ip, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bd4:	2503      	movs	r5, #3
 8000bd6:	4015      	ands	r5, r2
 8000bd8:	40bd      	lsls	r5, r7
 8000bda:	4661      	mov	r1, ip
 8000bdc:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 8000bde:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000be0:	2e01      	cmp	r6, #1
 8000be2:	d80f      	bhi.n	8000c04 <HAL_GPIO_Init+0x94>
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000be4:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR;
 8000be6:	6886      	ldr	r6, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000be8:	68cd      	ldr	r5, [r1, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000bea:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bec:	40bd      	lsls	r5, r7
 8000bee:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8000bf0:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8000bf2:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bf4:	9902      	ldr	r1, [sp, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000bf6:	0915      	lsrs	r5, r2, #4
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bf8:	438e      	bics	r6, r1
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000bfa:	2101      	movs	r1, #1
 8000bfc:	400d      	ands	r5, r1
 8000bfe:	409d      	lsls	r5, r3
 8000c00:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8000c02:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 8000c04:	68c5      	ldr	r5, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c06:	9901      	ldr	r1, [sp, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c08:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c0a:	688d      	ldr	r5, [r1, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c0c:	2180      	movs	r1, #128	; 0x80
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c0e:	40bd      	lsls	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c10:	0549      	lsls	r1, r1, #21
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c12:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8000c14:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c16:	420a      	tst	r2, r1
 8000c18:	d047      	beq.n	8000caa <HAL_GPIO_Init+0x13a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1a:	2101      	movs	r1, #1
 8000c1c:	4c24      	ldr	r4, [pc, #144]	; (8000cb0 <HAL_GPIO_Init+0x140>)
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c1e:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c20:	69a5      	ldr	r5, [r4, #24]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c22:	401e      	ands	r6, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c24:	430d      	orrs	r5, r1
 8000c26:	61a5      	str	r5, [r4, #24]
 8000c28:	69a4      	ldr	r4, [r4, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000c2a:	089d      	lsrs	r5, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c2c:	400c      	ands	r4, r1
 8000c2e:	9405      	str	r4, [sp, #20]
 8000c30:	9c05      	ldr	r4, [sp, #20]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c32:	240f      	movs	r4, #15
 8000c34:	491f      	ldr	r1, [pc, #124]	; (8000cb4 <HAL_GPIO_Init+0x144>)
 8000c36:	00ad      	lsls	r5, r5, #2
 8000c38:	00b6      	lsls	r6, r6, #2
 8000c3a:	186d      	adds	r5, r5, r1
 8000c3c:	40b4      	lsls	r4, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c3e:	2190      	movs	r1, #144	; 0x90
        temp = SYSCFG->EXTICR[position >> 2u];
 8000c40:	68af      	ldr	r7, [r5, #8]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c42:	05c9      	lsls	r1, r1, #23
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c44:	43a7      	bics	r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c46:	2400      	movs	r4, #0
 8000c48:	4288      	cmp	r0, r1
 8000c4a:	d008      	beq.n	8000c5e <HAL_GPIO_Init+0xee>
 8000c4c:	491a      	ldr	r1, [pc, #104]	; (8000cb8 <HAL_GPIO_Init+0x148>)
 8000c4e:	3401      	adds	r4, #1
 8000c50:	4288      	cmp	r0, r1
 8000c52:	d004      	beq.n	8000c5e <HAL_GPIO_Init+0xee>
 8000c54:	4919      	ldr	r1, [pc, #100]	; (8000cbc <HAL_GPIO_Init+0x14c>)
 8000c56:	3404      	adds	r4, #4
 8000c58:	4288      	cmp	r0, r1
 8000c5a:	d100      	bne.n	8000c5e <HAL_GPIO_Init+0xee>
 8000c5c:	3c03      	subs	r4, #3
 8000c5e:	40b4      	lsls	r4, r6
        temp &= ~(iocurrent);
 8000c60:	9900      	ldr	r1, [sp, #0]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c62:	433c      	orrs	r4, r7
          temp |= iocurrent;
 8000c64:	000e      	movs	r6, r1
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c66:	60ac      	str	r4, [r5, #8]
        temp = EXTI->IMR;
 8000c68:	4c15      	ldr	r4, [pc, #84]	; (8000cc0 <HAL_GPIO_Init+0x150>)
        temp &= ~(iocurrent);
 8000c6a:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 8000c6c:	6827      	ldr	r7, [r4, #0]
          temp |= iocurrent;
 8000c6e:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c70:	03d1      	lsls	r1, r2, #15
 8000c72:	d401      	bmi.n	8000c78 <HAL_GPIO_Init+0x108>
        temp &= ~(iocurrent);
 8000c74:	003e      	movs	r6, r7
 8000c76:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 8000c78:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 8000c7a:	6867      	ldr	r7, [r4, #4]
          temp |= iocurrent;
 8000c7c:	9e00      	ldr	r6, [sp, #0]
 8000c7e:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c80:	0391      	lsls	r1, r2, #14
 8000c82:	d401      	bmi.n	8000c88 <HAL_GPIO_Init+0x118>
        temp &= ~(iocurrent);
 8000c84:	003e      	movs	r6, r7
 8000c86:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 8000c88:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 8000c8a:	68a7      	ldr	r7, [r4, #8]
          temp |= iocurrent;
 8000c8c:	9e00      	ldr	r6, [sp, #0]
 8000c8e:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c90:	02d1      	lsls	r1, r2, #11
 8000c92:	d401      	bmi.n	8000c98 <HAL_GPIO_Init+0x128>
        temp &= ~(iocurrent);
 8000c94:	003e      	movs	r6, r7
 8000c96:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 8000c98:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 8000c9a:	68e6      	ldr	r6, [r4, #12]
          temp |= iocurrent;
 8000c9c:	9f00      	ldr	r7, [sp, #0]
 8000c9e:	4337      	orrs	r7, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ca0:	0292      	lsls	r2, r2, #10
 8000ca2:	d401      	bmi.n	8000ca8 <HAL_GPIO_Init+0x138>
        temp &= ~(iocurrent);
 8000ca4:	402e      	ands	r6, r5
 8000ca6:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 8000ca8:	60e7      	str	r7, [r4, #12]
    position++;
 8000caa:	3301      	adds	r3, #1
 8000cac:	e766      	b.n	8000b7c <HAL_GPIO_Init+0xc>
 8000cae:	46c0      	nop			; (mov r8, r8)
 8000cb0:	40021000 	.word	0x40021000
 8000cb4:	40010000 	.word	0x40010000
 8000cb8:	48000400 	.word	0x48000400
 8000cbc:	48000800 	.word	0x48000800
 8000cc0:	40010400 	.word	0x40010400

08000cc4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	d001      	beq.n	8000ccc <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000cc8:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000cca:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ccc:	6281      	str	r1, [r0, #40]	; 0x28
}
 8000cce:	e7fc      	b.n	8000cca <HAL_GPIO_WritePin+0x6>

08000cd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000cd0:	b570      	push	{r4, r5, r6, lr}
 8000cd2:	0004      	movs	r4, r0
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
  {
    return HAL_ERROR;
 8000cd4:	2001      	movs	r0, #1
  if (hi2c == NULL)
 8000cd6:	2c00      	cmp	r4, #0
 8000cd8:	d03f      	beq.n	8000d5a <HAL_I2C_Init+0x8a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000cda:	0025      	movs	r5, r4
 8000cdc:	3541      	adds	r5, #65	; 0x41
 8000cde:	782b      	ldrb	r3, [r5, #0]
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d105      	bne.n	8000cf2 <HAL_I2C_Init+0x22>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000ce6:	0022      	movs	r2, r4
 8000ce8:	3240      	adds	r2, #64	; 0x40
 8000cea:	7013      	strb	r3, [r2, #0]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000cec:	0020      	movs	r0, r4
 8000cee:	f7ff fbfb 	bl	80004e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000cf2:	2324      	movs	r3, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000cf4:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000cf6:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8000cf8:	6823      	ldr	r3, [r4, #0]
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000cfa:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	68a6      	ldr	r6, [r4, #8]
 8000d00:	438a      	bics	r2, r1
 8000d02:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000d04:	6861      	ldr	r1, [r4, #4]
 8000d06:	4a1a      	ldr	r2, [pc, #104]	; (8000d70 <HAL_I2C_Init+0xa0>)
 8000d08:	400a      	ands	r2, r1
 8000d0a:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000d0c:	6899      	ldr	r1, [r3, #8]
 8000d0e:	4a19      	ldr	r2, [pc, #100]	; (8000d74 <HAL_I2C_Init+0xa4>)
 8000d10:	4011      	ands	r1, r2
 8000d12:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000d14:	2801      	cmp	r0, #1
 8000d16:	d121      	bne.n	8000d5c <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000d18:	2180      	movs	r1, #128	; 0x80
 8000d1a:	0209      	lsls	r1, r1, #8
 8000d1c:	4331      	orrs	r1, r6
 8000d1e:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000d20:	6858      	ldr	r0, [r3, #4]
 8000d22:	4915      	ldr	r1, [pc, #84]	; (8000d78 <HAL_I2C_Init+0xa8>)
 8000d24:	4301      	orrs	r1, r0
 8000d26:	6059      	str	r1, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000d28:	68d9      	ldr	r1, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d2a:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000d2c:	400a      	ands	r2, r1
 8000d2e:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000d30:	6961      	ldr	r1, [r4, #20]
 8000d32:	6922      	ldr	r2, [r4, #16]
 8000d34:	430a      	orrs	r2, r1
 8000d36:	69a1      	ldr	r1, [r4, #24]
 8000d38:	0209      	lsls	r1, r1, #8
 8000d3a:	430a      	orrs	r2, r1
 8000d3c:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000d3e:	6a21      	ldr	r1, [r4, #32]
 8000d40:	69e2      	ldr	r2, [r4, #28]
 8000d42:	430a      	orrs	r2, r1
 8000d44:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8000d46:	2201      	movs	r2, #1
 8000d48:	6819      	ldr	r1, [r3, #0]
 8000d4a:	430a      	orrs	r2, r1
 8000d4c:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8000d4e:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d50:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000d52:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000d54:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d56:	3442      	adds	r4, #66	; 0x42
 8000d58:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8000d5a:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000d5c:	2184      	movs	r1, #132	; 0x84
 8000d5e:	0209      	lsls	r1, r1, #8
 8000d60:	4331      	orrs	r1, r6
 8000d62:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000d64:	2802      	cmp	r0, #2
 8000d66:	d1db      	bne.n	8000d20 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000d68:	2180      	movs	r1, #128	; 0x80
 8000d6a:	0109      	lsls	r1, r1, #4
 8000d6c:	6059      	str	r1, [r3, #4]
 8000d6e:	e7d7      	b.n	8000d20 <HAL_I2C_Init+0x50>
 8000d70:	f0ffffff 	.word	0xf0ffffff
 8000d74:	ffff7fff 	.word	0xffff7fff
 8000d78:	02008000 	.word	0x02008000

08000d7c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d7e:	0004      	movs	r4, r0
 8000d80:	3441      	adds	r4, #65	; 0x41
 8000d82:	7822      	ldrb	r2, [r4, #0]
{
 8000d84:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d86:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8000d88:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d8a:	2a20      	cmp	r2, #32
 8000d8c:	d118      	bne.n	8000dc0 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_LOCK(hi2c);
 8000d8e:	001d      	movs	r5, r3
 8000d90:	3540      	adds	r5, #64	; 0x40
 8000d92:	782e      	ldrb	r6, [r5, #0]
 8000d94:	2e01      	cmp	r6, #1
 8000d96:	d013      	beq.n	8000dc0 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_I2C_DISABLE(hi2c);
 8000d98:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8000d9a:	3022      	adds	r0, #34	; 0x22
 8000d9c:	7020      	strb	r0, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 8000d9e:	681e      	ldr	r6, [r3, #0]
 8000da0:	3823      	subs	r0, #35	; 0x23
 8000da2:	4386      	bics	r6, r0
 8000da4:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000da6:	681e      	ldr	r6, [r3, #0]
 8000da8:	4f06      	ldr	r7, [pc, #24]	; (8000dc4 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
 8000daa:	403e      	ands	r6, r7
 8000dac:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8000dae:	681e      	ldr	r6, [r3, #0]
 8000db0:	4331      	orrs	r1, r6
 8000db2:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8000db4:	6819      	ldr	r1, [r3, #0]
 8000db6:	4308      	orrs	r0, r1
 8000db8:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8000dba:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000dbc:	7022      	strb	r2, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8000dbe:	7028      	strb	r0, [r5, #0]
  }
}
 8000dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dc2:	46c0      	nop			; (mov r8, r8)
 8000dc4:	ffffefff 	.word	0xffffefff

08000dc8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000dc8:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000dca:	0005      	movs	r5, r0
 8000dcc:	3541      	adds	r5, #65	; 0x41
 8000dce:	782a      	ldrb	r2, [r5, #0]
{
 8000dd0:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000dd2:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8000dd4:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000dd6:	2a20      	cmp	r2, #32
 8000dd8:	d117      	bne.n	8000e0a <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8000dda:	001c      	movs	r4, r3
 8000ddc:	3440      	adds	r4, #64	; 0x40
 8000dde:	7826      	ldrb	r6, [r4, #0]
 8000de0:	2e01      	cmp	r6, #1
 8000de2:	d012      	beq.n	8000e0a <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_I2C_DISABLE(hi2c);
 8000de4:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8000de6:	3022      	adds	r0, #34	; 0x22
 8000de8:	7028      	strb	r0, [r5, #0]
    __HAL_I2C_DISABLE(hi2c);
 8000dea:	681e      	ldr	r6, [r3, #0]
 8000dec:	3823      	subs	r0, #35	; 0x23
 8000dee:	4386      	bics	r6, r0
 8000df0:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8000df2:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8000df4:	4f05      	ldr	r7, [pc, #20]	; (8000e0c <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    tmpreg |= DigitalFilter << 8U;
 8000df6:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8000df8:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8000dfa:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 8000dfc:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8000dfe:	6819      	ldr	r1, [r3, #0]
 8000e00:	4308      	orrs	r0, r1
 8000e02:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8000e04:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000e06:	702a      	strb	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8000e08:	7020      	strb	r0, [r4, #0]
  }
}
 8000e0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e0c:	fffff0ff 	.word	0xfffff0ff

08000e10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e12:	0004      	movs	r4, r0
 8000e14:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e16:	2800      	cmp	r0, #0
 8000e18:	d102      	bne.n	8000e20 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000e1a:	2001      	movs	r0, #1
      }
    }
  }

  return HAL_OK;
}
 8000e1c:	b005      	add	sp, #20
 8000e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e20:	6803      	ldr	r3, [r0, #0]
 8000e22:	07db      	lsls	r3, r3, #31
 8000e24:	d433      	bmi.n	8000e8e <HAL_RCC_OscConfig+0x7e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e26:	6823      	ldr	r3, [r4, #0]
 8000e28:	079b      	lsls	r3, r3, #30
 8000e2a:	d500      	bpl.n	8000e2e <HAL_RCC_OscConfig+0x1e>
 8000e2c:	e087      	b.n	8000f3e <HAL_RCC_OscConfig+0x12e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e2e:	6823      	ldr	r3, [r4, #0]
 8000e30:	071b      	lsls	r3, r3, #28
 8000e32:	d500      	bpl.n	8000e36 <HAL_RCC_OscConfig+0x26>
 8000e34:	e0c8      	b.n	8000fc8 <HAL_RCC_OscConfig+0x1b8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e36:	6823      	ldr	r3, [r4, #0]
 8000e38:	075b      	lsls	r3, r3, #29
 8000e3a:	d500      	bpl.n	8000e3e <HAL_RCC_OscConfig+0x2e>
 8000e3c:	e0eb      	b.n	8001016 <HAL_RCC_OscConfig+0x206>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000e3e:	6823      	ldr	r3, [r4, #0]
 8000e40:	06db      	lsls	r3, r3, #27
 8000e42:	d51a      	bpl.n	8000e7a <HAL_RCC_OscConfig+0x6a>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000e44:	6962      	ldr	r2, [r4, #20]
 8000e46:	4dbc      	ldr	r5, [pc, #752]	; (8001138 <HAL_RCC_OscConfig+0x328>)
 8000e48:	2304      	movs	r3, #4
 8000e4a:	2a01      	cmp	r2, #1
 8000e4c:	d000      	beq.n	8000e50 <HAL_RCC_OscConfig+0x40>
 8000e4e:	e157      	b.n	8001100 <HAL_RCC_OscConfig+0x2f0>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000e50:	6b69      	ldr	r1, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000e52:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000e54:	430b      	orrs	r3, r1
 8000e56:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8000e58:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000e5a:	431a      	orrs	r2, r3
 8000e5c:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000e5e:	f7ff fc3b 	bl	80006d8 <HAL_GetTick>
 8000e62:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000e64:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000e66:	4233      	tst	r3, r6
 8000e68:	d100      	bne.n	8000e6c <HAL_RCC_OscConfig+0x5c>
 8000e6a:	e142      	b.n	80010f2 <HAL_RCC_OscConfig+0x2e2>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000e6c:	21f8      	movs	r1, #248	; 0xf8
 8000e6e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000e70:	69a3      	ldr	r3, [r4, #24]
 8000e72:	438a      	bics	r2, r1
 8000e74:	00db      	lsls	r3, r3, #3
 8000e76:	4313      	orrs	r3, r2
 8000e78:	636b      	str	r3, [r5, #52]	; 0x34
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000e7a:	6823      	ldr	r3, [r4, #0]
 8000e7c:	069b      	lsls	r3, r3, #26
 8000e7e:	d500      	bpl.n	8000e82 <HAL_RCC_OscConfig+0x72>
 8000e80:	e166      	b.n	8001150 <HAL_RCC_OscConfig+0x340>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e82:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000e84:	2a00      	cmp	r2, #0
 8000e86:	d000      	beq.n	8000e8a <HAL_RCC_OscConfig+0x7a>
 8000e88:	e1a3      	b.n	80011d2 <HAL_RCC_OscConfig+0x3c2>
  return HAL_OK;
 8000e8a:	2000      	movs	r0, #0
 8000e8c:	e7c6      	b.n	8000e1c <HAL_RCC_OscConfig+0xc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e8e:	210c      	movs	r1, #12
 8000e90:	4da9      	ldr	r5, [pc, #676]	; (8001138 <HAL_RCC_OscConfig+0x328>)
 8000e92:	686a      	ldr	r2, [r5, #4]
 8000e94:	400a      	ands	r2, r1
 8000e96:	2a04      	cmp	r2, #4
 8000e98:	d00b      	beq.n	8000eb2 <HAL_RCC_OscConfig+0xa2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e9a:	686b      	ldr	r3, [r5, #4]
 8000e9c:	400b      	ands	r3, r1
 8000e9e:	2b08      	cmp	r3, #8
 8000ea0:	d10e      	bne.n	8000ec0 <HAL_RCC_OscConfig+0xb0>
 8000ea2:	22c0      	movs	r2, #192	; 0xc0
 8000ea4:	686b      	ldr	r3, [r5, #4]
 8000ea6:	0252      	lsls	r2, r2, #9
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	2280      	movs	r2, #128	; 0x80
 8000eac:	0252      	lsls	r2, r2, #9
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d106      	bne.n	8000ec0 <HAL_RCC_OscConfig+0xb0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000eb2:	682b      	ldr	r3, [r5, #0]
 8000eb4:	039b      	lsls	r3, r3, #14
 8000eb6:	d5b6      	bpl.n	8000e26 <HAL_RCC_OscConfig+0x16>
 8000eb8:	6863      	ldr	r3, [r4, #4]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d1b3      	bne.n	8000e26 <HAL_RCC_OscConfig+0x16>
 8000ebe:	e7ac      	b.n	8000e1a <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ec0:	6863      	ldr	r3, [r4, #4]
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d113      	bne.n	8000eee <HAL_RCC_OscConfig+0xde>
 8000ec6:	2380      	movs	r3, #128	; 0x80
 8000ec8:	682a      	ldr	r2, [r5, #0]
 8000eca:	025b      	lsls	r3, r3, #9
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000ed0:	f7ff fc02 	bl	80006d8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ed4:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000ed6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ed8:	02b6      	lsls	r6, r6, #10
 8000eda:	682b      	ldr	r3, [r5, #0]
 8000edc:	4233      	tst	r3, r6
 8000ede:	d1a2      	bne.n	8000e26 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ee0:	f7ff fbfa 	bl	80006d8 <HAL_GetTick>
 8000ee4:	1bc0      	subs	r0, r0, r7
 8000ee6:	2864      	cmp	r0, #100	; 0x64
 8000ee8:	d9f7      	bls.n	8000eda <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 8000eea:	2003      	movs	r0, #3
 8000eec:	e796      	b.n	8000e1c <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d115      	bne.n	8000f1e <HAL_RCC_OscConfig+0x10e>
 8000ef2:	682b      	ldr	r3, [r5, #0]
 8000ef4:	4a91      	ldr	r2, [pc, #580]	; (800113c <HAL_RCC_OscConfig+0x32c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ef6:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ef8:	4013      	ands	r3, r2
 8000efa:	602b      	str	r3, [r5, #0]
 8000efc:	682b      	ldr	r3, [r5, #0]
 8000efe:	4a90      	ldr	r2, [pc, #576]	; (8001140 <HAL_RCC_OscConfig+0x330>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f00:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f02:	4013      	ands	r3, r2
 8000f04:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000f06:	f7ff fbe7 	bl	80006d8 <HAL_GetTick>
 8000f0a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f0c:	682b      	ldr	r3, [r5, #0]
 8000f0e:	4233      	tst	r3, r6
 8000f10:	d089      	beq.n	8000e26 <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f12:	f7ff fbe1 	bl	80006d8 <HAL_GetTick>
 8000f16:	1bc0      	subs	r0, r0, r7
 8000f18:	2864      	cmp	r0, #100	; 0x64
 8000f1a:	d9f7      	bls.n	8000f0c <HAL_RCC_OscConfig+0xfc>
 8000f1c:	e7e5      	b.n	8000eea <HAL_RCC_OscConfig+0xda>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f1e:	2b05      	cmp	r3, #5
 8000f20:	d105      	bne.n	8000f2e <HAL_RCC_OscConfig+0x11e>
 8000f22:	2380      	movs	r3, #128	; 0x80
 8000f24:	682a      	ldr	r2, [r5, #0]
 8000f26:	02db      	lsls	r3, r3, #11
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	602b      	str	r3, [r5, #0]
 8000f2c:	e7cb      	b.n	8000ec6 <HAL_RCC_OscConfig+0xb6>
 8000f2e:	682b      	ldr	r3, [r5, #0]
 8000f30:	4a82      	ldr	r2, [pc, #520]	; (800113c <HAL_RCC_OscConfig+0x32c>)
 8000f32:	4013      	ands	r3, r2
 8000f34:	602b      	str	r3, [r5, #0]
 8000f36:	682b      	ldr	r3, [r5, #0]
 8000f38:	4a81      	ldr	r2, [pc, #516]	; (8001140 <HAL_RCC_OscConfig+0x330>)
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	e7c7      	b.n	8000ece <HAL_RCC_OscConfig+0xbe>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f3e:	220c      	movs	r2, #12
 8000f40:	4d7d      	ldr	r5, [pc, #500]	; (8001138 <HAL_RCC_OscConfig+0x328>)
 8000f42:	686b      	ldr	r3, [r5, #4]
 8000f44:	4213      	tst	r3, r2
 8000f46:	d00b      	beq.n	8000f60 <HAL_RCC_OscConfig+0x150>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000f48:	686b      	ldr	r3, [r5, #4]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	2b08      	cmp	r3, #8
 8000f4e:	d116      	bne.n	8000f7e <HAL_RCC_OscConfig+0x16e>
 8000f50:	22c0      	movs	r2, #192	; 0xc0
 8000f52:	686b      	ldr	r3, [r5, #4]
 8000f54:	0252      	lsls	r2, r2, #9
 8000f56:	4013      	ands	r3, r2
 8000f58:	2280      	movs	r2, #128	; 0x80
 8000f5a:	0212      	lsls	r2, r2, #8
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d10e      	bne.n	8000f7e <HAL_RCC_OscConfig+0x16e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f60:	682b      	ldr	r3, [r5, #0]
 8000f62:	079b      	lsls	r3, r3, #30
 8000f64:	d503      	bpl.n	8000f6e <HAL_RCC_OscConfig+0x15e>
 8000f66:	68e3      	ldr	r3, [r4, #12]
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d000      	beq.n	8000f6e <HAL_RCC_OscConfig+0x15e>
 8000f6c:	e755      	b.n	8000e1a <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f6e:	21f8      	movs	r1, #248	; 0xf8
 8000f70:	682a      	ldr	r2, [r5, #0]
 8000f72:	6923      	ldr	r3, [r4, #16]
 8000f74:	438a      	bics	r2, r1
 8000f76:	00db      	lsls	r3, r3, #3
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	602b      	str	r3, [r5, #0]
 8000f7c:	e757      	b.n	8000e2e <HAL_RCC_OscConfig+0x1e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f7e:	68e2      	ldr	r2, [r4, #12]
 8000f80:	2301      	movs	r3, #1
 8000f82:	2a00      	cmp	r2, #0
 8000f84:	d00f      	beq.n	8000fa6 <HAL_RCC_OscConfig+0x196>
        __HAL_RCC_HSI_ENABLE();
 8000f86:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f88:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000f8e:	f7ff fba3 	bl	80006d8 <HAL_GetTick>
 8000f92:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f94:	682b      	ldr	r3, [r5, #0]
 8000f96:	4233      	tst	r3, r6
 8000f98:	d1e9      	bne.n	8000f6e <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f9a:	f7ff fb9d 	bl	80006d8 <HAL_GetTick>
 8000f9e:	1bc0      	subs	r0, r0, r7
 8000fa0:	2802      	cmp	r0, #2
 8000fa2:	d9f7      	bls.n	8000f94 <HAL_RCC_OscConfig+0x184>
 8000fa4:	e7a1      	b.n	8000eea <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_HSI_DISABLE();
 8000fa6:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fa8:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 8000faa:	439a      	bics	r2, r3
 8000fac:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 8000fae:	f7ff fb93 	bl	80006d8 <HAL_GetTick>
 8000fb2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fb4:	682b      	ldr	r3, [r5, #0]
 8000fb6:	4233      	tst	r3, r6
 8000fb8:	d100      	bne.n	8000fbc <HAL_RCC_OscConfig+0x1ac>
 8000fba:	e738      	b.n	8000e2e <HAL_RCC_OscConfig+0x1e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fbc:	f7ff fb8c 	bl	80006d8 <HAL_GetTick>
 8000fc0:	1bc0      	subs	r0, r0, r7
 8000fc2:	2802      	cmp	r0, #2
 8000fc4:	d9f6      	bls.n	8000fb4 <HAL_RCC_OscConfig+0x1a4>
 8000fc6:	e790      	b.n	8000eea <HAL_RCC_OscConfig+0xda>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fc8:	69e2      	ldr	r2, [r4, #28]
 8000fca:	2301      	movs	r3, #1
 8000fcc:	4d5a      	ldr	r5, [pc, #360]	; (8001138 <HAL_RCC_OscConfig+0x328>)
 8000fce:	2a00      	cmp	r2, #0
 8000fd0:	d010      	beq.n	8000ff4 <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_LSI_ENABLE();
 8000fd2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fd4:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000fda:	f7ff fb7d 	bl	80006d8 <HAL_GetTick>
 8000fde:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fe0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000fe2:	4233      	tst	r3, r6
 8000fe4:	d000      	beq.n	8000fe8 <HAL_RCC_OscConfig+0x1d8>
 8000fe6:	e726      	b.n	8000e36 <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fe8:	f7ff fb76 	bl	80006d8 <HAL_GetTick>
 8000fec:	1bc0      	subs	r0, r0, r7
 8000fee:	2802      	cmp	r0, #2
 8000ff0:	d9f6      	bls.n	8000fe0 <HAL_RCC_OscConfig+0x1d0>
 8000ff2:	e77a      	b.n	8000eea <HAL_RCC_OscConfig+0xda>
      __HAL_RCC_LSI_DISABLE();
 8000ff4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ff6:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 8000ff8:	439a      	bics	r2, r3
 8000ffa:	626a      	str	r2, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000ffc:	f7ff fb6c 	bl	80006d8 <HAL_GetTick>
 8001000:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001002:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001004:	4233      	tst	r3, r6
 8001006:	d100      	bne.n	800100a <HAL_RCC_OscConfig+0x1fa>
 8001008:	e715      	b.n	8000e36 <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800100a:	f7ff fb65 	bl	80006d8 <HAL_GetTick>
 800100e:	1bc0      	subs	r0, r0, r7
 8001010:	2802      	cmp	r0, #2
 8001012:	d9f6      	bls.n	8001002 <HAL_RCC_OscConfig+0x1f2>
 8001014:	e769      	b.n	8000eea <HAL_RCC_OscConfig+0xda>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001016:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001018:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800101a:	4d47      	ldr	r5, [pc, #284]	; (8001138 <HAL_RCC_OscConfig+0x328>)
 800101c:	0552      	lsls	r2, r2, #21
 800101e:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 8001020:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001022:	4213      	tst	r3, r2
 8001024:	d108      	bne.n	8001038 <HAL_RCC_OscConfig+0x228>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001026:	69eb      	ldr	r3, [r5, #28]
 8001028:	4313      	orrs	r3, r2
 800102a:	61eb      	str	r3, [r5, #28]
 800102c:	69eb      	ldr	r3, [r5, #28]
 800102e:	4013      	ands	r3, r2
 8001030:	9303      	str	r3, [sp, #12]
 8001032:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8001034:	2301      	movs	r3, #1
 8001036:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001038:	2780      	movs	r7, #128	; 0x80
 800103a:	4e42      	ldr	r6, [pc, #264]	; (8001144 <HAL_RCC_OscConfig+0x334>)
 800103c:	007f      	lsls	r7, r7, #1
 800103e:	6833      	ldr	r3, [r6, #0]
 8001040:	423b      	tst	r3, r7
 8001042:	d006      	beq.n	8001052 <HAL_RCC_OscConfig+0x242>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001044:	68a3      	ldr	r3, [r4, #8]
 8001046:	2b01      	cmp	r3, #1
 8001048:	d113      	bne.n	8001072 <HAL_RCC_OscConfig+0x262>
 800104a:	6a2a      	ldr	r2, [r5, #32]
 800104c:	4313      	orrs	r3, r2
 800104e:	622b      	str	r3, [r5, #32]
 8001050:	e030      	b.n	80010b4 <HAL_RCC_OscConfig+0x2a4>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001052:	6833      	ldr	r3, [r6, #0]
 8001054:	433b      	orrs	r3, r7
 8001056:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001058:	f7ff fb3e 	bl	80006d8 <HAL_GetTick>
 800105c:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800105e:	6833      	ldr	r3, [r6, #0]
 8001060:	423b      	tst	r3, r7
 8001062:	d1ef      	bne.n	8001044 <HAL_RCC_OscConfig+0x234>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001064:	f7ff fb38 	bl	80006d8 <HAL_GetTick>
 8001068:	9b01      	ldr	r3, [sp, #4]
 800106a:	1ac0      	subs	r0, r0, r3
 800106c:	2864      	cmp	r0, #100	; 0x64
 800106e:	d9f6      	bls.n	800105e <HAL_RCC_OscConfig+0x24e>
 8001070:	e73b      	b.n	8000eea <HAL_RCC_OscConfig+0xda>
 8001072:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001074:	2b00      	cmp	r3, #0
 8001076:	d114      	bne.n	80010a2 <HAL_RCC_OscConfig+0x292>
 8001078:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800107a:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800107c:	4393      	bics	r3, r2
 800107e:	622b      	str	r3, [r5, #32]
 8001080:	6a2b      	ldr	r3, [r5, #32]
 8001082:	3203      	adds	r2, #3
 8001084:	4393      	bics	r3, r2
 8001086:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8001088:	f7ff fb26 	bl	80006d8 <HAL_GetTick>
 800108c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800108e:	6a2b      	ldr	r3, [r5, #32]
 8001090:	423b      	tst	r3, r7
 8001092:	d025      	beq.n	80010e0 <HAL_RCC_OscConfig+0x2d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001094:	f7ff fb20 	bl	80006d8 <HAL_GetTick>
 8001098:	4b2b      	ldr	r3, [pc, #172]	; (8001148 <HAL_RCC_OscConfig+0x338>)
 800109a:	1b80      	subs	r0, r0, r6
 800109c:	4298      	cmp	r0, r3
 800109e:	d9f6      	bls.n	800108e <HAL_RCC_OscConfig+0x27e>
 80010a0:	e723      	b.n	8000eea <HAL_RCC_OscConfig+0xda>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010a2:	2b05      	cmp	r3, #5
 80010a4:	d10b      	bne.n	80010be <HAL_RCC_OscConfig+0x2ae>
 80010a6:	6a29      	ldr	r1, [r5, #32]
 80010a8:	3b01      	subs	r3, #1
 80010aa:	430b      	orrs	r3, r1
 80010ac:	622b      	str	r3, [r5, #32]
 80010ae:	6a2b      	ldr	r3, [r5, #32]
 80010b0:	431a      	orrs	r2, r3
 80010b2:	622a      	str	r2, [r5, #32]
      tickstart = HAL_GetTick();
 80010b4:	f7ff fb10 	bl	80006d8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010b8:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 80010ba:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010bc:	e00d      	b.n	80010da <HAL_RCC_OscConfig+0x2ca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010be:	6a2b      	ldr	r3, [r5, #32]
 80010c0:	4393      	bics	r3, r2
 80010c2:	2204      	movs	r2, #4
 80010c4:	622b      	str	r3, [r5, #32]
 80010c6:	6a2b      	ldr	r3, [r5, #32]
 80010c8:	4393      	bics	r3, r2
 80010ca:	e7c0      	b.n	800104e <HAL_RCC_OscConfig+0x23e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010cc:	f7ff fb04 	bl	80006d8 <HAL_GetTick>
 80010d0:	4b1d      	ldr	r3, [pc, #116]	; (8001148 <HAL_RCC_OscConfig+0x338>)
 80010d2:	1b80      	subs	r0, r0, r6
 80010d4:	4298      	cmp	r0, r3
 80010d6:	d900      	bls.n	80010da <HAL_RCC_OscConfig+0x2ca>
 80010d8:	e707      	b.n	8000eea <HAL_RCC_OscConfig+0xda>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010da:	6a2b      	ldr	r3, [r5, #32]
 80010dc:	423b      	tst	r3, r7
 80010de:	d0f5      	beq.n	80010cc <HAL_RCC_OscConfig+0x2bc>
    if(pwrclkchanged == SET)
 80010e0:	9b00      	ldr	r3, [sp, #0]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d000      	beq.n	80010e8 <HAL_RCC_OscConfig+0x2d8>
 80010e6:	e6aa      	b.n	8000e3e <HAL_RCC_OscConfig+0x2e>
      __HAL_RCC_PWR_CLK_DISABLE();
 80010e8:	69eb      	ldr	r3, [r5, #28]
 80010ea:	4a18      	ldr	r2, [pc, #96]	; (800114c <HAL_RCC_OscConfig+0x33c>)
 80010ec:	4013      	ands	r3, r2
 80010ee:	61eb      	str	r3, [r5, #28]
 80010f0:	e6a5      	b.n	8000e3e <HAL_RCC_OscConfig+0x2e>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80010f2:	f7ff faf1 	bl	80006d8 <HAL_GetTick>
 80010f6:	1bc0      	subs	r0, r0, r7
 80010f8:	2802      	cmp	r0, #2
 80010fa:	d800      	bhi.n	80010fe <HAL_RCC_OscConfig+0x2ee>
 80010fc:	e6b2      	b.n	8000e64 <HAL_RCC_OscConfig+0x54>
 80010fe:	e6f4      	b.n	8000eea <HAL_RCC_OscConfig+0xda>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001100:	3205      	adds	r2, #5
 8001102:	d103      	bne.n	800110c <HAL_RCC_OscConfig+0x2fc>
      __HAL_RCC_HSI14ADC_ENABLE();
 8001104:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001106:	439a      	bics	r2, r3
 8001108:	636a      	str	r2, [r5, #52]	; 0x34
 800110a:	e6af      	b.n	8000e6c <HAL_RCC_OscConfig+0x5c>
      __HAL_RCC_HSI14ADC_DISABLE();
 800110c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800110e:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8001110:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8001112:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8001114:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8001116:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001118:	4393      	bics	r3, r2
 800111a:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 800111c:	f7ff fadc 	bl	80006d8 <HAL_GetTick>
 8001120:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001122:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001124:	4233      	tst	r3, r6
 8001126:	d100      	bne.n	800112a <HAL_RCC_OscConfig+0x31a>
 8001128:	e6a7      	b.n	8000e7a <HAL_RCC_OscConfig+0x6a>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800112a:	f7ff fad5 	bl	80006d8 <HAL_GetTick>
 800112e:	1bc0      	subs	r0, r0, r7
 8001130:	2802      	cmp	r0, #2
 8001132:	d9f6      	bls.n	8001122 <HAL_RCC_OscConfig+0x312>
 8001134:	e6d9      	b.n	8000eea <HAL_RCC_OscConfig+0xda>
 8001136:	46c0      	nop			; (mov r8, r8)
 8001138:	40021000 	.word	0x40021000
 800113c:	fffeffff 	.word	0xfffeffff
 8001140:	fffbffff 	.word	0xfffbffff
 8001144:	40007000 	.word	0x40007000
 8001148:	00001388 	.word	0x00001388
 800114c:	efffffff 	.word	0xefffffff
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001150:	210c      	movs	r1, #12
 8001152:	4d53      	ldr	r5, [pc, #332]	; (80012a0 <HAL_RCC_OscConfig+0x490>)
 8001154:	686a      	ldr	r2, [r5, #4]
 8001156:	400a      	ands	r2, r1
 8001158:	428a      	cmp	r2, r1
 800115a:	d009      	beq.n	8001170 <HAL_RCC_OscConfig+0x360>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800115c:	686b      	ldr	r3, [r5, #4]
 800115e:	400b      	ands	r3, r1
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001160:	2b08      	cmp	r3, #8
 8001162:	d10e      	bne.n	8001182 <HAL_RCC_OscConfig+0x372>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001164:	22c0      	movs	r2, #192	; 0xc0
 8001166:	686b      	ldr	r3, [r5, #4]
 8001168:	0252      	lsls	r2, r2, #9
 800116a:	4013      	ands	r3, r2
 800116c:	4293      	cmp	r3, r2
 800116e:	d108      	bne.n	8001182 <HAL_RCC_OscConfig+0x372>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001170:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001172:	03db      	lsls	r3, r3, #15
 8001174:	d400      	bmi.n	8001178 <HAL_RCC_OscConfig+0x368>
 8001176:	e684      	b.n	8000e82 <HAL_RCC_OscConfig+0x72>
 8001178:	6a23      	ldr	r3, [r4, #32]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d000      	beq.n	8001180 <HAL_RCC_OscConfig+0x370>
 800117e:	e64c      	b.n	8000e1a <HAL_RCC_OscConfig+0xa>
 8001180:	e67f      	b.n	8000e82 <HAL_RCC_OscConfig+0x72>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001182:	6a23      	ldr	r3, [r4, #32]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d011      	beq.n	80011ac <HAL_RCC_OscConfig+0x39c>
        __HAL_RCC_HSI48_ENABLE();
 8001188:	2680      	movs	r6, #128	; 0x80
 800118a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800118c:	0276      	lsls	r6, r6, #9
 800118e:	4333      	orrs	r3, r6
 8001190:	636b      	str	r3, [r5, #52]	; 0x34
        tickstart = HAL_GetTick();
 8001192:	f7ff faa1 	bl	80006d8 <HAL_GetTick>
 8001196:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001198:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800119a:	4233      	tst	r3, r6
 800119c:	d000      	beq.n	80011a0 <HAL_RCC_OscConfig+0x390>
 800119e:	e670      	b.n	8000e82 <HAL_RCC_OscConfig+0x72>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80011a0:	f7ff fa9a 	bl	80006d8 <HAL_GetTick>
 80011a4:	1bc0      	subs	r0, r0, r7
 80011a6:	2802      	cmp	r0, #2
 80011a8:	d9f6      	bls.n	8001198 <HAL_RCC_OscConfig+0x388>
 80011aa:	e69e      	b.n	8000eea <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_HSI48_DISABLE();
 80011ac:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80011ae:	4a3d      	ldr	r2, [pc, #244]	; (80012a4 <HAL_RCC_OscConfig+0x494>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80011b0:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_HSI48_DISABLE();
 80011b2:	4013      	ands	r3, r2
 80011b4:	636b      	str	r3, [r5, #52]	; 0x34
        tickstart = HAL_GetTick();
 80011b6:	f7ff fa8f 	bl	80006d8 <HAL_GetTick>
 80011ba:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80011bc:	0276      	lsls	r6, r6, #9
 80011be:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80011c0:	4233      	tst	r3, r6
 80011c2:	d100      	bne.n	80011c6 <HAL_RCC_OscConfig+0x3b6>
 80011c4:	e65d      	b.n	8000e82 <HAL_RCC_OscConfig+0x72>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80011c6:	f7ff fa87 	bl	80006d8 <HAL_GetTick>
 80011ca:	1bc0      	subs	r0, r0, r7
 80011cc:	2802      	cmp	r0, #2
 80011ce:	d9f6      	bls.n	80011be <HAL_RCC_OscConfig+0x3ae>
 80011d0:	e68b      	b.n	8000eea <HAL_RCC_OscConfig+0xda>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011d2:	200c      	movs	r0, #12
 80011d4:	4b32      	ldr	r3, [pc, #200]	; (80012a0 <HAL_RCC_OscConfig+0x490>)
 80011d6:	6859      	ldr	r1, [r3, #4]
 80011d8:	001d      	movs	r5, r3
 80011da:	4001      	ands	r1, r0
 80011dc:	2908      	cmp	r1, #8
 80011de:	d044      	beq.n	800126a <HAL_RCC_OscConfig+0x45a>
        __HAL_RCC_PLL_DISABLE();
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4931      	ldr	r1, [pc, #196]	; (80012a8 <HAL_RCC_OscConfig+0x498>)
 80011e4:	400b      	ands	r3, r1
 80011e6:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011e8:	2a02      	cmp	r2, #2
 80011ea:	d12f      	bne.n	800124c <HAL_RCC_OscConfig+0x43c>
        tickstart = HAL_GetTick();
 80011ec:	f7ff fa74 	bl	80006d8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011f0:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80011f2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011f4:	04b6      	lsls	r6, r6, #18
 80011f6:	682b      	ldr	r3, [r5, #0]
 80011f8:	4233      	tst	r3, r6
 80011fa:	d121      	bne.n	8001240 <HAL_RCC_OscConfig+0x430>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011fc:	220f      	movs	r2, #15
 80011fe:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001200:	4393      	bics	r3, r2
 8001202:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001204:	4313      	orrs	r3, r2
 8001206:	62eb      	str	r3, [r5, #44]	; 0x2c
 8001208:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800120a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800120c:	686a      	ldr	r2, [r5, #4]
 800120e:	430b      	orrs	r3, r1
 8001210:	4926      	ldr	r1, [pc, #152]	; (80012ac <HAL_RCC_OscConfig+0x49c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001212:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001214:	400a      	ands	r2, r1
 8001216:	4313      	orrs	r3, r2
 8001218:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800121a:	2380      	movs	r3, #128	; 0x80
 800121c:	682a      	ldr	r2, [r5, #0]
 800121e:	045b      	lsls	r3, r3, #17
 8001220:	4313      	orrs	r3, r2
 8001222:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001224:	f7ff fa58 	bl	80006d8 <HAL_GetTick>
 8001228:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800122a:	04a4      	lsls	r4, r4, #18
 800122c:	682b      	ldr	r3, [r5, #0]
 800122e:	4223      	tst	r3, r4
 8001230:	d000      	beq.n	8001234 <HAL_RCC_OscConfig+0x424>
 8001232:	e62a      	b.n	8000e8a <HAL_RCC_OscConfig+0x7a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001234:	f7ff fa50 	bl	80006d8 <HAL_GetTick>
 8001238:	1b80      	subs	r0, r0, r6
 800123a:	2802      	cmp	r0, #2
 800123c:	d9f6      	bls.n	800122c <HAL_RCC_OscConfig+0x41c>
 800123e:	e654      	b.n	8000eea <HAL_RCC_OscConfig+0xda>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001240:	f7ff fa4a 	bl	80006d8 <HAL_GetTick>
 8001244:	1bc0      	subs	r0, r0, r7
 8001246:	2802      	cmp	r0, #2
 8001248:	d9d5      	bls.n	80011f6 <HAL_RCC_OscConfig+0x3e6>
 800124a:	e64e      	b.n	8000eea <HAL_RCC_OscConfig+0xda>
        tickstart = HAL_GetTick();
 800124c:	f7ff fa44 	bl	80006d8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001250:	2480      	movs	r4, #128	; 0x80
        tickstart = HAL_GetTick();
 8001252:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001254:	04a4      	lsls	r4, r4, #18
 8001256:	682b      	ldr	r3, [r5, #0]
 8001258:	4223      	tst	r3, r4
 800125a:	d100      	bne.n	800125e <HAL_RCC_OscConfig+0x44e>
 800125c:	e615      	b.n	8000e8a <HAL_RCC_OscConfig+0x7a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800125e:	f7ff fa3b 	bl	80006d8 <HAL_GetTick>
 8001262:	1b80      	subs	r0, r0, r6
 8001264:	2802      	cmp	r0, #2
 8001266:	d9f6      	bls.n	8001256 <HAL_RCC_OscConfig+0x446>
 8001268:	e63f      	b.n	8000eea <HAL_RCC_OscConfig+0xda>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800126a:	2a01      	cmp	r2, #1
 800126c:	d100      	bne.n	8001270 <HAL_RCC_OscConfig+0x460>
 800126e:	e5d4      	b.n	8000e1a <HAL_RCC_OscConfig+0xa>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001270:	22c0      	movs	r2, #192	; 0xc0
        pll_config  = RCC->CFGR;
 8001272:	6858      	ldr	r0, [r3, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001274:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001276:	0252      	lsls	r2, r2, #9
        pll_config2 = RCC->CFGR2;
 8001278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800127a:	4002      	ands	r2, r0
 800127c:	428a      	cmp	r2, r1
 800127e:	d000      	beq.n	8001282 <HAL_RCC_OscConfig+0x472>
 8001280:	e5cb      	b.n	8000e1a <HAL_RCC_OscConfig+0xa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001282:	220f      	movs	r2, #15
 8001284:	4013      	ands	r3, r2
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001286:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001288:	4293      	cmp	r3, r2
 800128a:	d000      	beq.n	800128e <HAL_RCC_OscConfig+0x47e>
 800128c:	e5c5      	b.n	8000e1a <HAL_RCC_OscConfig+0xa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800128e:	23f0      	movs	r3, #240	; 0xf0
 8001290:	039b      	lsls	r3, r3, #14
 8001292:	4018      	ands	r0, r3
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001294:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001296:	1ac0      	subs	r0, r0, r3
 8001298:	1e43      	subs	r3, r0, #1
 800129a:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 800129c:	b2c0      	uxtb	r0, r0
 800129e:	e5bd      	b.n	8000e1c <HAL_RCC_OscConfig+0xc>
 80012a0:	40021000 	.word	0x40021000
 80012a4:	fffeffff 	.word	0xfffeffff
 80012a8:	feffffff 	.word	0xfeffffff
 80012ac:	ffc27fff 	.word	0xffc27fff

080012b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012b0:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80012b2:	4c1b      	ldr	r4, [pc, #108]	; (8001320 <HAL_RCC_GetSysClockFreq+0x70>)
{
 80012b4:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80012b6:	2210      	movs	r2, #16
 80012b8:	0021      	movs	r1, r4
 80012ba:	4668      	mov	r0, sp
 80012bc:	f000 fb48 	bl	8001950 <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80012c0:	0021      	movs	r1, r4
 80012c2:	ad04      	add	r5, sp, #16
 80012c4:	2210      	movs	r2, #16
 80012c6:	3110      	adds	r1, #16
 80012c8:	0028      	movs	r0, r5
 80012ca:	f000 fb41 	bl	8001950 <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80012ce:	200c      	movs	r0, #12
  tmpreg = RCC->CFGR;
 80012d0:	4a14      	ldr	r2, [pc, #80]	; (8001324 <HAL_RCC_GetSysClockFreq+0x74>)
 80012d2:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80012d4:	4018      	ands	r0, r3
 80012d6:	2808      	cmp	r0, #8
 80012d8:	d009      	beq.n	80012ee <HAL_RCC_GetSysClockFreq+0x3e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80012da:	380c      	subs	r0, #12
 80012dc:	4243      	negs	r3, r0
 80012de:	4158      	adcs	r0, r3
 80012e0:	4b11      	ldr	r3, [pc, #68]	; (8001328 <HAL_RCC_GetSysClockFreq+0x78>)
 80012e2:	4240      	negs	r0, r0
 80012e4:	4018      	ands	r0, r3
 80012e6:	4b11      	ldr	r3, [pc, #68]	; (800132c <HAL_RCC_GetSysClockFreq+0x7c>)
 80012e8:	18c0      	adds	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80012ea:	b009      	add	sp, #36	; 0x24
 80012ec:	bd30      	pop	{r4, r5, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80012ee:	200f      	movs	r0, #15
 80012f0:	466c      	mov	r4, sp
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80012f2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80012f4:	0c99      	lsrs	r1, r3, #18
 80012f6:	4001      	ands	r1, r0
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80012f8:	4002      	ands	r2, r0
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80012fa:	5c64      	ldrb	r4, [r4, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80012fc:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80012fe:	22c0      	movs	r2, #192	; 0xc0
 8001300:	2080      	movs	r0, #128	; 0x80
 8001302:	0252      	lsls	r2, r2, #9
 8001304:	4013      	ands	r3, r2
 8001306:	0240      	lsls	r0, r0, #9
 8001308:	4283      	cmp	r3, r0
 800130a:	d101      	bne.n	8001310 <HAL_RCC_GetSysClockFreq+0x60>
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800130c:	4807      	ldr	r0, [pc, #28]	; (800132c <HAL_RCC_GetSysClockFreq+0x7c>)
 800130e:	e002      	b.n	8001316 <HAL_RCC_GetSysClockFreq+0x66>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001310:	4293      	cmp	r3, r2
 8001312:	d1fb      	bne.n	800130c <HAL_RCC_GetSysClockFreq+0x5c>
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001314:	4806      	ldr	r0, [pc, #24]	; (8001330 <HAL_RCC_GetSysClockFreq+0x80>)
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001316:	f7fe ff0b 	bl	8000130 <__udivsi3>
 800131a:	4360      	muls	r0, r4
 800131c:	e7e5      	b.n	80012ea <HAL_RCC_GetSysClockFreq+0x3a>
 800131e:	46c0      	nop			; (mov r8, r8)
 8001320:	0800198c 	.word	0x0800198c
 8001324:	40021000 	.word	0x40021000
 8001328:	02625a00 	.word	0x02625a00
 800132c:	007a1200 	.word	0x007a1200
 8001330:	02dc6c00 	.word	0x02dc6c00

08001334 <HAL_RCC_ClockConfig>:
{
 8001334:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001336:	0005      	movs	r5, r0
 8001338:	000f      	movs	r7, r1
  if(RCC_ClkInitStruct == NULL)
 800133a:	2800      	cmp	r0, #0
 800133c:	d101      	bne.n	8001342 <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 800133e:	2001      	movs	r0, #1
}
 8001340:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001342:	2201      	movs	r2, #1
 8001344:	4c3b      	ldr	r4, [pc, #236]	; (8001434 <HAL_RCC_ClockConfig+0x100>)
 8001346:	6823      	ldr	r3, [r4, #0]
 8001348:	4013      	ands	r3, r2
 800134a:	428b      	cmp	r3, r1
 800134c:	d31c      	bcc.n	8001388 <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800134e:	6829      	ldr	r1, [r5, #0]
 8001350:	078b      	lsls	r3, r1, #30
 8001352:	d422      	bmi.n	800139a <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001354:	07cb      	lsls	r3, r1, #31
 8001356:	d42f      	bmi.n	80013b8 <HAL_RCC_ClockConfig+0x84>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001358:	2301      	movs	r3, #1
 800135a:	6822      	ldr	r2, [r4, #0]
 800135c:	401a      	ands	r2, r3
 800135e:	42ba      	cmp	r2, r7
 8001360:	d859      	bhi.n	8001416 <HAL_RCC_ClockConfig+0xe2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001362:	682b      	ldr	r3, [r5, #0]
 8001364:	4c34      	ldr	r4, [pc, #208]	; (8001438 <HAL_RCC_ClockConfig+0x104>)
 8001366:	075b      	lsls	r3, r3, #29
 8001368:	d45c      	bmi.n	8001424 <HAL_RCC_ClockConfig+0xf0>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800136a:	f7ff ffa1 	bl	80012b0 <HAL_RCC_GetSysClockFreq>
 800136e:	6863      	ldr	r3, [r4, #4]
 8001370:	4a32      	ldr	r2, [pc, #200]	; (800143c <HAL_RCC_ClockConfig+0x108>)
 8001372:	061b      	lsls	r3, r3, #24
 8001374:	0f1b      	lsrs	r3, r3, #28
 8001376:	5cd3      	ldrb	r3, [r2, r3]
 8001378:	40d8      	lsrs	r0, r3
 800137a:	4b31      	ldr	r3, [pc, #196]	; (8001440 <HAL_RCC_ClockConfig+0x10c>)
 800137c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800137e:	2000      	movs	r0, #0
 8001380:	f7ff f96a 	bl	8000658 <HAL_InitTick>
  return HAL_OK;
 8001384:	2000      	movs	r0, #0
 8001386:	e7db      	b.n	8001340 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001388:	6823      	ldr	r3, [r4, #0]
 800138a:	4393      	bics	r3, r2
 800138c:	430b      	orrs	r3, r1
 800138e:	6023      	str	r3, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001390:	6823      	ldr	r3, [r4, #0]
 8001392:	4013      	ands	r3, r2
 8001394:	428b      	cmp	r3, r1
 8001396:	d1d2      	bne.n	800133e <HAL_RCC_ClockConfig+0xa>
 8001398:	e7d9      	b.n	800134e <HAL_RCC_ClockConfig+0x1a>
 800139a:	4a27      	ldr	r2, [pc, #156]	; (8001438 <HAL_RCC_ClockConfig+0x104>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800139c:	074b      	lsls	r3, r1, #29
 800139e:	d504      	bpl.n	80013aa <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80013a0:	23e0      	movs	r3, #224	; 0xe0
 80013a2:	6850      	ldr	r0, [r2, #4]
 80013a4:	00db      	lsls	r3, r3, #3
 80013a6:	4303      	orrs	r3, r0
 80013a8:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013aa:	20f0      	movs	r0, #240	; 0xf0
 80013ac:	6853      	ldr	r3, [r2, #4]
 80013ae:	4383      	bics	r3, r0
 80013b0:	68a8      	ldr	r0, [r5, #8]
 80013b2:	4303      	orrs	r3, r0
 80013b4:	6053      	str	r3, [r2, #4]
 80013b6:	e7cd      	b.n	8001354 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013b8:	686a      	ldr	r2, [r5, #4]
 80013ba:	4e1f      	ldr	r6, [pc, #124]	; (8001438 <HAL_RCC_ClockConfig+0x104>)
 80013bc:	2a01      	cmp	r2, #1
 80013be:	d11a      	bne.n	80013f6 <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013c0:	6833      	ldr	r3, [r6, #0]
 80013c2:	039b      	lsls	r3, r3, #14
 80013c4:	d5bb      	bpl.n	800133e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013c6:	2103      	movs	r1, #3
 80013c8:	6873      	ldr	r3, [r6, #4]
 80013ca:	438b      	bics	r3, r1
 80013cc:	4313      	orrs	r3, r2
 80013ce:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80013d0:	f7ff f982 	bl	80006d8 <HAL_GetTick>
 80013d4:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013d6:	230c      	movs	r3, #12
 80013d8:	6872      	ldr	r2, [r6, #4]
 80013da:	401a      	ands	r2, r3
 80013dc:	686b      	ldr	r3, [r5, #4]
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d0b9      	beq.n	8001358 <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013e4:	f7ff f978 	bl	80006d8 <HAL_GetTick>
 80013e8:	9b01      	ldr	r3, [sp, #4]
 80013ea:	1ac0      	subs	r0, r0, r3
 80013ec:	4b15      	ldr	r3, [pc, #84]	; (8001444 <HAL_RCC_ClockConfig+0x110>)
 80013ee:	4298      	cmp	r0, r3
 80013f0:	d9f1      	bls.n	80013d6 <HAL_RCC_ClockConfig+0xa2>
        return HAL_TIMEOUT;
 80013f2:	2003      	movs	r0, #3
 80013f4:	e7a4      	b.n	8001340 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013f6:	2a02      	cmp	r2, #2
 80013f8:	d103      	bne.n	8001402 <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013fa:	6833      	ldr	r3, [r6, #0]
 80013fc:	019b      	lsls	r3, r3, #6
 80013fe:	d4e2      	bmi.n	80013c6 <HAL_RCC_ClockConfig+0x92>
 8001400:	e79d      	b.n	800133e <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001402:	2a03      	cmp	r2, #3
 8001404:	d103      	bne.n	800140e <HAL_RCC_ClockConfig+0xda>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001406:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8001408:	03db      	lsls	r3, r3, #15
 800140a:	d4dc      	bmi.n	80013c6 <HAL_RCC_ClockConfig+0x92>
 800140c:	e797      	b.n	800133e <HAL_RCC_ClockConfig+0xa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800140e:	6833      	ldr	r3, [r6, #0]
 8001410:	079b      	lsls	r3, r3, #30
 8001412:	d4d8      	bmi.n	80013c6 <HAL_RCC_ClockConfig+0x92>
 8001414:	e793      	b.n	800133e <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001416:	6822      	ldr	r2, [r4, #0]
 8001418:	439a      	bics	r2, r3
 800141a:	6022      	str	r2, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800141c:	6822      	ldr	r2, [r4, #0]
 800141e:	421a      	tst	r2, r3
 8001420:	d09f      	beq.n	8001362 <HAL_RCC_ClockConfig+0x2e>
 8001422:	e78c      	b.n	800133e <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001424:	6863      	ldr	r3, [r4, #4]
 8001426:	4a08      	ldr	r2, [pc, #32]	; (8001448 <HAL_RCC_ClockConfig+0x114>)
 8001428:	4013      	ands	r3, r2
 800142a:	68ea      	ldr	r2, [r5, #12]
 800142c:	4313      	orrs	r3, r2
 800142e:	6063      	str	r3, [r4, #4]
 8001430:	e79b      	b.n	800136a <HAL_RCC_ClockConfig+0x36>
 8001432:	46c0      	nop			; (mov r8, r8)
 8001434:	40022000 	.word	0x40022000
 8001438:	40021000 	.word	0x40021000
 800143c:	080019ac 	.word	0x080019ac
 8001440:	20000000 	.word	0x20000000
 8001444:	00001388 	.word	0x00001388
 8001448:	fffff8ff 	.word	0xfffff8ff

0800144c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800144c:	4b04      	ldr	r3, [pc, #16]	; (8001460 <HAL_RCC_GetPCLK1Freq+0x14>)
 800144e:	4a05      	ldr	r2, [pc, #20]	; (8001464 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	055b      	lsls	r3, r3, #21
 8001454:	0f5b      	lsrs	r3, r3, #29
 8001456:	5cd3      	ldrb	r3, [r2, r3]
 8001458:	4a03      	ldr	r2, [pc, #12]	; (8001468 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800145a:	6810      	ldr	r0, [r2, #0]
 800145c:	40d8      	lsrs	r0, r3
}    
 800145e:	4770      	bx	lr
 8001460:	40021000 	.word	0x40021000
 8001464:	080019bc 	.word	0x080019bc
 8001468:	20000000 	.word	0x20000000

0800146c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800146c:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800146e:	6803      	ldr	r3, [r0, #0]
{
 8001470:	b085      	sub	sp, #20
 8001472:	0005      	movs	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001474:	03db      	lsls	r3, r3, #15
 8001476:	d528      	bpl.n	80014ca <HAL_RCCEx_PeriphCLKConfig+0x5e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001478:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 800147a:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800147c:	4c40      	ldr	r4, [pc, #256]	; (8001580 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 800147e:	0552      	lsls	r2, r2, #21
 8001480:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8001482:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001484:	4213      	tst	r3, r2
 8001486:	d108      	bne.n	800149a <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001488:	69e3      	ldr	r3, [r4, #28]
 800148a:	4313      	orrs	r3, r2
 800148c:	61e3      	str	r3, [r4, #28]
 800148e:	69e3      	ldr	r3, [r4, #28]
 8001490:	4013      	ands	r3, r2
 8001492:	9303      	str	r3, [sp, #12]
 8001494:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8001496:	2301      	movs	r3, #1
 8001498:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800149a:	2780      	movs	r7, #128	; 0x80
 800149c:	4e39      	ldr	r6, [pc, #228]	; (8001584 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 800149e:	007f      	lsls	r7, r7, #1
 80014a0:	6833      	ldr	r3, [r6, #0]
 80014a2:	423b      	tst	r3, r7
 80014a4:	d038      	beq.n	8001518 <HAL_RCCEx_PeriphCLKConfig+0xac>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80014a6:	22c0      	movs	r2, #192	; 0xc0
 80014a8:	6a23      	ldr	r3, [r4, #32]
 80014aa:	0092      	lsls	r2, r2, #2
 80014ac:	4013      	ands	r3, r2
 80014ae:	4e36      	ldr	r6, [pc, #216]	; (8001588 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80014b0:	d144      	bne.n	800153c <HAL_RCCEx_PeriphCLKConfig+0xd0>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80014b2:	6a23      	ldr	r3, [r4, #32]
 80014b4:	401e      	ands	r6, r3
 80014b6:	686b      	ldr	r3, [r5, #4]
 80014b8:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80014ba:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80014bc:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d103      	bne.n	80014ca <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014c2:	69e3      	ldr	r3, [r4, #28]
 80014c4:	4a31      	ldr	r2, [pc, #196]	; (800158c <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80014c6:	4013      	ands	r3, r2
 80014c8:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80014ca:	682a      	ldr	r2, [r5, #0]
 80014cc:	07d3      	lsls	r3, r2, #31
 80014ce:	d506      	bpl.n	80014de <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80014d0:	2003      	movs	r0, #3
 80014d2:	492b      	ldr	r1, [pc, #172]	; (8001580 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80014d4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80014d6:	4383      	bics	r3, r0
 80014d8:	68a8      	ldr	r0, [r5, #8]
 80014da:	4303      	orrs	r3, r0
 80014dc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80014de:	0693      	lsls	r3, r2, #26
 80014e0:	d506      	bpl.n	80014f0 <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80014e2:	2010      	movs	r0, #16
 80014e4:	4926      	ldr	r1, [pc, #152]	; (8001580 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80014e6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80014e8:	4383      	bics	r3, r0
 80014ea:	68e8      	ldr	r0, [r5, #12]
 80014ec:	4303      	orrs	r3, r0
 80014ee:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80014f0:	0393      	lsls	r3, r2, #14
 80014f2:	d506      	bpl.n	8001502 <HAL_RCCEx_PeriphCLKConfig+0x96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80014f4:	2080      	movs	r0, #128	; 0x80
 80014f6:	4922      	ldr	r1, [pc, #136]	; (8001580 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80014f8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80014fa:	4383      	bics	r3, r0
 80014fc:	6968      	ldr	r0, [r5, #20]
 80014fe:	4303      	orrs	r3, r0
 8001500:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001502:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001504:	0553      	lsls	r3, r2, #21
 8001506:	d517      	bpl.n	8001538 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001508:	2140      	movs	r1, #64	; 0x40
 800150a:	4a1d      	ldr	r2, [pc, #116]	; (8001580 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 800150c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800150e:	438b      	bics	r3, r1
 8001510:	6929      	ldr	r1, [r5, #16]
 8001512:	430b      	orrs	r3, r1
 8001514:	6313      	str	r3, [r2, #48]	; 0x30
 8001516:	e00f      	b.n	8001538 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001518:	6833      	ldr	r3, [r6, #0]
 800151a:	433b      	orrs	r3, r7
 800151c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800151e:	f7ff f8db 	bl	80006d8 <HAL_GetTick>
 8001522:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001524:	6833      	ldr	r3, [r6, #0]
 8001526:	423b      	tst	r3, r7
 8001528:	d1bd      	bne.n	80014a6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800152a:	f7ff f8d5 	bl	80006d8 <HAL_GetTick>
 800152e:	9b01      	ldr	r3, [sp, #4]
 8001530:	1ac0      	subs	r0, r0, r3
 8001532:	2864      	cmp	r0, #100	; 0x64
 8001534:	d9f6      	bls.n	8001524 <HAL_RCCEx_PeriphCLKConfig+0xb8>
          return HAL_TIMEOUT;
 8001536:	2003      	movs	r0, #3
}
 8001538:	b005      	add	sp, #20
 800153a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800153c:	6869      	ldr	r1, [r5, #4]
 800153e:	400a      	ands	r2, r1
 8001540:	429a      	cmp	r2, r3
 8001542:	d0b6      	beq.n	80014b2 <HAL_RCCEx_PeriphCLKConfig+0x46>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001544:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001546:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001548:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800154a:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 800154c:	025b      	lsls	r3, r3, #9
 800154e:	4303      	orrs	r3, r0
 8001550:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001552:	6a23      	ldr	r3, [r4, #32]
 8001554:	480e      	ldr	r0, [pc, #56]	; (8001590 <HAL_RCCEx_PeriphCLKConfig+0x124>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001556:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001558:	4003      	ands	r3, r0
 800155a:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 800155c:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800155e:	07d3      	lsls	r3, r2, #31
 8001560:	d5a7      	bpl.n	80014b2 <HAL_RCCEx_PeriphCLKConfig+0x46>
        tickstart = HAL_GetTick();
 8001562:	f7ff f8b9 	bl	80006d8 <HAL_GetTick>
 8001566:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001568:	2202      	movs	r2, #2
 800156a:	6a23      	ldr	r3, [r4, #32]
 800156c:	4213      	tst	r3, r2
 800156e:	d1a0      	bne.n	80014b2 <HAL_RCCEx_PeriphCLKConfig+0x46>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001570:	f7ff f8b2 	bl	80006d8 <HAL_GetTick>
 8001574:	4b07      	ldr	r3, [pc, #28]	; (8001594 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8001576:	1bc0      	subs	r0, r0, r7
 8001578:	4298      	cmp	r0, r3
 800157a:	d9f5      	bls.n	8001568 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 800157c:	e7db      	b.n	8001536 <HAL_RCCEx_PeriphCLKConfig+0xca>
 800157e:	46c0      	nop			; (mov r8, r8)
 8001580:	40021000 	.word	0x40021000
 8001584:	40007000 	.word	0x40007000
 8001588:	fffffcff 	.word	0xfffffcff
 800158c:	efffffff 	.word	0xefffffff
 8001590:	fffeffff 	.word	0xfffeffff
 8001594:	00001388 	.word	0x00001388

08001598 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001598:	b570      	push	{r4, r5, r6, lr}
 800159a:	0004      	movs	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800159c:	6925      	ldr	r5, [r4, #16]
 800159e:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80015a0:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80015a2:	432b      	orrs	r3, r5
 80015a4:	6965      	ldr	r5, [r4, #20]
 80015a6:	69c1      	ldr	r1, [r0, #28]
 80015a8:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80015aa:	6810      	ldr	r0, [r2, #0]
 80015ac:	4d43      	ldr	r5, [pc, #268]	; (80016bc <UART_SetConfig+0x124>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80015ae:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80015b0:	4028      	ands	r0, r5
 80015b2:	4303      	orrs	r3, r0
 80015b4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80015b6:	6853      	ldr	r3, [r2, #4]
 80015b8:	4841      	ldr	r0, [pc, #260]	; (80016c0 <UART_SetConfig+0x128>)
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  tmpreg |= huart->Init.OneBitSampling;
 80015ba:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80015bc:	4003      	ands	r3, r0
 80015be:	68e0      	ldr	r0, [r4, #12]
 80015c0:	4303      	orrs	r3, r0
 80015c2:	6053      	str	r3, [r2, #4]
  tmpreg |= huart->Init.OneBitSampling;
 80015c4:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80015c6:	6890      	ldr	r0, [r2, #8]
  tmpreg |= huart->Init.OneBitSampling;
 80015c8:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80015ca:	4d3e      	ldr	r5, [pc, #248]	; (80016c4 <UART_SetConfig+0x12c>)
 80015cc:	4028      	ands	r0, r5
 80015ce:	4303      	orrs	r3, r0
 80015d0:	6093      	str	r3, [r2, #8]
 80015d2:	2380      	movs	r3, #128	; 0x80


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80015d4:	483c      	ldr	r0, [pc, #240]	; (80016c8 <UART_SetConfig+0x130>)
 80015d6:	021b      	lsls	r3, r3, #8
 80015d8:	4d3c      	ldr	r5, [pc, #240]	; (80016cc <UART_SetConfig+0x134>)
 80015da:	4282      	cmp	r2, r0
 80015dc:	d110      	bne.n	8001600 <UART_SetConfig+0x68>
 80015de:	2003      	movs	r0, #3
 80015e0:	4a3b      	ldr	r2, [pc, #236]	; (80016d0 <UART_SetConfig+0x138>)
 80015e2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80015e4:	4002      	ands	r2, r0
 80015e6:	483b      	ldr	r0, [pc, #236]	; (80016d4 <UART_SetConfig+0x13c>)
 80015e8:	5c80      	ldrb	r0, [r0, r2]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80015ea:	4299      	cmp	r1, r3
 80015ec:	d013      	beq.n	8001616 <UART_SetConfig+0x7e>
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 80015ee:	2808      	cmp	r0, #8
 80015f0:	d860      	bhi.n	80016b4 <UART_SetConfig+0x11c>
 80015f2:	f7fe fd93 	bl	800011c <__gnu_thumb1_case_uqi>
 80015f6:	5f40      	.short	0x5f40
 80015f8:	5f555f45 	.word	0x5f555f45
 80015fc:	5f5f      	.short	0x5f5f
 80015fe:	58          	.byte	0x58
 80015ff:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001600:	4835      	ldr	r0, [pc, #212]	; (80016d8 <UART_SetConfig+0x140>)
 8001602:	4282      	cmp	r2, r0
 8001604:	d154      	bne.n	80016b0 <UART_SetConfig+0x118>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001606:	4299      	cmp	r1, r3
 8001608:	d135      	bne.n	8001676 <UART_SetConfig+0xde>
        pclk = HAL_RCC_GetPCLK1Freq();
 800160a:	f7ff ff1f 	bl	800144c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800160e:	6863      	ldr	r3, [r4, #4]
 8001610:	0040      	lsls	r0, r0, #1
 8001612:	085b      	lsrs	r3, r3, #1
 8001614:	e00b      	b.n	800162e <UART_SetConfig+0x96>
    switch (clocksource)
 8001616:	2808      	cmp	r0, #8
 8001618:	d820      	bhi.n	800165c <UART_SetConfig+0xc4>
 800161a:	f7fe fd75 	bl	8000108 <__gnu_thumb1_case_sqi>
 800161e:	1ff6      	.short	0x1ff6
 8001620:	1f171f05 	.word	0x1f171f05
 8001624:	1f1f      	.short	0x1f1f
 8001626:	1a          	.byte	0x1a
 8001627:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001628:	6863      	ldr	r3, [r4, #4]
 800162a:	0858      	lsrs	r0, r3, #1
 800162c:	4b2b      	ldr	r3, [pc, #172]	; (80016dc <UART_SetConfig+0x144>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800162e:	18c0      	adds	r0, r0, r3
 8001630:	6861      	ldr	r1, [r4, #4]
 8001632:	f7fe fd7d 	bl	8000130 <__udivsi3>
 8001636:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8001638:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800163a:	001a      	movs	r2, r3
 800163c:	3a10      	subs	r2, #16
 800163e:	42aa      	cmp	r2, r5
 8001640:	d90f      	bls.n	8001662 <UART_SetConfig+0xca>
      ret = HAL_ERROR;
 8001642:	2001      	movs	r0, #1
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001644:	2300      	movs	r3, #0
 8001646:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8001648:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 800164a:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetSysClockFreq();
 800164c:	f7ff fe30 	bl	80012b0 <HAL_RCC_GetSysClockFreq>
 8001650:	e7dd      	b.n	800160e <UART_SetConfig+0x76>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001652:	6863      	ldr	r3, [r4, #4]
 8001654:	0858      	lsrs	r0, r3, #1
 8001656:	2380      	movs	r3, #128	; 0x80
 8001658:	025b      	lsls	r3, r3, #9
 800165a:	e7e8      	b.n	800162e <UART_SetConfig+0x96>
        ret = HAL_ERROR;
 800165c:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 800165e:	2300      	movs	r3, #0
 8001660:	e7eb      	b.n	800163a <UART_SetConfig+0xa2>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001662:	220f      	movs	r2, #15
 8001664:	0019      	movs	r1, r3
 8001666:	4391      	bics	r1, r2
 8001668:	000a      	movs	r2, r1
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800166a:	071b      	lsls	r3, r3, #28
      huart->Instance->BRR = brrtemp;
 800166c:	6821      	ldr	r1, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800166e:	0f5b      	lsrs	r3, r3, #29
      huart->Instance->BRR = brrtemp;
 8001670:	4313      	orrs	r3, r2
 8001672:	60cb      	str	r3, [r1, #12]
 8001674:	e7e6      	b.n	8001644 <UART_SetConfig+0xac>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001676:	f7ff fee9 	bl	800144c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800167a:	6863      	ldr	r3, [r4, #4]
 800167c:	085b      	lsrs	r3, r3, #1
 800167e:	e002      	b.n	8001686 <UART_SetConfig+0xee>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001680:	6863      	ldr	r3, [r4, #4]
 8001682:	0858      	lsrs	r0, r3, #1
 8001684:	4b16      	ldr	r3, [pc, #88]	; (80016e0 <UART_SetConfig+0x148>)
 8001686:	18c0      	adds	r0, r0, r3
 8001688:	6861      	ldr	r1, [r4, #4]
 800168a:	f7fe fd51 	bl	8000130 <__udivsi3>
 800168e:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8001690:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001692:	001a      	movs	r2, r3
 8001694:	3a10      	subs	r2, #16
 8001696:	42aa      	cmp	r2, r5
 8001698:	d8d3      	bhi.n	8001642 <UART_SetConfig+0xaa>
      huart->Instance->BRR = usartdiv;
 800169a:	6822      	ldr	r2, [r4, #0]
 800169c:	60d3      	str	r3, [r2, #12]
 800169e:	e7d1      	b.n	8001644 <UART_SetConfig+0xac>
        pclk = HAL_RCC_GetSysClockFreq();
 80016a0:	f7ff fe06 	bl	80012b0 <HAL_RCC_GetSysClockFreq>
 80016a4:	e7e9      	b.n	800167a <UART_SetConfig+0xe2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80016a6:	6863      	ldr	r3, [r4, #4]
 80016a8:	0858      	lsrs	r0, r3, #1
 80016aa:	2380      	movs	r3, #128	; 0x80
 80016ac:	021b      	lsls	r3, r3, #8
 80016ae:	e7ea      	b.n	8001686 <UART_SetConfig+0xee>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80016b0:	4299      	cmp	r1, r3
 80016b2:	d0d3      	beq.n	800165c <UART_SetConfig+0xc4>
        ret = HAL_ERROR;
 80016b4:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 80016b6:	2300      	movs	r3, #0
 80016b8:	e7eb      	b.n	8001692 <UART_SetConfig+0xfa>
 80016ba:	46c0      	nop			; (mov r8, r8)
 80016bc:	efff69f3 	.word	0xefff69f3
 80016c0:	ffffcfff 	.word	0xffffcfff
 80016c4:	fffff4ff 	.word	0xfffff4ff
 80016c8:	40013800 	.word	0x40013800
 80016cc:	0000ffef 	.word	0x0000ffef
 80016d0:	40021000 	.word	0x40021000
 80016d4:	080019c4 	.word	0x080019c4
 80016d8:	40004400 	.word	0x40004400
 80016dc:	00f42400 	.word	0x00f42400
 80016e0:	007a1200 	.word	0x007a1200

080016e4 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80016e4:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80016e6:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80016e8:	07da      	lsls	r2, r3, #31
 80016ea:	d506      	bpl.n	80016fa <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80016ec:	6801      	ldr	r1, [r0, #0]
 80016ee:	4c28      	ldr	r4, [pc, #160]	; (8001790 <UART_AdvFeatureConfig+0xac>)
 80016f0:	684a      	ldr	r2, [r1, #4]
 80016f2:	4022      	ands	r2, r4
 80016f4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80016f6:	4322      	orrs	r2, r4
 80016f8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80016fa:	079a      	lsls	r2, r3, #30
 80016fc:	d506      	bpl.n	800170c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80016fe:	6801      	ldr	r1, [r0, #0]
 8001700:	4c24      	ldr	r4, [pc, #144]	; (8001794 <UART_AdvFeatureConfig+0xb0>)
 8001702:	684a      	ldr	r2, [r1, #4]
 8001704:	4022      	ands	r2, r4
 8001706:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001708:	4322      	orrs	r2, r4
 800170a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800170c:	075a      	lsls	r2, r3, #29
 800170e:	d506      	bpl.n	800171e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001710:	6801      	ldr	r1, [r0, #0]
 8001712:	4c21      	ldr	r4, [pc, #132]	; (8001798 <UART_AdvFeatureConfig+0xb4>)
 8001714:	684a      	ldr	r2, [r1, #4]
 8001716:	4022      	ands	r2, r4
 8001718:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800171a:	4322      	orrs	r2, r4
 800171c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800171e:	071a      	lsls	r2, r3, #28
 8001720:	d506      	bpl.n	8001730 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001722:	6801      	ldr	r1, [r0, #0]
 8001724:	4c1d      	ldr	r4, [pc, #116]	; (800179c <UART_AdvFeatureConfig+0xb8>)
 8001726:	684a      	ldr	r2, [r1, #4]
 8001728:	4022      	ands	r2, r4
 800172a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800172c:	4322      	orrs	r2, r4
 800172e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001730:	06da      	lsls	r2, r3, #27
 8001732:	d506      	bpl.n	8001742 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001734:	6801      	ldr	r1, [r0, #0]
 8001736:	4c1a      	ldr	r4, [pc, #104]	; (80017a0 <UART_AdvFeatureConfig+0xbc>)
 8001738:	688a      	ldr	r2, [r1, #8]
 800173a:	4022      	ands	r2, r4
 800173c:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800173e:	4322      	orrs	r2, r4
 8001740:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001742:	069a      	lsls	r2, r3, #26
 8001744:	d506      	bpl.n	8001754 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001746:	6801      	ldr	r1, [r0, #0]
 8001748:	4c16      	ldr	r4, [pc, #88]	; (80017a4 <UART_AdvFeatureConfig+0xc0>)
 800174a:	688a      	ldr	r2, [r1, #8]
 800174c:	4022      	ands	r2, r4
 800174e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001750:	4322      	orrs	r2, r4
 8001752:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001754:	065a      	lsls	r2, r3, #25
 8001756:	d510      	bpl.n	800177a <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001758:	6801      	ldr	r1, [r0, #0]
 800175a:	4d13      	ldr	r5, [pc, #76]	; (80017a8 <UART_AdvFeatureConfig+0xc4>)
 800175c:	684a      	ldr	r2, [r1, #4]
 800175e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001760:	402a      	ands	r2, r5
 8001762:	4322      	orrs	r2, r4
 8001764:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001766:	2280      	movs	r2, #128	; 0x80
 8001768:	0352      	lsls	r2, r2, #13
 800176a:	4294      	cmp	r4, r2
 800176c:	d105      	bne.n	800177a <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800176e:	684a      	ldr	r2, [r1, #4]
 8001770:	4c0e      	ldr	r4, [pc, #56]	; (80017ac <UART_AdvFeatureConfig+0xc8>)
 8001772:	4022      	ands	r2, r4
 8001774:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001776:	4322      	orrs	r2, r4
 8001778:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800177a:	061b      	lsls	r3, r3, #24
 800177c:	d506      	bpl.n	800178c <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800177e:	6802      	ldr	r2, [r0, #0]
 8001780:	490b      	ldr	r1, [pc, #44]	; (80017b0 <UART_AdvFeatureConfig+0xcc>)
 8001782:	6853      	ldr	r3, [r2, #4]
 8001784:	400b      	ands	r3, r1
 8001786:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001788:	430b      	orrs	r3, r1
 800178a:	6053      	str	r3, [r2, #4]
  }
}
 800178c:	bd30      	pop	{r4, r5, pc}
 800178e:	46c0      	nop			; (mov r8, r8)
 8001790:	fffdffff 	.word	0xfffdffff
 8001794:	fffeffff 	.word	0xfffeffff
 8001798:	fffbffff 	.word	0xfffbffff
 800179c:	ffff7fff 	.word	0xffff7fff
 80017a0:	ffffefff 	.word	0xffffefff
 80017a4:	ffffdfff 	.word	0xffffdfff
 80017a8:	ffefffff 	.word	0xffefffff
 80017ac:	ff9fffff 	.word	0xff9fffff
 80017b0:	fff7ffff 	.word	0xfff7ffff

080017b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80017b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80017b6:	2780      	movs	r7, #128	; 0x80
{
 80017b8:	0004      	movs	r4, r0
 80017ba:	000e      	movs	r6, r1
 80017bc:	0015      	movs	r5, r2
 80017be:	9301      	str	r3, [sp, #4]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80017c0:	013f      	lsls	r7, r7, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80017c2:	6822      	ldr	r2, [r4, #0]
 80017c4:	69d3      	ldr	r3, [r2, #28]
 80017c6:	4033      	ands	r3, r6
 80017c8:	1b9b      	subs	r3, r3, r6
 80017ca:	4259      	negs	r1, r3
 80017cc:	414b      	adcs	r3, r1
 80017ce:	42ab      	cmp	r3, r5
 80017d0:	d001      	beq.n	80017d6 <UART_WaitOnFlagUntilTimeout+0x22>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 80017d2:	2000      	movs	r0, #0
 80017d4:	e01c      	b.n	8001810 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 80017d6:	9b08      	ldr	r3, [sp, #32]
 80017d8:	3301      	adds	r3, #1
 80017da:	d0f3      	beq.n	80017c4 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017dc:	f7fe ff7c 	bl	80006d8 <HAL_GetTick>
 80017e0:	9b01      	ldr	r3, [sp, #4]
 80017e2:	9a08      	ldr	r2, [sp, #32]
 80017e4:	1ac0      	subs	r0, r0, r3
 80017e6:	6823      	ldr	r3, [r4, #0]
 80017e8:	4290      	cmp	r0, r2
 80017ea:	d801      	bhi.n	80017f0 <UART_WaitOnFlagUntilTimeout+0x3c>
 80017ec:	2a00      	cmp	r2, #0
 80017ee:	d110      	bne.n	8001812 <UART_WaitOnFlagUntilTimeout+0x5e>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	4913      	ldr	r1, [pc, #76]	; (8001840 <UART_WaitOnFlagUntilTimeout+0x8c>)
 80017f4:	400a      	ands	r2, r1
 80017f6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80017f8:	689a      	ldr	r2, [r3, #8]
 80017fa:	31a3      	adds	r1, #163	; 0xa3
 80017fc:	31ff      	adds	r1, #255	; 0xff
 80017fe:	438a      	bics	r2, r1
 8001800:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8001802:	2320      	movs	r3, #32
 8001804:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8001806:	67a3      	str	r3, [r4, #120]	; 0x78
          __HAL_UNLOCK(huart);
 8001808:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 800180a:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 800180c:	3470      	adds	r4, #112	; 0x70
 800180e:	7023      	strb	r3, [r4, #0]
}
 8001810:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001812:	2104      	movs	r1, #4
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	420a      	tst	r2, r1
 8001818:	d0d3      	beq.n	80017c2 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800181a:	69da      	ldr	r2, [r3, #28]
 800181c:	423a      	tst	r2, r7
 800181e:	d0d0      	beq.n	80017c2 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001820:	621f      	str	r7, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	4906      	ldr	r1, [pc, #24]	; (8001840 <UART_WaitOnFlagUntilTimeout+0x8c>)
 8001826:	400a      	ands	r2, r1
 8001828:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800182a:	689a      	ldr	r2, [r3, #8]
 800182c:	31a3      	adds	r1, #163	; 0xa3
 800182e:	31ff      	adds	r1, #255	; 0xff
 8001830:	438a      	bics	r2, r1
 8001832:	609a      	str	r2, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 8001834:	2320      	movs	r3, #32
 8001836:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8001838:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800183a:	67e3      	str	r3, [r4, #124]	; 0x7c
 800183c:	e7e4      	b.n	8001808 <UART_WaitOnFlagUntilTimeout+0x54>
 800183e:	46c0      	nop			; (mov r8, r8)
 8001840:	fffffe5f 	.word	0xfffffe5f

08001844 <UART_CheckIdleState>:
{
 8001844:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001846:	2600      	movs	r6, #0
{
 8001848:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800184a:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 800184c:	f7fe ff44 	bl	80006d8 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001850:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8001852:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	071b      	lsls	r3, r3, #28
 8001858:	d415      	bmi.n	8001886 <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800185a:	6823      	ldr	r3, [r4, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	075b      	lsls	r3, r3, #29
 8001860:	d50a      	bpl.n	8001878 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001862:	2180      	movs	r1, #128	; 0x80
 8001864:	4b0e      	ldr	r3, [pc, #56]	; (80018a0 <UART_CheckIdleState+0x5c>)
 8001866:	2200      	movs	r2, #0
 8001868:	9300      	str	r3, [sp, #0]
 800186a:	03c9      	lsls	r1, r1, #15
 800186c:	002b      	movs	r3, r5
 800186e:	0020      	movs	r0, r4
 8001870:	f7ff ffa0 	bl	80017b4 <UART_WaitOnFlagUntilTimeout>
 8001874:	2800      	cmp	r0, #0
 8001876:	d111      	bne.n	800189c <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8001878:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800187a:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800187c:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800187e:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8001880:	3470      	adds	r4, #112	; 0x70
 8001882:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8001884:	e00b      	b.n	800189e <UART_CheckIdleState+0x5a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001886:	2180      	movs	r1, #128	; 0x80
 8001888:	4b05      	ldr	r3, [pc, #20]	; (80018a0 <UART_CheckIdleState+0x5c>)
 800188a:	0032      	movs	r2, r6
 800188c:	9300      	str	r3, [sp, #0]
 800188e:	0389      	lsls	r1, r1, #14
 8001890:	0003      	movs	r3, r0
 8001892:	0020      	movs	r0, r4
 8001894:	f7ff ff8e 	bl	80017b4 <UART_WaitOnFlagUntilTimeout>
 8001898:	2800      	cmp	r0, #0
 800189a:	d0de      	beq.n	800185a <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 800189c:	2003      	movs	r0, #3
}
 800189e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 80018a0:	01ffffff 	.word	0x01ffffff

080018a4 <HAL_UART_Init>:
{
 80018a4:	b510      	push	{r4, lr}
 80018a6:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 80018a8:	d101      	bne.n	80018ae <HAL_UART_Init+0xa>
    return HAL_ERROR;
 80018aa:	2001      	movs	r0, #1
}
 80018ac:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 80018ae:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d104      	bne.n	80018be <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 80018b4:	0002      	movs	r2, r0
 80018b6:	3270      	adds	r2, #112	; 0x70
 80018b8:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 80018ba:	f7fe fe49 	bl	8000550 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80018be:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80018c0:	2101      	movs	r1, #1
 80018c2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80018c4:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 80018c6:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80018c8:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 80018ca:	438b      	bics	r3, r1
 80018cc:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80018ce:	f7ff fe63 	bl	8001598 <UART_SetConfig>
 80018d2:	2801      	cmp	r0, #1
 80018d4:	d0e9      	beq.n	80018aa <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80018d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d002      	beq.n	80018e2 <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 80018dc:	0020      	movs	r0, r4
 80018de:	f7ff ff01 	bl	80016e4 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80018e2:	6823      	ldr	r3, [r4, #0]
 80018e4:	4907      	ldr	r1, [pc, #28]	; (8001904 <HAL_UART_Init+0x60>)
 80018e6:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 80018e8:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80018ea:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80018ec:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80018ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80018f0:	689a      	ldr	r2, [r3, #8]
 80018f2:	438a      	bics	r2, r1
 80018f4:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80018f6:	2201      	movs	r2, #1
 80018f8:	6819      	ldr	r1, [r3, #0]
 80018fa:	430a      	orrs	r2, r1
 80018fc:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80018fe:	f7ff ffa1 	bl	8001844 <UART_CheckIdleState>
 8001902:	e7d3      	b.n	80018ac <HAL_UART_Init+0x8>
 8001904:	ffffb7ff 	.word	0xffffb7ff

08001908 <__libc_init_array>:
 8001908:	b570      	push	{r4, r5, r6, lr}
 800190a:	2600      	movs	r6, #0
 800190c:	4d0c      	ldr	r5, [pc, #48]	; (8001940 <__libc_init_array+0x38>)
 800190e:	4c0d      	ldr	r4, [pc, #52]	; (8001944 <__libc_init_array+0x3c>)
 8001910:	1b64      	subs	r4, r4, r5
 8001912:	10a4      	asrs	r4, r4, #2
 8001914:	42a6      	cmp	r6, r4
 8001916:	d109      	bne.n	800192c <__libc_init_array+0x24>
 8001918:	2600      	movs	r6, #0
 800191a:	f000 f82b 	bl	8001974 <_init>
 800191e:	4d0a      	ldr	r5, [pc, #40]	; (8001948 <__libc_init_array+0x40>)
 8001920:	4c0a      	ldr	r4, [pc, #40]	; (800194c <__libc_init_array+0x44>)
 8001922:	1b64      	subs	r4, r4, r5
 8001924:	10a4      	asrs	r4, r4, #2
 8001926:	42a6      	cmp	r6, r4
 8001928:	d105      	bne.n	8001936 <__libc_init_array+0x2e>
 800192a:	bd70      	pop	{r4, r5, r6, pc}
 800192c:	00b3      	lsls	r3, r6, #2
 800192e:	58eb      	ldr	r3, [r5, r3]
 8001930:	4798      	blx	r3
 8001932:	3601      	adds	r6, #1
 8001934:	e7ee      	b.n	8001914 <__libc_init_array+0xc>
 8001936:	00b3      	lsls	r3, r6, #2
 8001938:	58eb      	ldr	r3, [r5, r3]
 800193a:	4798      	blx	r3
 800193c:	3601      	adds	r6, #1
 800193e:	e7f2      	b.n	8001926 <__libc_init_array+0x1e>
 8001940:	080019c8 	.word	0x080019c8
 8001944:	080019c8 	.word	0x080019c8
 8001948:	080019c8 	.word	0x080019c8
 800194c:	080019cc 	.word	0x080019cc

08001950 <memcpy>:
 8001950:	2300      	movs	r3, #0
 8001952:	b510      	push	{r4, lr}
 8001954:	429a      	cmp	r2, r3
 8001956:	d100      	bne.n	800195a <memcpy+0xa>
 8001958:	bd10      	pop	{r4, pc}
 800195a:	5ccc      	ldrb	r4, [r1, r3]
 800195c:	54c4      	strb	r4, [r0, r3]
 800195e:	3301      	adds	r3, #1
 8001960:	e7f8      	b.n	8001954 <memcpy+0x4>

08001962 <memset>:
 8001962:	0003      	movs	r3, r0
 8001964:	1812      	adds	r2, r2, r0
 8001966:	4293      	cmp	r3, r2
 8001968:	d100      	bne.n	800196c <memset+0xa>
 800196a:	4770      	bx	lr
 800196c:	7019      	strb	r1, [r3, #0]
 800196e:	3301      	adds	r3, #1
 8001970:	e7f9      	b.n	8001966 <memset+0x4>
	...

08001974 <_init>:
 8001974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001976:	46c0      	nop			; (mov r8, r8)
 8001978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800197a:	bc08      	pop	{r3}
 800197c:	469e      	mov	lr, r3
 800197e:	4770      	bx	lr

08001980 <_fini>:
 8001980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001982:	46c0      	nop			; (mov r8, r8)
 8001984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001986:	bc08      	pop	{r3}
 8001988:	469e      	mov	lr, r3
 800198a:	4770      	bx	lr
