
stm32f042_dev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021c4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003e7c  08002284  08002284  00012284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006100  08006100  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08006100  08006100  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006100  08006100  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006100  08006100  00016100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006104  08006104  00016104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006108  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d8c  2000000c  08006114  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000200  20000d98  08006114  00020d98  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000efff  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000026d6  00000000  00000000  0002f033  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00007e3b  00000000  00000000  00031709  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000009a0  00000000  00000000  00039548  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000cb8  00000000  00000000  00039ee8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000161c9  00000000  00000000  0003aba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000b5ab  00000000  00000000  00050d69  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000788e3  00000000  00000000  0005c314  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000d4bf7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001c60  00000000  00000000  000d4c74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800226c 	.word	0x0800226c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	0800226c 	.word	0x0800226c

08000108 <__gnu_thumb1_case_sqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5609      	ldrsb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__gnu_thumb1_case_uqi>:
 800011c:	b402      	push	{r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	5c09      	ldrb	r1, [r1, r0]
 8000126:	0049      	lsls	r1, r1, #1
 8000128:	448e      	add	lr, r1
 800012a:	bc02      	pop	{r1}
 800012c:	4770      	bx	lr
 800012e:	46c0      	nop			; (mov r8, r8)

08000130 <__udivsi3>:
 8000130:	2200      	movs	r2, #0
 8000132:	0843      	lsrs	r3, r0, #1
 8000134:	428b      	cmp	r3, r1
 8000136:	d374      	bcc.n	8000222 <__udivsi3+0xf2>
 8000138:	0903      	lsrs	r3, r0, #4
 800013a:	428b      	cmp	r3, r1
 800013c:	d35f      	bcc.n	80001fe <__udivsi3+0xce>
 800013e:	0a03      	lsrs	r3, r0, #8
 8000140:	428b      	cmp	r3, r1
 8000142:	d344      	bcc.n	80001ce <__udivsi3+0x9e>
 8000144:	0b03      	lsrs	r3, r0, #12
 8000146:	428b      	cmp	r3, r1
 8000148:	d328      	bcc.n	800019c <__udivsi3+0x6c>
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d30d      	bcc.n	800016c <__udivsi3+0x3c>
 8000150:	22ff      	movs	r2, #255	; 0xff
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	ba12      	rev	r2, r2
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d302      	bcc.n	8000162 <__udivsi3+0x32>
 800015c:	1212      	asrs	r2, r2, #8
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	d065      	beq.n	800022e <__udivsi3+0xfe>
 8000162:	0b03      	lsrs	r3, r0, #12
 8000164:	428b      	cmp	r3, r1
 8000166:	d319      	bcc.n	800019c <__udivsi3+0x6c>
 8000168:	e000      	b.n	800016c <__udivsi3+0x3c>
 800016a:	0a09      	lsrs	r1, r1, #8
 800016c:	0bc3      	lsrs	r3, r0, #15
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x46>
 8000172:	03cb      	lsls	r3, r1, #15
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b83      	lsrs	r3, r0, #14
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x52>
 800017e:	038b      	lsls	r3, r1, #14
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b43      	lsrs	r3, r0, #13
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x5e>
 800018a:	034b      	lsls	r3, r1, #13
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b03      	lsrs	r3, r0, #12
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x6a>
 8000196:	030b      	lsls	r3, r1, #12
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0ac3      	lsrs	r3, r0, #11
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x76>
 80001a2:	02cb      	lsls	r3, r1, #11
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a83      	lsrs	r3, r0, #10
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x82>
 80001ae:	028b      	lsls	r3, r1, #10
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a43      	lsrs	r3, r0, #9
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x8e>
 80001ba:	024b      	lsls	r3, r1, #9
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a03      	lsrs	r3, r0, #8
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x9a>
 80001c6:	020b      	lsls	r3, r1, #8
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	d2cd      	bcs.n	800016a <__udivsi3+0x3a>
 80001ce:	09c3      	lsrs	r3, r0, #7
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xa8>
 80001d4:	01cb      	lsls	r3, r1, #7
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0983      	lsrs	r3, r0, #6
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xb4>
 80001e0:	018b      	lsls	r3, r1, #6
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0943      	lsrs	r3, r0, #5
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xc0>
 80001ec:	014b      	lsls	r3, r1, #5
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0903      	lsrs	r3, r0, #4
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xcc>
 80001f8:	010b      	lsls	r3, r1, #4
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	08c3      	lsrs	r3, r0, #3
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xd8>
 8000204:	00cb      	lsls	r3, r1, #3
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0883      	lsrs	r3, r0, #2
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xe4>
 8000210:	008b      	lsls	r3, r1, #2
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0843      	lsrs	r3, r0, #1
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xf0>
 800021c:	004b      	lsls	r3, r1, #1
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	1a41      	subs	r1, r0, r1
 8000224:	d200      	bcs.n	8000228 <__udivsi3+0xf8>
 8000226:	4601      	mov	r1, r0
 8000228:	4152      	adcs	r2, r2
 800022a:	4610      	mov	r0, r2
 800022c:	4770      	bx	lr
 800022e:	e7ff      	b.n	8000230 <__udivsi3+0x100>
 8000230:	b501      	push	{r0, lr}
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f806 	bl	8000244 <__aeabi_idiv0>
 8000238:	bd02      	pop	{r1, pc}
 800023a:	46c0      	nop			; (mov r8, r8)

0800023c <__aeabi_uidivmod>:
 800023c:	2900      	cmp	r1, #0
 800023e:	d0f7      	beq.n	8000230 <__udivsi3+0x100>
 8000240:	e776      	b.n	8000130 <__udivsi3>
 8000242:	4770      	bx	lr

08000244 <__aeabi_idiv0>:
 8000244:	4770      	bx	lr
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_fmul>:
 8000248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800024a:	464e      	mov	r6, r9
 800024c:	4657      	mov	r7, sl
 800024e:	4645      	mov	r5, r8
 8000250:	46de      	mov	lr, fp
 8000252:	b5e0      	push	{r5, r6, r7, lr}
 8000254:	0243      	lsls	r3, r0, #9
 8000256:	0a5b      	lsrs	r3, r3, #9
 8000258:	0045      	lsls	r5, r0, #1
 800025a:	b083      	sub	sp, #12
 800025c:	1c0f      	adds	r7, r1, #0
 800025e:	4699      	mov	r9, r3
 8000260:	0e2d      	lsrs	r5, r5, #24
 8000262:	0fc6      	lsrs	r6, r0, #31
 8000264:	2d00      	cmp	r5, #0
 8000266:	d057      	beq.n	8000318 <__aeabi_fmul+0xd0>
 8000268:	2dff      	cmp	r5, #255	; 0xff
 800026a:	d024      	beq.n	80002b6 <__aeabi_fmul+0x6e>
 800026c:	2080      	movs	r0, #128	; 0x80
 800026e:	00db      	lsls	r3, r3, #3
 8000270:	04c0      	lsls	r0, r0, #19
 8000272:	4318      	orrs	r0, r3
 8000274:	2300      	movs	r3, #0
 8000276:	4681      	mov	r9, r0
 8000278:	469a      	mov	sl, r3
 800027a:	469b      	mov	fp, r3
 800027c:	3d7f      	subs	r5, #127	; 0x7f
 800027e:	027c      	lsls	r4, r7, #9
 8000280:	007a      	lsls	r2, r7, #1
 8000282:	0ffb      	lsrs	r3, r7, #31
 8000284:	0a64      	lsrs	r4, r4, #9
 8000286:	0e12      	lsrs	r2, r2, #24
 8000288:	4698      	mov	r8, r3
 800028a:	d023      	beq.n	80002d4 <__aeabi_fmul+0x8c>
 800028c:	2aff      	cmp	r2, #255	; 0xff
 800028e:	d04b      	beq.n	8000328 <__aeabi_fmul+0xe0>
 8000290:	00e3      	lsls	r3, r4, #3
 8000292:	2480      	movs	r4, #128	; 0x80
 8000294:	2000      	movs	r0, #0
 8000296:	04e4      	lsls	r4, r4, #19
 8000298:	3a7f      	subs	r2, #127	; 0x7f
 800029a:	431c      	orrs	r4, r3
 800029c:	18ad      	adds	r5, r5, r2
 800029e:	1c6b      	adds	r3, r5, #1
 80002a0:	4647      	mov	r7, r8
 80002a2:	9301      	str	r3, [sp, #4]
 80002a4:	4653      	mov	r3, sl
 80002a6:	4077      	eors	r7, r6
 80002a8:	003a      	movs	r2, r7
 80002aa:	2b0f      	cmp	r3, #15
 80002ac:	d848      	bhi.n	8000340 <__aeabi_fmul+0xf8>
 80002ae:	497d      	ldr	r1, [pc, #500]	; (80004a4 <__aeabi_fmul+0x25c>)
 80002b0:	009b      	lsls	r3, r3, #2
 80002b2:	58cb      	ldr	r3, [r1, r3]
 80002b4:	469f      	mov	pc, r3
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d000      	beq.n	80002bc <__aeabi_fmul+0x74>
 80002ba:	e085      	b.n	80003c8 <__aeabi_fmul+0x180>
 80002bc:	3308      	adds	r3, #8
 80002be:	469a      	mov	sl, r3
 80002c0:	3b06      	subs	r3, #6
 80002c2:	469b      	mov	fp, r3
 80002c4:	027c      	lsls	r4, r7, #9
 80002c6:	007a      	lsls	r2, r7, #1
 80002c8:	0ffb      	lsrs	r3, r7, #31
 80002ca:	25ff      	movs	r5, #255	; 0xff
 80002cc:	0a64      	lsrs	r4, r4, #9
 80002ce:	0e12      	lsrs	r2, r2, #24
 80002d0:	4698      	mov	r8, r3
 80002d2:	d1db      	bne.n	800028c <__aeabi_fmul+0x44>
 80002d4:	2c00      	cmp	r4, #0
 80002d6:	d000      	beq.n	80002da <__aeabi_fmul+0x92>
 80002d8:	e090      	b.n	80003fc <__aeabi_fmul+0x1b4>
 80002da:	4652      	mov	r2, sl
 80002dc:	2301      	movs	r3, #1
 80002de:	431a      	orrs	r2, r3
 80002e0:	4692      	mov	sl, r2
 80002e2:	2001      	movs	r0, #1
 80002e4:	e7db      	b.n	800029e <__aeabi_fmul+0x56>
 80002e6:	464c      	mov	r4, r9
 80002e8:	4658      	mov	r0, fp
 80002ea:	0017      	movs	r7, r2
 80002ec:	2802      	cmp	r0, #2
 80002ee:	d024      	beq.n	800033a <__aeabi_fmul+0xf2>
 80002f0:	2803      	cmp	r0, #3
 80002f2:	d100      	bne.n	80002f6 <__aeabi_fmul+0xae>
 80002f4:	e0cf      	b.n	8000496 <__aeabi_fmul+0x24e>
 80002f6:	2200      	movs	r2, #0
 80002f8:	2300      	movs	r3, #0
 80002fa:	2801      	cmp	r0, #1
 80002fc:	d14d      	bne.n	800039a <__aeabi_fmul+0x152>
 80002fe:	0258      	lsls	r0, r3, #9
 8000300:	05d2      	lsls	r2, r2, #23
 8000302:	0a40      	lsrs	r0, r0, #9
 8000304:	07ff      	lsls	r7, r7, #31
 8000306:	4310      	orrs	r0, r2
 8000308:	4338      	orrs	r0, r7
 800030a:	b003      	add	sp, #12
 800030c:	bc3c      	pop	{r2, r3, r4, r5}
 800030e:	4690      	mov	r8, r2
 8000310:	4699      	mov	r9, r3
 8000312:	46a2      	mov	sl, r4
 8000314:	46ab      	mov	fp, r5
 8000316:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000318:	2b00      	cmp	r3, #0
 800031a:	d15b      	bne.n	80003d4 <__aeabi_fmul+0x18c>
 800031c:	2304      	movs	r3, #4
 800031e:	469a      	mov	sl, r3
 8000320:	3b03      	subs	r3, #3
 8000322:	2500      	movs	r5, #0
 8000324:	469b      	mov	fp, r3
 8000326:	e7aa      	b.n	800027e <__aeabi_fmul+0x36>
 8000328:	35ff      	adds	r5, #255	; 0xff
 800032a:	2c00      	cmp	r4, #0
 800032c:	d160      	bne.n	80003f0 <__aeabi_fmul+0x1a8>
 800032e:	4652      	mov	r2, sl
 8000330:	2302      	movs	r3, #2
 8000332:	431a      	orrs	r2, r3
 8000334:	4692      	mov	sl, r2
 8000336:	2002      	movs	r0, #2
 8000338:	e7b1      	b.n	800029e <__aeabi_fmul+0x56>
 800033a:	22ff      	movs	r2, #255	; 0xff
 800033c:	2300      	movs	r3, #0
 800033e:	e7de      	b.n	80002fe <__aeabi_fmul+0xb6>
 8000340:	464b      	mov	r3, r9
 8000342:	0c1b      	lsrs	r3, r3, #16
 8000344:	469c      	mov	ip, r3
 8000346:	464b      	mov	r3, r9
 8000348:	0426      	lsls	r6, r4, #16
 800034a:	0c36      	lsrs	r6, r6, #16
 800034c:	0418      	lsls	r0, r3, #16
 800034e:	4661      	mov	r1, ip
 8000350:	0033      	movs	r3, r6
 8000352:	0c22      	lsrs	r2, r4, #16
 8000354:	4664      	mov	r4, ip
 8000356:	0c00      	lsrs	r0, r0, #16
 8000358:	4343      	muls	r3, r0
 800035a:	434e      	muls	r6, r1
 800035c:	4350      	muls	r0, r2
 800035e:	4354      	muls	r4, r2
 8000360:	1980      	adds	r0, r0, r6
 8000362:	0c1a      	lsrs	r2, r3, #16
 8000364:	1812      	adds	r2, r2, r0
 8000366:	4296      	cmp	r6, r2
 8000368:	d903      	bls.n	8000372 <__aeabi_fmul+0x12a>
 800036a:	2180      	movs	r1, #128	; 0x80
 800036c:	0249      	lsls	r1, r1, #9
 800036e:	468c      	mov	ip, r1
 8000370:	4464      	add	r4, ip
 8000372:	041b      	lsls	r3, r3, #16
 8000374:	0c1b      	lsrs	r3, r3, #16
 8000376:	0410      	lsls	r0, r2, #16
 8000378:	18c0      	adds	r0, r0, r3
 800037a:	0183      	lsls	r3, r0, #6
 800037c:	1e5e      	subs	r6, r3, #1
 800037e:	41b3      	sbcs	r3, r6
 8000380:	0e80      	lsrs	r0, r0, #26
 8000382:	4318      	orrs	r0, r3
 8000384:	0c13      	lsrs	r3, r2, #16
 8000386:	191b      	adds	r3, r3, r4
 8000388:	019b      	lsls	r3, r3, #6
 800038a:	4303      	orrs	r3, r0
 800038c:	001c      	movs	r4, r3
 800038e:	0123      	lsls	r3, r4, #4
 8000390:	d579      	bpl.n	8000486 <__aeabi_fmul+0x23e>
 8000392:	2301      	movs	r3, #1
 8000394:	0862      	lsrs	r2, r4, #1
 8000396:	401c      	ands	r4, r3
 8000398:	4314      	orrs	r4, r2
 800039a:	9a01      	ldr	r2, [sp, #4]
 800039c:	327f      	adds	r2, #127	; 0x7f
 800039e:	2a00      	cmp	r2, #0
 80003a0:	dd4d      	ble.n	800043e <__aeabi_fmul+0x1f6>
 80003a2:	0763      	lsls	r3, r4, #29
 80003a4:	d004      	beq.n	80003b0 <__aeabi_fmul+0x168>
 80003a6:	230f      	movs	r3, #15
 80003a8:	4023      	ands	r3, r4
 80003aa:	2b04      	cmp	r3, #4
 80003ac:	d000      	beq.n	80003b0 <__aeabi_fmul+0x168>
 80003ae:	3404      	adds	r4, #4
 80003b0:	0123      	lsls	r3, r4, #4
 80003b2:	d503      	bpl.n	80003bc <__aeabi_fmul+0x174>
 80003b4:	4b3c      	ldr	r3, [pc, #240]	; (80004a8 <__aeabi_fmul+0x260>)
 80003b6:	9a01      	ldr	r2, [sp, #4]
 80003b8:	401c      	ands	r4, r3
 80003ba:	3280      	adds	r2, #128	; 0x80
 80003bc:	2afe      	cmp	r2, #254	; 0xfe
 80003be:	dcbc      	bgt.n	800033a <__aeabi_fmul+0xf2>
 80003c0:	01a3      	lsls	r3, r4, #6
 80003c2:	0a5b      	lsrs	r3, r3, #9
 80003c4:	b2d2      	uxtb	r2, r2
 80003c6:	e79a      	b.n	80002fe <__aeabi_fmul+0xb6>
 80003c8:	230c      	movs	r3, #12
 80003ca:	469a      	mov	sl, r3
 80003cc:	3b09      	subs	r3, #9
 80003ce:	25ff      	movs	r5, #255	; 0xff
 80003d0:	469b      	mov	fp, r3
 80003d2:	e754      	b.n	800027e <__aeabi_fmul+0x36>
 80003d4:	0018      	movs	r0, r3
 80003d6:	f000 f8b3 	bl	8000540 <__clzsi2>
 80003da:	464a      	mov	r2, r9
 80003dc:	1f43      	subs	r3, r0, #5
 80003de:	2576      	movs	r5, #118	; 0x76
 80003e0:	409a      	lsls	r2, r3
 80003e2:	2300      	movs	r3, #0
 80003e4:	426d      	negs	r5, r5
 80003e6:	4691      	mov	r9, r2
 80003e8:	1a2d      	subs	r5, r5, r0
 80003ea:	469a      	mov	sl, r3
 80003ec:	469b      	mov	fp, r3
 80003ee:	e746      	b.n	800027e <__aeabi_fmul+0x36>
 80003f0:	4652      	mov	r2, sl
 80003f2:	2303      	movs	r3, #3
 80003f4:	431a      	orrs	r2, r3
 80003f6:	4692      	mov	sl, r2
 80003f8:	2003      	movs	r0, #3
 80003fa:	e750      	b.n	800029e <__aeabi_fmul+0x56>
 80003fc:	0020      	movs	r0, r4
 80003fe:	f000 f89f 	bl	8000540 <__clzsi2>
 8000402:	1f43      	subs	r3, r0, #5
 8000404:	1a2d      	subs	r5, r5, r0
 8000406:	409c      	lsls	r4, r3
 8000408:	3d76      	subs	r5, #118	; 0x76
 800040a:	2000      	movs	r0, #0
 800040c:	e747      	b.n	800029e <__aeabi_fmul+0x56>
 800040e:	2380      	movs	r3, #128	; 0x80
 8000410:	2700      	movs	r7, #0
 8000412:	03db      	lsls	r3, r3, #15
 8000414:	22ff      	movs	r2, #255	; 0xff
 8000416:	e772      	b.n	80002fe <__aeabi_fmul+0xb6>
 8000418:	4642      	mov	r2, r8
 800041a:	e766      	b.n	80002ea <__aeabi_fmul+0xa2>
 800041c:	464c      	mov	r4, r9
 800041e:	0032      	movs	r2, r6
 8000420:	4658      	mov	r0, fp
 8000422:	e762      	b.n	80002ea <__aeabi_fmul+0xa2>
 8000424:	2380      	movs	r3, #128	; 0x80
 8000426:	464a      	mov	r2, r9
 8000428:	03db      	lsls	r3, r3, #15
 800042a:	421a      	tst	r2, r3
 800042c:	d022      	beq.n	8000474 <__aeabi_fmul+0x22c>
 800042e:	421c      	tst	r4, r3
 8000430:	d120      	bne.n	8000474 <__aeabi_fmul+0x22c>
 8000432:	4323      	orrs	r3, r4
 8000434:	025b      	lsls	r3, r3, #9
 8000436:	0a5b      	lsrs	r3, r3, #9
 8000438:	4647      	mov	r7, r8
 800043a:	22ff      	movs	r2, #255	; 0xff
 800043c:	e75f      	b.n	80002fe <__aeabi_fmul+0xb6>
 800043e:	2301      	movs	r3, #1
 8000440:	1a9a      	subs	r2, r3, r2
 8000442:	2a1b      	cmp	r2, #27
 8000444:	dc21      	bgt.n	800048a <__aeabi_fmul+0x242>
 8000446:	0023      	movs	r3, r4
 8000448:	9901      	ldr	r1, [sp, #4]
 800044a:	40d3      	lsrs	r3, r2
 800044c:	319e      	adds	r1, #158	; 0x9e
 800044e:	408c      	lsls	r4, r1
 8000450:	001a      	movs	r2, r3
 8000452:	0023      	movs	r3, r4
 8000454:	1e5c      	subs	r4, r3, #1
 8000456:	41a3      	sbcs	r3, r4
 8000458:	4313      	orrs	r3, r2
 800045a:	075a      	lsls	r2, r3, #29
 800045c:	d004      	beq.n	8000468 <__aeabi_fmul+0x220>
 800045e:	220f      	movs	r2, #15
 8000460:	401a      	ands	r2, r3
 8000462:	2a04      	cmp	r2, #4
 8000464:	d000      	beq.n	8000468 <__aeabi_fmul+0x220>
 8000466:	3304      	adds	r3, #4
 8000468:	015a      	lsls	r2, r3, #5
 800046a:	d411      	bmi.n	8000490 <__aeabi_fmul+0x248>
 800046c:	019b      	lsls	r3, r3, #6
 800046e:	0a5b      	lsrs	r3, r3, #9
 8000470:	2200      	movs	r2, #0
 8000472:	e744      	b.n	80002fe <__aeabi_fmul+0xb6>
 8000474:	2380      	movs	r3, #128	; 0x80
 8000476:	464a      	mov	r2, r9
 8000478:	03db      	lsls	r3, r3, #15
 800047a:	4313      	orrs	r3, r2
 800047c:	025b      	lsls	r3, r3, #9
 800047e:	0a5b      	lsrs	r3, r3, #9
 8000480:	0037      	movs	r7, r6
 8000482:	22ff      	movs	r2, #255	; 0xff
 8000484:	e73b      	b.n	80002fe <__aeabi_fmul+0xb6>
 8000486:	9501      	str	r5, [sp, #4]
 8000488:	e787      	b.n	800039a <__aeabi_fmul+0x152>
 800048a:	2200      	movs	r2, #0
 800048c:	2300      	movs	r3, #0
 800048e:	e736      	b.n	80002fe <__aeabi_fmul+0xb6>
 8000490:	2201      	movs	r2, #1
 8000492:	2300      	movs	r3, #0
 8000494:	e733      	b.n	80002fe <__aeabi_fmul+0xb6>
 8000496:	2380      	movs	r3, #128	; 0x80
 8000498:	03db      	lsls	r3, r3, #15
 800049a:	4323      	orrs	r3, r4
 800049c:	025b      	lsls	r3, r3, #9
 800049e:	0a5b      	lsrs	r3, r3, #9
 80004a0:	22ff      	movs	r2, #255	; 0xff
 80004a2:	e72c      	b.n	80002fe <__aeabi_fmul+0xb6>
 80004a4:	080022a4 	.word	0x080022a4
 80004a8:	f7ffffff 	.word	0xf7ffffff

080004ac <__aeabi_i2f>:
 80004ac:	b570      	push	{r4, r5, r6, lr}
 80004ae:	2800      	cmp	r0, #0
 80004b0:	d03d      	beq.n	800052e <__aeabi_i2f+0x82>
 80004b2:	17c3      	asrs	r3, r0, #31
 80004b4:	18c5      	adds	r5, r0, r3
 80004b6:	405d      	eors	r5, r3
 80004b8:	0fc4      	lsrs	r4, r0, #31
 80004ba:	0028      	movs	r0, r5
 80004bc:	f000 f840 	bl	8000540 <__clzsi2>
 80004c0:	229e      	movs	r2, #158	; 0x9e
 80004c2:	1a12      	subs	r2, r2, r0
 80004c4:	2a96      	cmp	r2, #150	; 0x96
 80004c6:	dc07      	bgt.n	80004d8 <__aeabi_i2f+0x2c>
 80004c8:	b2d2      	uxtb	r2, r2
 80004ca:	2808      	cmp	r0, #8
 80004cc:	dd33      	ble.n	8000536 <__aeabi_i2f+0x8a>
 80004ce:	3808      	subs	r0, #8
 80004d0:	4085      	lsls	r5, r0
 80004d2:	0268      	lsls	r0, r5, #9
 80004d4:	0a40      	lsrs	r0, r0, #9
 80004d6:	e023      	b.n	8000520 <__aeabi_i2f+0x74>
 80004d8:	2a99      	cmp	r2, #153	; 0x99
 80004da:	dd0b      	ble.n	80004f4 <__aeabi_i2f+0x48>
 80004dc:	2305      	movs	r3, #5
 80004de:	0029      	movs	r1, r5
 80004e0:	1a1b      	subs	r3, r3, r0
 80004e2:	40d9      	lsrs	r1, r3
 80004e4:	0003      	movs	r3, r0
 80004e6:	331b      	adds	r3, #27
 80004e8:	409d      	lsls	r5, r3
 80004ea:	002b      	movs	r3, r5
 80004ec:	1e5d      	subs	r5, r3, #1
 80004ee:	41ab      	sbcs	r3, r5
 80004f0:	4319      	orrs	r1, r3
 80004f2:	000d      	movs	r5, r1
 80004f4:	2805      	cmp	r0, #5
 80004f6:	dd01      	ble.n	80004fc <__aeabi_i2f+0x50>
 80004f8:	1f43      	subs	r3, r0, #5
 80004fa:	409d      	lsls	r5, r3
 80004fc:	002b      	movs	r3, r5
 80004fe:	490f      	ldr	r1, [pc, #60]	; (800053c <__aeabi_i2f+0x90>)
 8000500:	400b      	ands	r3, r1
 8000502:	076e      	lsls	r6, r5, #29
 8000504:	d009      	beq.n	800051a <__aeabi_i2f+0x6e>
 8000506:	260f      	movs	r6, #15
 8000508:	4035      	ands	r5, r6
 800050a:	2d04      	cmp	r5, #4
 800050c:	d005      	beq.n	800051a <__aeabi_i2f+0x6e>
 800050e:	3304      	adds	r3, #4
 8000510:	015d      	lsls	r5, r3, #5
 8000512:	d502      	bpl.n	800051a <__aeabi_i2f+0x6e>
 8000514:	229f      	movs	r2, #159	; 0x9f
 8000516:	400b      	ands	r3, r1
 8000518:	1a12      	subs	r2, r2, r0
 800051a:	019b      	lsls	r3, r3, #6
 800051c:	0a58      	lsrs	r0, r3, #9
 800051e:	b2d2      	uxtb	r2, r2
 8000520:	0240      	lsls	r0, r0, #9
 8000522:	05d2      	lsls	r2, r2, #23
 8000524:	0a40      	lsrs	r0, r0, #9
 8000526:	07e4      	lsls	r4, r4, #31
 8000528:	4310      	orrs	r0, r2
 800052a:	4320      	orrs	r0, r4
 800052c:	bd70      	pop	{r4, r5, r6, pc}
 800052e:	2400      	movs	r4, #0
 8000530:	2200      	movs	r2, #0
 8000532:	2000      	movs	r0, #0
 8000534:	e7f4      	b.n	8000520 <__aeabi_i2f+0x74>
 8000536:	0268      	lsls	r0, r5, #9
 8000538:	0a40      	lsrs	r0, r0, #9
 800053a:	e7f1      	b.n	8000520 <__aeabi_i2f+0x74>
 800053c:	fbffffff 	.word	0xfbffffff

08000540 <__clzsi2>:
 8000540:	211c      	movs	r1, #28
 8000542:	2301      	movs	r3, #1
 8000544:	041b      	lsls	r3, r3, #16
 8000546:	4298      	cmp	r0, r3
 8000548:	d301      	bcc.n	800054e <__clzsi2+0xe>
 800054a:	0c00      	lsrs	r0, r0, #16
 800054c:	3910      	subs	r1, #16
 800054e:	0a1b      	lsrs	r3, r3, #8
 8000550:	4298      	cmp	r0, r3
 8000552:	d301      	bcc.n	8000558 <__clzsi2+0x18>
 8000554:	0a00      	lsrs	r0, r0, #8
 8000556:	3908      	subs	r1, #8
 8000558:	091b      	lsrs	r3, r3, #4
 800055a:	4298      	cmp	r0, r3
 800055c:	d301      	bcc.n	8000562 <__clzsi2+0x22>
 800055e:	0900      	lsrs	r0, r0, #4
 8000560:	3904      	subs	r1, #4
 8000562:	a202      	add	r2, pc, #8	; (adr r2, 800056c <__clzsi2+0x2c>)
 8000564:	5c10      	ldrb	r0, [r2, r0]
 8000566:	1840      	adds	r0, r0, r1
 8000568:	4770      	bx	lr
 800056a:	46c0      	nop			; (mov r8, r8)
 800056c:	02020304 	.word	0x02020304
 8000570:	01010101 	.word	0x01010101
	...

0800057c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057c:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057e:	2410      	movs	r4, #16
{
 8000580:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000582:	2230      	movs	r2, #48	; 0x30
 8000584:	2100      	movs	r1, #0
 8000586:	a80c      	add	r0, sp, #48	; 0x30
 8000588:	f001 fe67 	bl	800225a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058c:	0022      	movs	r2, r4
 800058e:	2100      	movs	r1, #0
 8000590:	a801      	add	r0, sp, #4
 8000592:	f001 fe62 	bl	800225a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000596:	2218      	movs	r2, #24
 8000598:	2100      	movs	r1, #0
 800059a:	a805      	add	r0, sp, #20
 800059c:	f001 fe5d 	bl	800225a <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a0:	2501      	movs	r5, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 80005a2:	2332      	movs	r3, #50	; 0x32
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a4:	a80b      	add	r0, sp, #44	; 0x2c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 80005a6:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a8:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80005aa:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ac:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80005ae:	9513      	str	r5, [sp, #76]	; 0x4c
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80005b0:	9510      	str	r5, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b2:	f001 f8a9 	bl	8001708 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b6:	2307      	movs	r3, #7
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b8:	2400      	movs	r4, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ba:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005bc:	0029      	movs	r1, r5
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80005be:	3b04      	subs	r3, #4
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005c0:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80005c2:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c4:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c6:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005c8:	f001 fb30 	bl	8001c2c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 80005cc:	4b04      	ldr	r3, [pc, #16]	; (80005e0 <SystemClock_Config+0x64>)
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005ce:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 80005d0:	9305      	str	r3, [sp, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80005d2:	9408      	str	r4, [sp, #32]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80005d4:	940a      	str	r4, [sp, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005d6:	f001 fbc5 	bl	8001d64 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80005da:	b019      	add	sp, #100	; 0x64
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	46c0      	nop			; (mov r8, r8)
 80005e0:	00020020 	.word	0x00020020

080005e4 <main>:
{
 80005e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005e6:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 80005e8:	f000 fbb8 	bl	8000d5c <HAL_Init>
  SystemClock_Config();
 80005ec:	f7ff ffc6 	bl	800057c <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f0:	2214      	movs	r2, #20
 80005f2:	2100      	movs	r1, #0
 80005f4:	a805      	add	r0, sp, #20
 80005f6:	f001 fe30 	bl	800225a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005fa:	2180      	movs	r1, #128	; 0x80
 80005fc:	4d4b      	ldr	r5, [pc, #300]	; (800072c <main+0x148>)
 80005fe:	03c9      	lsls	r1, r1, #15
 8000600:	696a      	ldr	r2, [r5, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000602:	484b      	ldr	r0, [pc, #300]	; (8000730 <main+0x14c>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000604:	430a      	orrs	r2, r1
 8000606:	616a      	str	r2, [r5, #20]
 8000608:	696b      	ldr	r3, [r5, #20]

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060a:	2400      	movs	r4, #0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800060c:	400b      	ands	r3, r1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800060e:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000610:	9302      	str	r3, [sp, #8]
 8000612:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000614:	696a      	ldr	r2, [r5, #20]
 8000616:	0289      	lsls	r1, r1, #10
 8000618:	430a      	orrs	r2, r1
 800061a:	616a      	str	r2, [r5, #20]
 800061c:	696b      	ldr	r3, [r5, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061e:	2701      	movs	r7, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000620:	400b      	ands	r3, r1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000622:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000624:	9303      	str	r3, [sp, #12]
 8000626:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000628:	696a      	ldr	r2, [r5, #20]
 800062a:	02c9      	lsls	r1, r1, #11
 800062c:	430a      	orrs	r2, r1
 800062e:	616a      	str	r2, [r5, #20]
 8000630:	696b      	ldr	r3, [r5, #20]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000632:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000634:	400b      	ands	r3, r1
 8000636:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000638:	2102      	movs	r1, #2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800063a:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800063c:	f000 ffbe 	bl	80015bc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LED_Pin;
 8000640:	2302      	movs	r3, #2
  ADC_ChannelConfTypeDef sConfig = {0};
 8000642:	260c      	movs	r6, #12
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000644:	a905      	add	r1, sp, #20
 8000646:	483a      	ldr	r0, [pc, #232]	; (8000730 <main+0x14c>)
  GPIO_InitStruct.Pin = LED_Pin;
 8000648:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800064a:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064e:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000650:	f000 ff0a 	bl	8001468 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000654:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000656:	0022      	movs	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000658:	433b      	orrs	r3, r7
 800065a:	616b      	str	r3, [r5, #20]
 800065c:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800065e:	0021      	movs	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000660:	403b      	ands	r3, r7
 8000662:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000664:	2009      	movs	r0, #9
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000666:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000668:	f000 fdf6 	bl	8001258 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800066c:	2009      	movs	r0, #9
 800066e:	f000 fe1d 	bl	80012ac <HAL_NVIC_EnableIRQ>
  ADC_ChannelConfTypeDef sConfig = {0};
 8000672:	0032      	movs	r2, r6
 8000674:	0021      	movs	r1, r4
 8000676:	a805      	add	r0, sp, #20
 8000678:	f001 fdef 	bl	800225a <memset>
  hadc.Instance = ADC1;
 800067c:	4d2d      	ldr	r5, [pc, #180]	; (8000734 <main+0x150>)
 800067e:	4b2e      	ldr	r3, [pc, #184]	; (8000738 <main+0x154>)
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000680:	0028      	movs	r0, r5
  hadc.Instance = ADC1;
 8000682:	602b      	str	r3, [r5, #0]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000684:	2304      	movs	r3, #4
 8000686:	616b      	str	r3, [r5, #20]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000688:	23c2      	movs	r3, #194	; 0xc2
 800068a:	33ff      	adds	r3, #255	; 0xff
 800068c:	61eb      	str	r3, [r5, #28]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800068e:	1d6b      	adds	r3, r5, #5
 8000690:	77dc      	strb	r4, [r3, #31]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000692:	606c      	str	r4, [r5, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000694:	60ac      	str	r4, [r5, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000696:	60ec      	str	r4, [r5, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000698:	612f      	str	r7, [r5, #16]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800069a:	762c      	strb	r4, [r5, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800069c:	766c      	strb	r4, [r5, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 800069e:	76af      	strb	r7, [r5, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80006a0:	76ec      	strb	r4, [r5, #27]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006a2:	622c      	str	r4, [r5, #32]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006a4:	62af      	str	r7, [r5, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80006a6:	f000 fbc7 	bl	8000e38 <HAL_ADC_Init>
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80006aa:	2380      	movs	r3, #128	; 0x80
 80006ac:	015b      	lsls	r3, r3, #5
 80006ae:	9306      	str	r3, [sp, #24]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80006b0:	2380      	movs	r3, #128	; 0x80
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80006b2:	a905      	add	r1, sp, #20
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80006b4:	055b      	lsls	r3, r3, #21
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80006b6:	0028      	movs	r0, r5
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80006b8:	9307      	str	r3, [sp, #28]
  sConfig.Channel = ADC_CHANNEL_0;
 80006ba:	9405      	str	r4, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80006bc:	f000 fcf8 	bl	80010b0 <HAL_ADC_ConfigChannel>
  huart2.Instance = USART2;
 80006c0:	481e      	ldr	r0, [pc, #120]	; (800073c <main+0x158>)
 80006c2:	4b1f      	ldr	r3, [pc, #124]	; (8000740 <main+0x15c>)
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006c4:	6146      	str	r6, [r0, #20]
  huart2.Instance = USART2;
 80006c6:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 80006c8:	23e1      	movs	r3, #225	; 0xe1
 80006ca:	025b      	lsls	r3, r3, #9
 80006cc:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ce:	6084      	str	r4, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006d0:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006d2:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d4:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d6:	61c4      	str	r4, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006d8:	6204      	str	r4, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006da:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006dc:	f001 fd5e 	bl	800219c <HAL_UART_Init>
  hi2c1.Instance = I2C1;
 80006e0:	4e18      	ldr	r6, [pc, #96]	; (8000744 <main+0x160>)
 80006e2:	4b19      	ldr	r3, [pc, #100]	; (8000748 <main+0x164>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006e4:	0030      	movs	r0, r6
  hi2c1.Instance = I2C1;
 80006e6:	6033      	str	r3, [r6, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80006e8:	4b18      	ldr	r3, [pc, #96]	; (800074c <main+0x168>)
  hi2c1.Init.OwnAddress1 = 0;
 80006ea:	60b4      	str	r4, [r6, #8]
  hi2c1.Init.Timing = 0x2000090E;
 80006ec:	6073      	str	r3, [r6, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006ee:	60f7      	str	r7, [r6, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006f0:	6134      	str	r4, [r6, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006f2:	6174      	str	r4, [r6, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006f4:	61b4      	str	r4, [r6, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006f6:	61f4      	str	r4, [r6, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006f8:	6234      	str	r4, [r6, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006fa:	f000 ff65 	bl	80015c8 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006fe:	0021      	movs	r1, r4
 8000700:	0030      	movs	r0, r6
 8000702:	f000 ffb7 	bl	8001674 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000706:	0021      	movs	r1, r4
 8000708:	0030      	movs	r0, r6
 800070a:	f000 ffd9 	bl	80016c0 <HAL_I2CEx_ConfigDigitalFilter>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, RESET);
 800070e:	0022      	movs	r2, r4
 8000710:	2102      	movs	r1, #2
 8000712:	4807      	ldr	r0, [pc, #28]	; (8000730 <main+0x14c>)
 8000714:	f000 ff52 	bl	80015bc <HAL_GPIO_WritePin>
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK){
 8000718:	0028      	movs	r0, r5
 800071a:	f000 fd49 	bl	80011b0 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc, (uint32_t *)adcBuffer, ADC_BUFFER_SIZE);
 800071e:	2280      	movs	r2, #128	; 0x80
 8000720:	490b      	ldr	r1, [pc, #44]	; (8000750 <main+0x16c>)
 8000722:	0092      	lsls	r2, r2, #2
 8000724:	0028      	movs	r0, r5
 8000726:	f000 fc2d 	bl	8000f84 <HAL_ADC_Start_DMA>
 800072a:	e7fe      	b.n	800072a <main+0x146>
 800072c:	40021000 	.word	0x40021000
 8000730:	48000400 	.word	0x48000400
 8000734:	20000d54 	.word	0x20000d54
 8000738:	40012400 	.word	0x40012400
 800073c:	20000c80 	.word	0x20000c80
 8000740:	40004400 	.word	0x40004400
 8000744:	20000c2c 	.word	0x20000c2c
 8000748:	40005400 	.word	0x40005400
 800074c:	2000090e 	.word	0x2000090e
 8000750:	2000082a 	.word	0x2000082a

08000754 <HAL_ADC_ConvCpltCallback>:

}

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
//	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, SET);
 8000756:	2201      	movs	r2, #1
 8000758:	2102      	movs	r1, #2
{
 800075a:	0005      	movs	r5, r0
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, SET);
 800075c:	481a      	ldr	r0, [pc, #104]	; (80007c8 <HAL_ADC_ConvCpltCallback+0x74>)
 800075e:	f000 ff2d 	bl	80015bc <HAL_GPIO_WritePin>

	/*
	 * FFT calculation
	 */
	ZeroFFT((q15_t *)adcBuffer, FFT_BIN_SIZE);
 8000762:	2180      	movs	r1, #128	; 0x80
 8000764:	4c19      	ldr	r4, [pc, #100]	; (80007cc <HAL_ADC_ConvCpltCallback+0x78>)
 8000766:	0089      	lsls	r1, r1, #2
 8000768:	0020      	movs	r0, r4
 800076a:	f000 fa73 	bl	8000c54 <ZeroFFT>

	// find signal frequency
	fft_max_val = 0;
 800076e:	2300      	movs	r3, #0
 8000770:	4a17      	ldr	r2, [pc, #92]	; (80007d0 <HAL_ADC_ConvCpltCallback+0x7c>)
 8000772:	001f      	movs	r7, r3
 8000774:	8013      	strh	r3, [r2, #0]
	for (int i=2;i<FFT_BIN_SIZE_HALF;i++) { // loop start from 2 to avoid DC component
 8000776:	2202      	movs	r2, #2
 8000778:	4916      	ldr	r1, [pc, #88]	; (80007d4 <HAL_ADC_ConvCpltCallback+0x80>)
 800077a:	880e      	ldrh	r6, [r1, #0]
		if (adcBuffer[i] > fft_max_val) {
 800077c:	0050      	lsls	r0, r2, #1
 800077e:	5a20      	ldrh	r0, [r4, r0]
 8000780:	4298      	cmp	r0, r3
 8000782:	d902      	bls.n	800078a <HAL_ADC_ConvCpltCallback+0x36>
			fft_max_index = i;
 8000784:	0003      	movs	r3, r0
 8000786:	2701      	movs	r7, #1
 8000788:	b296      	uxth	r6, r2
	for (int i=2;i<FFT_BIN_SIZE_HALF;i++) { // loop start from 2 to avoid DC component
 800078a:	2080      	movs	r0, #128	; 0x80
 800078c:	3201      	adds	r2, #1
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	4282      	cmp	r2, r0
 8000792:	d1f3      	bne.n	800077c <HAL_ADC_ConvCpltCallback+0x28>
 8000794:	2f00      	cmp	r7, #0
 8000796:	d002      	beq.n	800079e <HAL_ADC_ConvCpltCallback+0x4a>
 8000798:	4a0d      	ldr	r2, [pc, #52]	; (80007d0 <HAL_ADC_ConvCpltCallback+0x7c>)
 800079a:	800e      	strh	r6, [r1, #0]
 800079c:	8013      	strh	r3, [r2, #0]
			fft_max_val = adcBuffer[i];
		}
	}
	fft_max_freq = fft_max_index * FFT_UNIT_FREQ;
 800079e:	8808      	ldrh	r0, [r1, #0]
 80007a0:	f7ff fe84 	bl	80004ac <__aeabi_i2f>
 80007a4:	490c      	ldr	r1, [pc, #48]	; (80007d8 <HAL_ADC_ConvCpltCallback+0x84>)
 80007a6:	f7ff fd4f 	bl	8000248 <__aeabi_fmul>
 80007aa:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <HAL_ADC_ConvCpltCallback+0x88>)

	/* -- end of FFT calculation -- */

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, RESET);
 80007ac:	2200      	movs	r2, #0
	fft_max_freq = fft_max_index * FFT_UNIT_FREQ;
 80007ae:	6018      	str	r0, [r3, #0]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, RESET);
 80007b0:	2102      	movs	r1, #2
 80007b2:	4805      	ldr	r0, [pc, #20]	; (80007c8 <HAL_ADC_ConvCpltCallback+0x74>)
 80007b4:	f000 ff02 	bl	80015bc <HAL_GPIO_WritePin>
	HAL_ADC_Start_DMA(hadc, (uint32_t *)adcBuffer, ADC_BUFFER_SIZE);
 80007b8:	2280      	movs	r2, #128	; 0x80
 80007ba:	0028      	movs	r0, r5
 80007bc:	0092      	lsls	r2, r2, #2
 80007be:	0021      	movs	r1, r4
 80007c0:	f000 fbe0 	bl	8000f84 <HAL_ADC_Start_DMA>
}
 80007c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007c6:	46c0      	nop			; (mov r8, r8)
 80007c8:	48000400 	.word	0x48000400
 80007cc:	2000082a 	.word	0x2000082a
 80007d0:	20000c78 	.word	0x20000c78
 80007d4:	20000828 	.word	0x20000828
 80007d8:	44f42400 	.word	0x44f42400
 80007dc:	20000c7c 	.word	0x20000c7c

080007e0 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007e0:	4770      	bx	lr
	...

080007e4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007e4:	2001      	movs	r0, #1
 80007e6:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <HAL_MspInit+0x34>)
{
 80007e8:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ea:	6999      	ldr	r1, [r3, #24]
 80007ec:	4301      	orrs	r1, r0
 80007ee:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f0:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f2:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f4:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f6:	4002      	ands	r2, r0
 80007f8:	9200      	str	r2, [sp, #0]
 80007fa:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007fc:	69da      	ldr	r2, [r3, #28]
 80007fe:	430a      	orrs	r2, r1
 8000800:	61da      	str	r2, [r3, #28]
 8000802:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  __HAL_REMAP_PIN_ENABLE(HAL_REMAP_PA11_PA12);
 8000804:	4a05      	ldr	r2, [pc, #20]	; (800081c <HAL_MspInit+0x38>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000806:	400b      	ands	r3, r1
 8000808:	9301      	str	r3, [sp, #4]
 800080a:	9b01      	ldr	r3, [sp, #4]
  __HAL_REMAP_PIN_ENABLE(HAL_REMAP_PA11_PA12);
 800080c:	2310      	movs	r3, #16
 800080e:	6811      	ldr	r1, [r2, #0]
 8000810:	430b      	orrs	r3, r1
 8000812:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000814:	b002      	add	sp, #8
 8000816:	4770      	bx	lr
 8000818:	40021000 	.word	0x40021000
 800081c:	40010000 	.word	0x40010000

08000820 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000820:	b530      	push	{r4, r5, lr}
 8000822:	0005      	movs	r5, r0
 8000824:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000826:	2214      	movs	r2, #20
 8000828:	2100      	movs	r1, #0
 800082a:	a803      	add	r0, sp, #12
 800082c:	f001 fd15 	bl	800225a <memset>
  if(hadc->Instance==ADC1)
 8000830:	4b1d      	ldr	r3, [pc, #116]	; (80008a8 <HAL_ADC_MspInit+0x88>)
 8000832:	682a      	ldr	r2, [r5, #0]
 8000834:	429a      	cmp	r2, r3
 8000836:	d134      	bne.n	80008a2 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000838:	2080      	movs	r0, #128	; 0x80
 800083a:	4b1c      	ldr	r3, [pc, #112]	; (80008ac <HAL_ADC_MspInit+0x8c>)
 800083c:	0080      	lsls	r0, r0, #2
 800083e:	6999      	ldr	r1, [r3, #24]
 8000840:	4301      	orrs	r1, r0
 8000842:	6199      	str	r1, [r3, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000844:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000846:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000848:	0289      	lsls	r1, r1, #10
    __HAL_RCC_ADC1_CLK_ENABLE();
 800084a:	4002      	ands	r2, r0
 800084c:	9201      	str	r2, [sp, #4]
 800084e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000850:	695a      	ldr	r2, [r3, #20]
    PA0     ------> ADC_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000852:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000854:	430a      	orrs	r2, r1
 8000856:	615a      	str	r2, [r3, #20]
 8000858:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085a:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800085c:	400b      	ands	r3, r1
 800085e:	9302      	str	r3, [sp, #8]
 8000860:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000862:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000864:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000866:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000868:	3302      	adds	r3, #2
 800086a:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086c:	f000 fdfc 	bl	8001468 <HAL_GPIO_Init>
    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000870:	2280      	movs	r2, #128	; 0x80
    hdma_adc.Instance = DMA1_Channel1;
 8000872:	4c0f      	ldr	r4, [pc, #60]	; (80008b0 <HAL_ADC_MspInit+0x90>)
 8000874:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <HAL_ADC_MspInit+0x94>)
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000876:	60e2      	str	r2, [r4, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000878:	1892      	adds	r2, r2, r2
 800087a:	6122      	str	r2, [r4, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800087c:	2280      	movs	r2, #128	; 0x80
 800087e:	00d2      	lsls	r2, r2, #3
    hdma_adc.Instance = DMA1_Channel1;
 8000880:	6023      	str	r3, [r4, #0]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000882:	6162      	str	r2, [r4, #20]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000884:	2300      	movs	r3, #0
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8000886:	2220      	movs	r2, #32
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000888:	0020      	movs	r0, r4
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800088a:	6063      	str	r3, [r4, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800088c:	60a3      	str	r3, [r4, #8]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 800088e:	61a2      	str	r2, [r4, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8000890:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000892:	f000 fd31 	bl	80012f8 <HAL_DMA_Init>
 8000896:	2800      	cmp	r0, #0
 8000898:	d001      	beq.n	800089e <HAL_ADC_MspInit+0x7e>
    {
      Error_Handler();
 800089a:	f7ff ffa1 	bl	80007e0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 800089e:	632c      	str	r4, [r5, #48]	; 0x30
 80008a0:	6265      	str	r5, [r4, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80008a2:	b009      	add	sp, #36	; 0x24
 80008a4:	bd30      	pop	{r4, r5, pc}
 80008a6:	46c0      	nop			; (mov r8, r8)
 80008a8:	40012400 	.word	0x40012400
 80008ac:	40021000 	.word	0x40021000
 80008b0:	20000d10 	.word	0x20000d10
 80008b4:	40020008 	.word	0x40020008

080008b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008b8:	b510      	push	{r4, lr}
 80008ba:	0004      	movs	r4, r0
 80008bc:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008be:	2214      	movs	r2, #20
 80008c0:	2100      	movs	r1, #0
 80008c2:	a803      	add	r0, sp, #12
 80008c4:	f001 fcc9 	bl	800225a <memset>
  if(hi2c->Instance==I2C1)
 80008c8:	4b12      	ldr	r3, [pc, #72]	; (8000914 <HAL_I2C_MspInit+0x5c>)
 80008ca:	6822      	ldr	r2, [r4, #0]
 80008cc:	429a      	cmp	r2, r3
 80008ce:	d11e      	bne.n	800090e <HAL_I2C_MspInit+0x56>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80008d0:	2180      	movs	r1, #128	; 0x80
 80008d2:	4c11      	ldr	r4, [pc, #68]	; (8000918 <HAL_I2C_MspInit+0x60>)
 80008d4:	03c9      	lsls	r1, r1, #15
 80008d6:	6962      	ldr	r2, [r4, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008d8:	4810      	ldr	r0, [pc, #64]	; (800091c <HAL_I2C_MspInit+0x64>)
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80008da:	430a      	orrs	r2, r1
 80008dc:	6162      	str	r2, [r4, #20]
 80008de:	6963      	ldr	r3, [r4, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80008e0:	2203      	movs	r2, #3
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80008e2:	400b      	ands	r3, r1
 80008e4:	9301      	str	r3, [sp, #4]
 80008e6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008e8:	2312      	movs	r3, #18
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008ea:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008ec:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008ee:	3b11      	subs	r3, #17
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80008f0:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008f2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008f4:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80008f6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008f8:	f000 fdb6 	bl	8001468 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008fc:	2180      	movs	r1, #128	; 0x80
 80008fe:	69e2      	ldr	r2, [r4, #28]
 8000900:	0389      	lsls	r1, r1, #14
 8000902:	430a      	orrs	r2, r1
 8000904:	61e2      	str	r2, [r4, #28]
 8000906:	69e3      	ldr	r3, [r4, #28]
 8000908:	400b      	ands	r3, r1
 800090a:	9302      	str	r3, [sp, #8]
 800090c:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800090e:	b008      	add	sp, #32
 8000910:	bd10      	pop	{r4, pc}
 8000912:	46c0      	nop			; (mov r8, r8)
 8000914:	40005400 	.word	0x40005400
 8000918:	40021000 	.word	0x40021000
 800091c:	48001400 	.word	0x48001400

08000920 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000920:	b510      	push	{r4, lr}
 8000922:	0004      	movs	r4, r0
 8000924:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000926:	2214      	movs	r2, #20
 8000928:	2100      	movs	r1, #0
 800092a:	a803      	add	r0, sp, #12
 800092c:	f001 fc95 	bl	800225a <memset>
  if(huart->Instance==USART2)
 8000930:	4b11      	ldr	r3, [pc, #68]	; (8000978 <HAL_UART_MspInit+0x58>)
 8000932:	6822      	ldr	r2, [r4, #0]
 8000934:	429a      	cmp	r2, r3
 8000936:	d11d      	bne.n	8000974 <HAL_UART_MspInit+0x54>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000938:	2280      	movs	r2, #128	; 0x80
 800093a:	4b10      	ldr	r3, [pc, #64]	; (800097c <HAL_UART_MspInit+0x5c>)
 800093c:	0292      	lsls	r2, r2, #10
 800093e:	69d9      	ldr	r1, [r3, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000940:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_USART2_CLK_ENABLE();
 8000942:	4311      	orrs	r1, r2
 8000944:	61d9      	str	r1, [r3, #28]
 8000946:	69d9      	ldr	r1, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000948:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART2_CLK_ENABLE();
 800094a:	4011      	ands	r1, r2
 800094c:	9101      	str	r1, [sp, #4]
 800094e:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000950:	6959      	ldr	r1, [r3, #20]
 8000952:	4311      	orrs	r1, r2
 8000954:	6159      	str	r1, [r3, #20]
 8000956:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000958:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	401a      	ands	r2, r3
 800095c:	9202      	str	r2, [sp, #8]
 800095e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000960:	230c      	movs	r3, #12
 8000962:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000964:	3b0a      	subs	r3, #10
 8000966:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000968:	3301      	adds	r3, #1
 800096a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800096c:	3b02      	subs	r3, #2
 800096e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000970:	f000 fd7a 	bl	8001468 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000974:	b008      	add	sp, #32
 8000976:	bd10      	pop	{r4, pc}
 8000978:	40004400 	.word	0x40004400
 800097c:	40021000 	.word	0x40021000

08000980 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000980:	4770      	bx	lr

08000982 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000982:	e7fe      	b.n	8000982 <HardFault_Handler>

08000984 <SVC_Handler>:
 8000984:	4770      	bx	lr

08000986 <PendSV_Handler>:
 8000986:	4770      	bx	lr

08000988 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000988:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800098a:	f000 f9f7 	bl	8000d7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800098e:	bd10      	pop	{r4, pc}

08000990 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000990:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8000992:	4802      	ldr	r0, [pc, #8]	; (800099c <DMA1_Channel1_IRQHandler+0xc>)
 8000994:	f000 fd1e 	bl	80013d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000998:	bd10      	pop	{r4, pc}
 800099a:	46c0      	nop			; (mov r8, r8)
 800099c:	20000d10 	.word	0x20000d10

080009a0 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80009a0:	4770      	bx	lr
	...

080009a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009a4:	4813      	ldr	r0, [pc, #76]	; (80009f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009a6:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 80009a8:	4813      	ldr	r0, [pc, #76]	; (80009f8 <LoopForever+0x6>)
    LDR R1, [R0]
 80009aa:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80009ac:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80009ae:	4a13      	ldr	r2, [pc, #76]	; (80009fc <LoopForever+0xa>)
    CMP R1, R2
 80009b0:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80009b2:	d105      	bne.n	80009c0 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 80009b4:	4812      	ldr	r0, [pc, #72]	; (8000a00 <LoopForever+0xe>)
    LDR R1,=0x00000001
 80009b6:	4913      	ldr	r1, [pc, #76]	; (8000a04 <LoopForever+0x12>)
    STR R1, [R0]
 80009b8:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80009ba:	4813      	ldr	r0, [pc, #76]	; (8000a08 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80009bc:	4913      	ldr	r1, [pc, #76]	; (8000a0c <LoopForever+0x1a>)
    STR R1, [R0]
 80009be:	6001      	str	r1, [r0, #0]

080009c0 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009c0:	4813      	ldr	r0, [pc, #76]	; (8000a10 <LoopForever+0x1e>)
  ldr r1, =_edata
 80009c2:	4914      	ldr	r1, [pc, #80]	; (8000a14 <LoopForever+0x22>)
  ldr r2, =_sidata
 80009c4:	4a14      	ldr	r2, [pc, #80]	; (8000a18 <LoopForever+0x26>)
  movs r3, #0
 80009c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009c8:	e002      	b.n	80009d0 <LoopCopyDataInit>

080009ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ce:	3304      	adds	r3, #4

080009d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d4:	d3f9      	bcc.n	80009ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009d6:	4a11      	ldr	r2, [pc, #68]	; (8000a1c <LoopForever+0x2a>)
  ldr r4, =_ebss
 80009d8:	4c11      	ldr	r4, [pc, #68]	; (8000a20 <LoopForever+0x2e>)
  movs r3, #0
 80009da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009dc:	e001      	b.n	80009e2 <LoopFillZerobss>

080009de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009e0:	3204      	adds	r2, #4

080009e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e4:	d3fb      	bcc.n	80009de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80009e6:	f7ff ffdb 	bl	80009a0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80009ea:	f001 fc09 	bl	8002200 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009ee:	f7ff fdf9 	bl	80005e4 <main>

080009f2 <LoopForever>:

LoopForever:
    b LoopForever
 80009f2:	e7fe      	b.n	80009f2 <LoopForever>
  ldr   r0, =_estack
 80009f4:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 80009f8:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80009fc:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000a00:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000a04:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000a08:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000a0c:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000a10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a14:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a18:	08006108 	.word	0x08006108
  ldr r2, =_sbss
 8000a1c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a20:	20000d98 	.word	0x20000d98

08000a24 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a24:	e7fe      	b.n	8000a24 <ADC1_IRQHandler>

08000a26 <arm_bitreversal_q15>:
void arm_bitreversal_q15(
  q15_t * pSrc16,
  uint32_t fftLen,
  uint16_t bitRevFactor,
  uint16_t * pBitRevTab)
{
 8000a26:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t fftLenBy2, fftLenBy2p1;
  uint32_t i, j;

  /*  Initializations */
  j = 0u;
  fftLenBy2 = fftLen / 2u;
 8000a28:	0849      	lsrs	r1, r1, #1
{
 8000a2a:	b087      	sub	sp, #28

    /*  Reading the index for the bit reversal */
    j = *pBitRevTab;

    /*  Updating the bit reversal index depending on the fft length  */
    pBitRevTab += bitRevFactor;
 8000a2c:	0052      	lsls	r2, r2, #1
 8000a2e:	9202      	str	r2, [sp, #8]
 8000a30:	008a      	lsls	r2, r1, #2
 8000a32:	4694      	mov	ip, r2
  j = 0u;
 8000a34:	2200      	movs	r2, #0
  for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
 8000a36:	0015      	movs	r5, r2
  fftLenBy2p1 = (fftLen / 2u) + 1u;
 8000a38:	1c4c      	adds	r4, r1, #1
  for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
 8000a3a:	1e8e      	subs	r6, r1, #2
  fftLenBy2p1 = (fftLen / 2u) + 1u;
 8000a3c:	9403      	str	r4, [sp, #12]
{
 8000a3e:	9301      	str	r3, [sp, #4]
 8000a40:	1d04      	adds	r4, r0, #4
  for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
 8000a42:	9605      	str	r6, [sp, #20]
 8000a44:	9b05      	ldr	r3, [sp, #20]
 8000a46:	42ab      	cmp	r3, r5
 8000a48:	d201      	bcs.n	8000a4e <arm_bitreversal_q15+0x28>
  }
}
 8000a4a:	b007      	add	sp, #28
 8000a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(i < j)
 8000a4e:	4295      	cmp	r5, r2
 8000a50:	d214      	bcs.n	8000a7c <arm_bitreversal_q15+0x56>
 8000a52:	1f27      	subs	r7, r4, #4
      in = pSrc[i];
 8000a54:	683e      	ldr	r6, [r7, #0]
 8000a56:	9604      	str	r6, [sp, #16]
      pSrc[i] = pSrc[j];
 8000a58:	0096      	lsls	r6, r2, #2
 8000a5a:	1986      	adds	r6, r0, r6
 8000a5c:	6833      	ldr	r3, [r6, #0]
 8000a5e:	603b      	str	r3, [r7, #0]
      pSrc[j] = in;
 8000a60:	9b04      	ldr	r3, [sp, #16]
 8000a62:	6033      	str	r3, [r6, #0]
      in = pSrc[i + fftLenBy2p1];
 8000a64:	4663      	mov	r3, ip
 8000a66:	58e3      	ldr	r3, [r4, r3]
 8000a68:	9304      	str	r3, [sp, #16]
      pSrc[i + fftLenBy2p1] = pSrc[j + fftLenBy2p1];
 8000a6a:	9b03      	ldr	r3, [sp, #12]
 8000a6c:	18d6      	adds	r6, r2, r3
 8000a6e:	4663      	mov	r3, ip
 8000a70:	00b6      	lsls	r6, r6, #2
 8000a72:	1986      	adds	r6, r0, r6
 8000a74:	6837      	ldr	r7, [r6, #0]
 8000a76:	50e7      	str	r7, [r4, r3]
      pSrc[j + fftLenBy2p1] = in;
 8000a78:	9b04      	ldr	r3, [sp, #16]
 8000a7a:	6033      	str	r3, [r6, #0]
    pSrc[i + 1u] = pSrc[j + fftLenBy2];
 8000a7c:	1852      	adds	r2, r2, r1
 8000a7e:	0092      	lsls	r2, r2, #2
 8000a80:	1882      	adds	r2, r0, r2
 8000a82:	6813      	ldr	r3, [r2, #0]
    in = pSrc[i + 1u];
 8000a84:	6826      	ldr	r6, [r4, #0]
    pSrc[i + 1u] = pSrc[j + fftLenBy2];
 8000a86:	6023      	str	r3, [r4, #0]
    j = *pBitRevTab;
 8000a88:	9b01      	ldr	r3, [sp, #4]
    pSrc[j + fftLenBy2] = in;
 8000a8a:	6016      	str	r6, [r2, #0]
    pBitRevTab += bitRevFactor;
 8000a8c:	9e01      	ldr	r6, [sp, #4]
    j = *pBitRevTab;
 8000a8e:	881a      	ldrh	r2, [r3, #0]
    pBitRevTab += bitRevFactor;
 8000a90:	9b02      	ldr	r3, [sp, #8]
  for (i = 0u; i <= (fftLenBy2 - 2u); i += 2u)
 8000a92:	3502      	adds	r5, #2
    pBitRevTab += bitRevFactor;
 8000a94:	18f3      	adds	r3, r6, r3
 8000a96:	9301      	str	r3, [sp, #4]
 8000a98:	3408      	adds	r4, #8
 8000a9a:	e7d3      	b.n	8000a44 <arm_bitreversal_q15+0x1e>

08000a9c <arm_radix2_butterfly_q15>:
void arm_radix2_butterfly_q15(
  q15_t * pSrc,
  uint32_t fftLen,
  q15_t * pCoef,
  uint16_t twidCoefModifier)
{
 8000a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a9e:	b08d      	sub	sp, #52	; 0x34
 8000aa0:	9005      	str	r0, [sp, #20]
  n1 = n2;
  n2 = n2 >> 1;
  ia = 0;

  // loop for groups
  for (j = 0; j < n2; j++)
 8000aa2:	0014      	movs	r4, r2
 8000aa4:	2000      	movs	r0, #0
{
 8000aa6:	9307      	str	r3, [sp, #28]
  n2 = n2 >> 1;
 8000aa8:	104b      	asrs	r3, r1, #1
 8000aaa:	9300      	str	r3, [sp, #0]
 8000aac:	9b07      	ldr	r3, [sp, #28]
{
 8000aae:	9101      	str	r1, [sp, #4]
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	930a      	str	r3, [sp, #40]	; 0x28
 8000ab4:	008b      	lsls	r3, r1, #2
 8000ab6:	9308      	str	r3, [sp, #32]
 8000ab8:	9b00      	ldr	r3, [sp, #0]
 8000aba:	9209      	str	r2, [sp, #36]	; 0x24
 8000abc:	009b      	lsls	r3, r3, #2
 8000abe:	9302      	str	r3, [sp, #8]
  for (j = 0; j < n2; j++)
 8000ac0:	9b00      	ldr	r3, [sp, #0]
 8000ac2:	4298      	cmp	r0, r3
 8000ac4:	db18      	blt.n	8000af8 <arm_radix2_butterfly_q15+0x5c>

    }                           // butterfly loop end

  }                             // groups loop end

  twidCoefModifier = twidCoefModifier << 1u;
 8000ac6:	9b07      	ldr	r3, [sp, #28]
 8000ac8:	005b      	lsls	r3, r3, #1
 8000aca:	b29b      	uxth	r3, r3
 8000acc:	9303      	str	r3, [sp, #12]

  // loop for stage
  for (k = fftLen / 2; k > 2; k = k >> 1)
 8000ace:	9b01      	ldr	r3, [sp, #4]
 8000ad0:	085b      	lsrs	r3, r3, #1
 8000ad2:	9304      	str	r3, [sp, #16]
 8000ad4:	9b00      	ldr	r3, [sp, #0]
 8000ad6:	105b      	asrs	r3, r3, #1
 8000ad8:	9302      	str	r3, [sp, #8]
 8000ada:	9b00      	ldr	r3, [sp, #0]
 8000adc:	009b      	lsls	r3, r3, #2
 8000ade:	930a      	str	r3, [sp, #40]	; 0x28
 8000ae0:	9b02      	ldr	r3, [sp, #8]
 8000ae2:	009d      	lsls	r5, r3, #2
 8000ae4:	9b04      	ldr	r3, [sp, #16]
 8000ae6:	2b02      	cmp	r3, #2
 8000ae8:	dc00      	bgt.n	8000aec <arm_radix2_butterfly_q15+0x50>
 8000aea:	e08e      	b.n	8000c0a <arm_radix2_butterfly_q15+0x16e>
 8000aec:	9b03      	ldr	r3, [sp, #12]
 8000aee:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8000af0:	009b      	lsls	r3, r3, #2
 8000af2:	930b      	str	r3, [sp, #44]	; 0x2c
    n1 = n2;
    n2 = n2 >> 1;
    ia = 0;

    // loop for groups
    for (j = 0; j < n2; j++)
 8000af4:	2000      	movs	r0, #0
 8000af6:	e051      	b.n	8000b9c <arm_radix2_butterfly_q15+0x100>
    for (i = j; i < fftLen; i += n1)
 8000af8:	4684      	mov	ip, r0
    cosVal = pCoef[ia * 2];
 8000afa:	2200      	movs	r2, #0
 8000afc:	5ea3      	ldrsh	r3, [r4, r2]
 8000afe:	9303      	str	r3, [sp, #12]
    sinVal = pCoef[(ia * 2) + 1];
 8000b00:	2202      	movs	r2, #2
 8000b02:	5ea3      	ldrsh	r3, [r4, r2]
 8000b04:	0082      	lsls	r2, r0, #2
 8000b06:	9304      	str	r3, [sp, #16]
 8000b08:	9b05      	ldr	r3, [sp, #20]
 8000b0a:	189a      	adds	r2, r3, r2
    for (i = j; i < fftLen; i += n1)
 8000b0c:	9b01      	ldr	r3, [sp, #4]
 8000b0e:	4563      	cmp	r3, ip
 8000b10:	d803      	bhi.n	8000b1a <arm_radix2_butterfly_q15+0x7e>
 8000b12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  for (j = 0; j < n2; j++)
 8000b14:	3001      	adds	r0, #1
 8000b16:	18e4      	adds	r4, r4, r3
 8000b18:	e7d2      	b.n	8000ac0 <arm_radix2_butterfly_q15+0x24>
      xt = (pSrc[2 * i] >> 2u) - (pSrc[2 * l] >> 2u);
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	5ed6      	ldrsh	r6, [r2, r3]
 8000b1e:	9b02      	ldr	r3, [sp, #8]
 8000b20:	10b6      	asrs	r6, r6, #2
 8000b22:	5ed1      	ldrsh	r1, [r2, r3]
 8000b24:	9f02      	ldr	r7, [sp, #8]
 8000b26:	1089      	asrs	r1, r1, #2
      pSrc[2 * i] = ((pSrc[2 * i] >> 2u) + (pSrc[2 * l] >> 2u)) >> 1u;
 8000b28:	1873      	adds	r3, r6, r1
 8000b2a:	105b      	asrs	r3, r3, #1
 8000b2c:	8013      	strh	r3, [r2, #0]
      yt = (pSrc[2 * i + 1] >> 2u) - (pSrc[2 * l + 1] >> 2u);
 8000b2e:	2302      	movs	r3, #2
 8000b30:	5ed5      	ldrsh	r5, [r2, r3]
 8000b32:	19d3      	adds	r3, r2, r7
 8000b34:	9306      	str	r3, [sp, #24]
 8000b36:	2702      	movs	r7, #2
 8000b38:	5fdb      	ldrsh	r3, [r3, r7]
 8000b3a:	10ad      	asrs	r5, r5, #2
 8000b3c:	109b      	asrs	r3, r3, #2
        ((pSrc[2 * l + 1] >> 2u) + (pSrc[2 * i + 1] >> 2u)) >> 1u;
 8000b3e:	195f      	adds	r7, r3, r5
      pSrc[2u * l] = (((int16_t) (((q31_t) xt * cosVal) >> 16)) +
 8000b40:	1a71      	subs	r1, r6, r1
                      ((int16_t) (((q31_t) yt * sinVal) >> 16)));
 8000b42:	1aeb      	subs	r3, r5, r3
 8000b44:	9e04      	ldr	r6, [sp, #16]
      pSrc[2u * l] = (((int16_t) (((q31_t) xt * cosVal) >> 16)) +
 8000b46:	9d03      	ldr	r5, [sp, #12]
                      ((int16_t) (((q31_t) yt * sinVal) >> 16)));
 8000b48:	435e      	muls	r6, r3
      pSrc[2u * l] = (((int16_t) (((q31_t) xt * cosVal) >> 16)) +
 8000b4a:	434d      	muls	r5, r1
                      ((int16_t) (((q31_t) yt * sinVal) >> 16)));
 8000b4c:	1436      	asrs	r6, r6, #16
      pSrc[2u * l] = (((int16_t) (((q31_t) xt * cosVal) >> 16)) +
 8000b4e:	142d      	asrs	r5, r5, #16
 8000b50:	19ad      	adds	r5, r5, r6
 8000b52:	9e02      	ldr	r6, [sp, #8]
        ((pSrc[2 * l + 1] >> 2u) + (pSrc[2 * i + 1] >> 2u)) >> 1u;
 8000b54:	107f      	asrs	r7, r7, #1
      pSrc[2 * i + 1] =
 8000b56:	8057      	strh	r7, [r2, #2]
      pSrc[2u * l] = (((int16_t) (((q31_t) xt * cosVal) >> 16)) +
 8000b58:	5395      	strh	r5, [r2, r6]
      pSrc[2u * l + 1u] = (((int16_t) (((q31_t) yt * cosVal) >> 16)) -
 8000b5a:	9d03      	ldr	r5, [sp, #12]
 8000b5c:	436b      	muls	r3, r5
                           ((int16_t) (((q31_t) xt * sinVal) >> 16)));
 8000b5e:	9d04      	ldr	r5, [sp, #16]
      pSrc[2u * l + 1u] = (((int16_t) (((q31_t) yt * cosVal) >> 16)) -
 8000b60:	141b      	asrs	r3, r3, #16
                           ((int16_t) (((q31_t) xt * sinVal) >> 16)));
 8000b62:	4369      	muls	r1, r5
 8000b64:	1409      	asrs	r1, r1, #16
      pSrc[2u * l + 1u] = (((int16_t) (((q31_t) yt * cosVal) >> 16)) -
 8000b66:	1a5b      	subs	r3, r3, r1
 8000b68:	9906      	ldr	r1, [sp, #24]
 8000b6a:	804b      	strh	r3, [r1, #2]
    for (i = j; i < fftLen; i += n1)
 8000b6c:	9901      	ldr	r1, [sp, #4]
 8000b6e:	4663      	mov	r3, ip
 8000b70:	468c      	mov	ip, r1
 8000b72:	4463      	add	r3, ip
 8000b74:	469c      	mov	ip, r3
 8000b76:	9b08      	ldr	r3, [sp, #32]
 8000b78:	18d2      	adds	r2, r2, r3
 8000b7a:	e7c7      	b.n	8000b0c <arm_radix2_butterfly_q15+0x70>
      cosVal = pCoef[ia * 2];
      sinVal = pCoef[(ia * 2) + 1];
      ia = ia + twidCoefModifier;

      // loop for butterfly
      for (i = j; i < fftLen; i += n1)
 8000b7c:	4684      	mov	ip, r0
      cosVal = pCoef[ia * 2];
 8000b7e:	2200      	movs	r2, #0
 8000b80:	5ebb      	ldrsh	r3, [r7, r2]
 8000b82:	9307      	str	r3, [sp, #28]
      sinVal = pCoef[(ia * 2) + 1];
 8000b84:	2202      	movs	r2, #2
 8000b86:	5ebb      	ldrsh	r3, [r7, r2]
 8000b88:	0082      	lsls	r2, r0, #2
 8000b8a:	9308      	str	r3, [sp, #32]
 8000b8c:	9b05      	ldr	r3, [sp, #20]
 8000b8e:	189a      	adds	r2, r3, r2
      for (i = j; i < fftLen; i += n1)
 8000b90:	9b01      	ldr	r3, [sp, #4]
 8000b92:	4563      	cmp	r3, ip
 8000b94:	d80f      	bhi.n	8000bb6 <arm_radix2_butterfly_q15+0x11a>
 8000b96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    for (j = 0; j < n2; j++)
 8000b98:	3001      	adds	r0, #1
 8000b9a:	18ff      	adds	r7, r7, r3
 8000b9c:	9b02      	ldr	r3, [sp, #8]
 8000b9e:	4283      	cmp	r3, r0
 8000ba0:	dcec      	bgt.n	8000b7c <arm_radix2_butterfly_q15+0xe0>

      }                         // butterfly loop end

    }                           // groups loop end

    twidCoefModifier = twidCoefModifier << 1u;
 8000ba2:	9b03      	ldr	r3, [sp, #12]
 8000ba4:	005b      	lsls	r3, r3, #1
 8000ba6:	b29b      	uxth	r3, r3
 8000ba8:	9303      	str	r3, [sp, #12]
  for (k = fftLen / 2; k > 2; k = k >> 1)
 8000baa:	9b04      	ldr	r3, [sp, #16]
 8000bac:	105b      	asrs	r3, r3, #1
 8000bae:	9304      	str	r3, [sp, #16]
 8000bb0:	9b02      	ldr	r3, [sp, #8]
 8000bb2:	9300      	str	r3, [sp, #0]
 8000bb4:	e78e      	b.n	8000ad4 <arm_radix2_butterfly_q15+0x38>
        xt = pSrc[2 * i] - pSrc[2 * l];
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	5ed1      	ldrsh	r1, [r2, r3]
 8000bba:	5f53      	ldrsh	r3, [r2, r5]
 8000bbc:	9306      	str	r3, [sp, #24]
        pSrc[2 * i] = (pSrc[2 * i] + pSrc[2 * l]) >> 1u;
 8000bbe:	18cb      	adds	r3, r1, r3
 8000bc0:	105b      	asrs	r3, r3, #1
 8000bc2:	8013      	strh	r3, [r2, #0]
        yt = pSrc[2 * i + 1] - pSrc[2 * l + 1];
 8000bc4:	2402      	movs	r4, #2
 8000bc6:	5f13      	ldrsh	r3, [r2, r4]
 8000bc8:	1954      	adds	r4, r2, r5
 8000bca:	2602      	movs	r6, #2
 8000bcc:	5fa6      	ldrsh	r6, [r4, r6]
        pSrc[2 * i + 1] = (pSrc[2 * l + 1] + pSrc[2 * i + 1]) >> 1u;
 8000bce:	18f4      	adds	r4, r6, r3
 8000bd0:	1064      	asrs	r4, r4, #1
 8000bd2:	8054      	strh	r4, [r2, #2]
        xt = pSrc[2 * i] - pSrc[2 * l];
 8000bd4:	9c06      	ldr	r4, [sp, #24]
        yt = pSrc[2 * i + 1] - pSrc[2 * l + 1];
 8000bd6:	1b9b      	subs	r3, r3, r6
        xt = pSrc[2 * i] - pSrc[2 * l];
 8000bd8:	1b09      	subs	r1, r1, r4
                        ((int16_t) (((q31_t) yt * sinVal) >> 16)));
 8000bda:	9e08      	ldr	r6, [sp, #32]
        pSrc[2u * l] = (((int16_t) (((q31_t) xt * cosVal) >> 16)) +
 8000bdc:	9c07      	ldr	r4, [sp, #28]
 8000bde:	b209      	sxth	r1, r1
                        ((int16_t) (((q31_t) yt * sinVal) >> 16)));
 8000be0:	b21b      	sxth	r3, r3
        pSrc[2u * l] = (((int16_t) (((q31_t) xt * cosVal) >> 16)) +
 8000be2:	434c      	muls	r4, r1
                        ((int16_t) (((q31_t) yt * sinVal) >> 16)));
 8000be4:	435e      	muls	r6, r3
        pSrc[2u * l] = (((int16_t) (((q31_t) xt * cosVal) >> 16)) +
 8000be6:	1424      	asrs	r4, r4, #16
                        ((int16_t) (((q31_t) yt * sinVal) >> 16)));
 8000be8:	1436      	asrs	r6, r6, #16
        pSrc[2u * l] = (((int16_t) (((q31_t) xt * cosVal) >> 16)) +
 8000bea:	19a4      	adds	r4, r4, r6
 8000bec:	5354      	strh	r4, [r2, r5]
        pSrc[2u * l + 1u] = (((int16_t) (((q31_t) yt * cosVal) >> 16)) -
 8000bee:	9c07      	ldr	r4, [sp, #28]
 8000bf0:	4363      	muls	r3, r4
                             ((int16_t) (((q31_t) xt * sinVal) >> 16)));
 8000bf2:	9c08      	ldr	r4, [sp, #32]
        pSrc[2u * l + 1u] = (((int16_t) (((q31_t) yt * cosVal) >> 16)) -
 8000bf4:	141b      	asrs	r3, r3, #16
                             ((int16_t) (((q31_t) xt * sinVal) >> 16)));
 8000bf6:	4361      	muls	r1, r4
 8000bf8:	1409      	asrs	r1, r1, #16
        pSrc[2u * l + 1u] = (((int16_t) (((q31_t) yt * cosVal) >> 16)) -
 8000bfa:	1a5b      	subs	r3, r3, r1
 8000bfc:	1951      	adds	r1, r2, r5
 8000bfe:	804b      	strh	r3, [r1, #2]
      for (i = j; i < fftLen; i += n1)
 8000c00:	9b00      	ldr	r3, [sp, #0]
 8000c02:	449c      	add	ip, r3
 8000c04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000c06:	18d2      	adds	r2, r2, r3
 8000c08:	e7c2      	b.n	8000b90 <arm_radix2_butterfly_q15+0xf4>
  n1 = n2;
  n2 = n2 >> 1;
  ia = 0;

  // loop for groups
  for (j = 0; j < n2; j++)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	9b02      	ldr	r3, [sp, #8]
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	dd1e      	ble.n	8000c50 <arm_radix2_butterfly_q15+0x1b4>
 8000c12:	9905      	ldr	r1, [sp, #20]
 8000c14:	0093      	lsls	r3, r2, #2
 8000c16:	18cb      	adds	r3, r1, r3
 8000c18:	0014      	movs	r4, r2
 8000c1a:	e014      	b.n	8000c46 <arm_radix2_butterfly_q15+0x1aa>
 8000c1c:	195e      	adds	r6, r3, r5
 8000c1e:	46b4      	mov	ip, r6

    // loop for butterfly
    for (i = j; i < fftLen; i += n1)
    {
      l = i + n2;
      xt = pSrc[2 * i] - pSrc[2 * l];
 8000c20:	5b5f      	ldrh	r7, [r3, r5]
 8000c22:	8819      	ldrh	r1, [r3, #0]
 8000c24:	9103      	str	r1, [sp, #12]
      pSrc[2 * i] = (pSrc[2 * i] + pSrc[2 * l]);
 8000c26:	19c9      	adds	r1, r1, r7
 8000c28:	8019      	strh	r1, [r3, #0]

      yt = pSrc[2 * i + 1] - pSrc[2 * l + 1];
 8000c2a:	8876      	ldrh	r6, [r6, #2]
 8000c2c:	8859      	ldrh	r1, [r3, #2]
      pSrc[2 * i + 1] = (pSrc[2 * l + 1] + pSrc[2 * i + 1]);
 8000c2e:	1988      	adds	r0, r1, r6
 8000c30:	8058      	strh	r0, [r3, #2]
      xt = pSrc[2 * i] - pSrc[2 * l];
 8000c32:	9803      	ldr	r0, [sp, #12]
      yt = pSrc[2 * i + 1] - pSrc[2 * l + 1];
 8000c34:	1b89      	subs	r1, r1, r6
      xt = pSrc[2 * i] - pSrc[2 * l];
 8000c36:	1bc0      	subs	r0, r0, r7

      pSrc[2u * l] = xt;
 8000c38:	5358      	strh	r0, [r3, r5]

      pSrc[2u * l + 1u] = yt;
 8000c3a:	4660      	mov	r0, ip
 8000c3c:	8041      	strh	r1, [r0, #2]
    for (i = j; i < fftLen; i += n1)
 8000c3e:	9900      	ldr	r1, [sp, #0]
 8000c40:	1864      	adds	r4, r4, r1
 8000c42:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000c44:	185b      	adds	r3, r3, r1
 8000c46:	9901      	ldr	r1, [sp, #4]
 8000c48:	42a1      	cmp	r1, r4
 8000c4a:	d8e7      	bhi.n	8000c1c <arm_radix2_butterfly_q15+0x180>
  for (j = 0; j < n2; j++)
 8000c4c:	3201      	adds	r2, #1
 8000c4e:	e7dd      	b.n	8000c0c <arm_radix2_butterfly_q15+0x170>

  }                             // groups loop end

  twidCoefModifier = twidCoefModifier << 1u;

}
 8000c50:	b00d      	add	sp, #52	; 0x34
 8000c52:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000c54 <ZeroFFT>:
	uint16_t bitRevFactor;
	uint16_t *pBitRevTable;

	q15_t *pSrc = source;

	switch (length)
 8000c54:	2380      	movs	r3, #128	; 0x80
{
 8000c56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	switch (length)
 8000c58:	005b      	lsls	r3, r3, #1
{
 8000c5a:	0005      	movs	r5, r0
 8000c5c:	000c      	movs	r4, r1
	switch (length)
 8000c5e:	4299      	cmp	r1, r3
 8000c60:	d028      	beq.n	8000cb4 <ZeroFFT+0x60>
 8000c62:	18db      	adds	r3, r3, r3
 8000c64:	4299      	cmp	r1, r3
 8000c66:	d146      	bne.n	8000cf6 <ZeroFFT+0xa2>
	while(len--){
 8000c68:	2180      	movs	r1, #128	; 0x80
	switch (length)
 8000c6a:	2300      	movs	r3, #0
		int32_t val = *src * *window++;
 8000c6c:	4e23      	ldr	r6, [pc, #140]	; (8000cfc <ZeroFFT+0xa8>)
	while(len--){
 8000c6e:	00c9      	lsls	r1, r1, #3
		int32_t val = *src * *window++;
 8000c70:	5ee8      	ldrsh	r0, [r5, r3]
 8000c72:	5ef2      	ldrsh	r2, [r6, r3]
 8000c74:	4342      	muls	r2, r0
		*src++ = val >> 15;
 8000c76:	13d2      	asrs	r2, r2, #15
 8000c78:	52ea      	strh	r2, [r5, r3]
 8000c7a:	3302      	adds	r3, #2
	while(len--){
 8000c7c:	428b      	cmp	r3, r1
 8000c7e:	d1f7      	bne.n	8000c70 <ZeroFFT+0x1c>
//#endif
//
#if ZERO_FFT_MAX >= 1024
	  case 512u:
	    /*  Initializations of structure parameters for 512 point FFT */
	    twidCoefModifier = 8u;
 8000c80:	2708      	movs	r7, #8
	    bitRevFactor = 8u;
	    pBitRevTable = (uint16_t *) & armBitRevTable[7];
 8000c82:	4b1f      	ldr	r3, [pc, #124]	; (8000d00 <ZeroFFT+0xac>)
 8000c84:	9301      	str	r3, [sp, #4]
	    break;
	  }

	//split the data
	q15_t *pOut = scratchData;
	for(int i=0; i<length; i++){
 8000c86:	2300      	movs	r3, #0
		*pOut++ = *pSrc++; //real
		*pOut++ = 0; //imaginary
 8000c88:	0019      	movs	r1, r3
 8000c8a:	4e1e      	ldr	r6, [pc, #120]	; (8000d04 <ZeroFFT+0xb0>)
	for(int i=0; i<length; i++){
 8000c8c:	429c      	cmp	r4, r3
 8000c8e:	dc21      	bgt.n	8000cd4 <ZeroFFT+0x80>
	}

	arm_radix2_butterfly_q15(scratchData, length, (q15_t *)twiddleCoefQ15, twidCoefModifier);
 8000c90:	003b      	movs	r3, r7
 8000c92:	4a1d      	ldr	r2, [pc, #116]	; (8000d08 <ZeroFFT+0xb4>)
 8000c94:	0021      	movs	r1, r4
 8000c96:	0030      	movs	r0, r6
 8000c98:	f7ff ff00 	bl	8000a9c <arm_radix2_butterfly_q15>
	arm_bitreversal_q15(scratchData, length, bitRevFactor, pBitRevTable);
 8000c9c:	9b01      	ldr	r3, [sp, #4]
 8000c9e:	0021      	movs	r1, r4
 8000ca0:	003a      	movs	r2, r7
 8000ca2:	0030      	movs	r0, r6
 8000ca4:	f7ff febf 	bl	8000a26 <arm_bitreversal_q15>

	pSrc = source;
	pOut = scratchData;
	for(int i=0; i<length; i++){
 8000ca8:	2300      	movs	r3, #0
		  q15_t val = *pOut++;
 8000caa:	4916      	ldr	r1, [pc, #88]	; (8000d04 <ZeroFFT+0xb0>)
	for(int i=0; i<length; i++){
 8000cac:	429c      	cmp	r4, r3
 8000cae:	dc19      	bgt.n	8000ce4 <ZeroFFT+0x90>
		  uint32_t v = abs(val);
		  *pSrc++ = v;
		  pOut++; //discard imaginary phase val
	  }

	return 0;
 8000cb0:	2000      	movs	r0, #0
}
 8000cb2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	while(len--){
 8000cb4:	2180      	movs	r1, #128	; 0x80
	switch (length)
 8000cb6:	2300      	movs	r3, #0
		int32_t val = *src * *window++;
 8000cb8:	4e14      	ldr	r6, [pc, #80]	; (8000d0c <ZeroFFT+0xb8>)
	while(len--){
 8000cba:	0089      	lsls	r1, r1, #2
		int32_t val = *src * *window++;
 8000cbc:	5ee8      	ldrsh	r0, [r5, r3]
 8000cbe:	5ef2      	ldrsh	r2, [r6, r3]
 8000cc0:	4342      	muls	r2, r0
		*src++ = val >> 15;
 8000cc2:	13d2      	asrs	r2, r2, #15
 8000cc4:	52ea      	strh	r2, [r5, r3]
 8000cc6:	3302      	adds	r3, #2
	while(len--){
 8000cc8:	428b      	cmp	r3, r1
 8000cca:	d1f7      	bne.n	8000cbc <ZeroFFT+0x68>
	    pBitRevTable = (uint16_t *) & armBitRevTable[15];
 8000ccc:	4b10      	ldr	r3, [pc, #64]	; (8000d10 <ZeroFFT+0xbc>)
	    twidCoefModifier = 16u;
 8000cce:	2710      	movs	r7, #16
	    pBitRevTable = (uint16_t *) & armBitRevTable[15];
 8000cd0:	9301      	str	r3, [sp, #4]
 8000cd2:	e7d8      	b.n	8000c86 <ZeroFFT+0x32>
		*pOut++ = *pSrc++; //real
 8000cd4:	005a      	lsls	r2, r3, #1
 8000cd6:	5ea8      	ldrsh	r0, [r5, r2]
 8000cd8:	009a      	lsls	r2, r3, #2
 8000cda:	18b2      	adds	r2, r6, r2
 8000cdc:	8010      	strh	r0, [r2, #0]
		*pOut++ = 0; //imaginary
 8000cde:	8051      	strh	r1, [r2, #2]
	for(int i=0; i<length; i++){
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	e7d3      	b.n	8000c8c <ZeroFFT+0x38>
		  q15_t val = *pOut++;
 8000ce4:	009a      	lsls	r2, r3, #2
		  uint32_t v = abs(val);
 8000ce6:	5e8a      	ldrsh	r2, [r1, r2]
		  *pSrc++ = v;
 8000ce8:	0058      	lsls	r0, r3, #1
		  uint32_t v = abs(val);
 8000cea:	17d6      	asrs	r6, r2, #31
 8000cec:	1992      	adds	r2, r2, r6
 8000cee:	4072      	eors	r2, r6
		  *pSrc++ = v;
 8000cf0:	522a      	strh	r2, [r5, r0]
	for(int i=0; i<length; i++){
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	e7da      	b.n	8000cac <ZeroFFT+0x58>
		return -1;
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	4240      	negs	r0, r0
 8000cfa:	e7da      	b.n	8000cb2 <ZeroFFT+0x5e>
 8000cfc:	08005cfc 	.word	0x08005cfc
 8000d00:	0800230a 	.word	0x0800230a
 8000d04:	20000028 	.word	0x20000028
 8000d08:	08002afc 	.word	0x08002afc
 8000d0c:	08005afc 	.word	0x08005afc
 8000d10:	0800231a 	.word	0x0800231a

08000d14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d14:	b570      	push	{r4, r5, r6, lr}
 8000d16:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d18:	20fa      	movs	r0, #250	; 0xfa
 8000d1a:	4b0d      	ldr	r3, [pc, #52]	; (8000d50 <HAL_InitTick+0x3c>)
 8000d1c:	0080      	lsls	r0, r0, #2
 8000d1e:	7819      	ldrb	r1, [r3, #0]
 8000d20:	f7ff fa06 	bl	8000130 <__udivsi3>
 8000d24:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <HAL_InitTick+0x40>)
 8000d26:	0001      	movs	r1, r0
 8000d28:	6818      	ldr	r0, [r3, #0]
 8000d2a:	f7ff fa01 	bl	8000130 <__udivsi3>
 8000d2e:	f000 fac9 	bl	80012c4 <HAL_SYSTICK_Config>
 8000d32:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8000d34:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d36:	2c00      	cmp	r4, #0
 8000d38:	d109      	bne.n	8000d4e <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d3a:	2d03      	cmp	r5, #3
 8000d3c:	d807      	bhi.n	8000d4e <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d3e:	3802      	subs	r0, #2
 8000d40:	0022      	movs	r2, r4
 8000d42:	0029      	movs	r1, r5
 8000d44:	f000 fa88 	bl	8001258 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d48:	0020      	movs	r0, r4
 8000d4a:	4b03      	ldr	r3, [pc, #12]	; (8000d58 <HAL_InitTick+0x44>)
 8000d4c:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 8000d4e:	bd70      	pop	{r4, r5, r6, pc}
 8000d50:	20000004 	.word	0x20000004
 8000d54:	20000000 	.word	0x20000000
 8000d58:	20000008 	.word	0x20000008

08000d5c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d5c:	2310      	movs	r3, #16
 8000d5e:	4a06      	ldr	r2, [pc, #24]	; (8000d78 <HAL_Init+0x1c>)
{
 8000d60:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d62:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d64:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d66:	430b      	orrs	r3, r1
 8000d68:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d6a:	f7ff ffd3 	bl	8000d14 <HAL_InitTick>
  HAL_MspInit();
 8000d6e:	f7ff fd39 	bl	80007e4 <HAL_MspInit>
}
 8000d72:	2000      	movs	r0, #0
 8000d74:	bd10      	pop	{r4, pc}
 8000d76:	46c0      	nop			; (mov r8, r8)
 8000d78:	40022000 	.word	0x40022000

08000d7c <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000d7c:	4a03      	ldr	r2, [pc, #12]	; (8000d8c <HAL_IncTick+0x10>)
 8000d7e:	4b04      	ldr	r3, [pc, #16]	; (8000d90 <HAL_IncTick+0x14>)
 8000d80:	6811      	ldr	r1, [r2, #0]
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	185b      	adds	r3, r3, r1
 8000d86:	6013      	str	r3, [r2, #0]
}
 8000d88:	4770      	bx	lr
 8000d8a:	46c0      	nop			; (mov r8, r8)
 8000d8c:	20000d94 	.word	0x20000d94
 8000d90:	20000004 	.word	0x20000004

08000d94 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000d94:	4b01      	ldr	r3, [pc, #4]	; (8000d9c <HAL_GetTick+0x8>)
 8000d96:	6818      	ldr	r0, [r3, #0]
}
 8000d98:	4770      	bx	lr
 8000d9a:	46c0      	nop			; (mov r8, r8)
 8000d9c:	20000d94 	.word	0x20000d94

08000da0 <ADC_Enable>:
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8000da0:	2300      	movs	r3, #0
{
 8000da2:	b573      	push	{r0, r1, r4, r5, r6, lr}
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000da4:	2103      	movs	r1, #3
  __IO uint32_t wait_loop_index = 0U;
 8000da6:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000da8:	6803      	ldr	r3, [r0, #0]
{
 8000daa:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000dac:	689a      	ldr	r2, [r3, #8]
 8000dae:	400a      	ands	r2, r1
 8000db0:	2a01      	cmp	r2, #1
 8000db2:	d107      	bne.n	8000dc4 <ADC_Enable+0x24>
 8000db4:	6819      	ldr	r1, [r3, #0]
 8000db6:	4211      	tst	r1, r2
 8000db8:	d001      	beq.n	8000dbe <ADC_Enable+0x1e>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000dba:	2000      	movs	r0, #0
}
 8000dbc:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000dbe:	68da      	ldr	r2, [r3, #12]
 8000dc0:	0412      	lsls	r2, r2, #16
 8000dc2:	d4fa      	bmi.n	8000dba <ADC_Enable+0x1a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000dc4:	6899      	ldr	r1, [r3, #8]
 8000dc6:	4a19      	ldr	r2, [pc, #100]	; (8000e2c <ADC_Enable+0x8c>)
 8000dc8:	4211      	tst	r1, r2
 8000dca:	d008      	beq.n	8000dde <ADC_Enable+0x3e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000dcc:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dce:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000dd0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dd6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000dd8:	4303      	orrs	r3, r0
 8000dda:	63e3      	str	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8000ddc:	e7ee      	b.n	8000dbc <ADC_Enable+0x1c>
    __HAL_ADC_ENABLE(hadc);
 8000dde:	2201      	movs	r2, #1
 8000de0:	6899      	ldr	r1, [r3, #8]
 8000de2:	430a      	orrs	r2, r1
 8000de4:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000de6:	4b12      	ldr	r3, [pc, #72]	; (8000e30 <ADC_Enable+0x90>)
 8000de8:	4912      	ldr	r1, [pc, #72]	; (8000e34 <ADC_Enable+0x94>)
 8000dea:	6818      	ldr	r0, [r3, #0]
 8000dec:	f7ff f9a0 	bl	8000130 <__udivsi3>
 8000df0:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 8000df2:	9b01      	ldr	r3, [sp, #4]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d115      	bne.n	8000e24 <ADC_Enable+0x84>
    tickstart = HAL_GetTick();
 8000df8:	f7ff ffcc 	bl	8000d94 <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000dfc:	2501      	movs	r5, #1
    tickstart = HAL_GetTick();
 8000dfe:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000e00:	6823      	ldr	r3, [r4, #0]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	422b      	tst	r3, r5
 8000e06:	d1d8      	bne.n	8000dba <ADC_Enable+0x1a>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000e08:	f7ff ffc4 	bl	8000d94 <HAL_GetTick>
 8000e0c:	1b80      	subs	r0, r0, r6
 8000e0e:	2802      	cmp	r0, #2
 8000e10:	d9f6      	bls.n	8000e00 <ADC_Enable+0x60>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e12:	2310      	movs	r3, #16
 8000e14:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        return HAL_ERROR;
 8000e16:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	63a3      	str	r3, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e1c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000e1e:	432b      	orrs	r3, r5
 8000e20:	63e3      	str	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8000e22:	e7cb      	b.n	8000dbc <ADC_Enable+0x1c>
      wait_loop_index--;
 8000e24:	9b01      	ldr	r3, [sp, #4]
 8000e26:	3b01      	subs	r3, #1
 8000e28:	9301      	str	r3, [sp, #4]
 8000e2a:	e7e2      	b.n	8000df2 <ADC_Enable+0x52>
 8000e2c:	80000017 	.word	0x80000017
 8000e30:	20000000 	.word	0x20000000
 8000e34:	000f4240 	.word	0x000f4240

08000e38 <HAL_ADC_Init>:
{
 8000e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e3a:	0004      	movs	r4, r0
    return HAL_ERROR;
 8000e3c:	2001      	movs	r0, #1
  if(hadc == NULL)
 8000e3e:	2c00      	cmp	r4, #0
 8000e40:	d07e      	beq.n	8000f40 <HAL_ADC_Init+0x108>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e42:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d106      	bne.n	8000e56 <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 8000e48:	0022      	movs	r2, r4
 8000e4a:	3234      	adds	r2, #52	; 0x34
    ADC_CLEAR_ERRORCODE(hadc);
 8000e4c:	63e3      	str	r3, [r4, #60]	; 0x3c
    HAL_ADC_MspInit(hadc);
 8000e4e:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 8000e50:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 8000e52:	f7ff fce5 	bl	8000820 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e56:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000e58:	06db      	lsls	r3, r3, #27
 8000e5a:	d500      	bpl.n	8000e5e <HAL_ADC_Init+0x26>
 8000e5c:	e085      	b.n	8000f6a <HAL_ADC_Init+0x132>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000e5e:	2204      	movs	r2, #4
 8000e60:	6823      	ldr	r3, [r4, #0]
 8000e62:	6898      	ldr	r0, [r3, #8]
 8000e64:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000e66:	d000      	beq.n	8000e6a <HAL_ADC_Init+0x32>
 8000e68:	e07f      	b.n	8000f6a <HAL_ADC_Init+0x132>
    ADC_STATE_CLR_SET(hadc->State,
 8000e6a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000e6c:	4942      	ldr	r1, [pc, #264]	; (8000f78 <HAL_ADC_Init+0x140>)
 8000e6e:	4011      	ands	r1, r2
 8000e70:	2202      	movs	r2, #2
 8000e72:	430a      	orrs	r2, r1
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000e74:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State,
 8000e76:	63a2      	str	r2, [r4, #56]	; 0x38
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000e78:	689a      	ldr	r2, [r3, #8]
 8000e7a:	400a      	ands	r2, r1
 8000e7c:	2a01      	cmp	r2, #1
 8000e7e:	d105      	bne.n	8000e8c <HAL_ADC_Init+0x54>
 8000e80:	6819      	ldr	r1, [r3, #0]
 8000e82:	4211      	tst	r1, r2
 8000e84:	d10e      	bne.n	8000ea4 <HAL_ADC_Init+0x6c>
 8000e86:	68da      	ldr	r2, [r3, #12]
 8000e88:	0412      	lsls	r2, r2, #16
 8000e8a:	d40b      	bmi.n	8000ea4 <HAL_ADC_Init+0x6c>
      MODIFY_REG(hadc->Instance->CFGR1,
 8000e8c:	2118      	movs	r1, #24
 8000e8e:	68da      	ldr	r2, [r3, #12]
 8000e90:	438a      	bics	r2, r1
 8000e92:	68a1      	ldr	r1, [r4, #8]
 8000e94:	430a      	orrs	r2, r1
 8000e96:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000e98:	6919      	ldr	r1, [r3, #16]
 8000e9a:	6862      	ldr	r2, [r4, #4]
 8000e9c:	0089      	lsls	r1, r1, #2
 8000e9e:	0889      	lsrs	r1, r1, #2
 8000ea0:	4311      	orrs	r1, r2
 8000ea2:	6119      	str	r1, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000ea4:	68da      	ldr	r2, [r3, #12]
 8000ea6:	4935      	ldr	r1, [pc, #212]	; (8000f7c <HAL_ADC_Init+0x144>)
 8000ea8:	400a      	ands	r2, r1
 8000eaa:	60da      	str	r2, [r3, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000eac:	7e25      	ldrb	r5, [r4, #24]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000eae:	7e62      	ldrb	r2, [r4, #25]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000eb0:	03ad      	lsls	r5, r5, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000eb2:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000eb4:	4315      	orrs	r5, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000eb6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000eb8:	7ea1      	ldrb	r1, [r4, #26]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000eba:	3a01      	subs	r2, #1
 8000ebc:	1e56      	subs	r6, r2, #1
 8000ebe:	41b2      	sbcs	r2, r6
 8000ec0:	0316      	lsls	r6, r2, #12
 8000ec2:	68e2      	ldr	r2, [r4, #12]
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000ec4:	034f      	lsls	r7, r1, #13
 8000ec6:	4315      	orrs	r5, r2
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000ec8:	6922      	ldr	r2, [r4, #16]
 8000eca:	432f      	orrs	r7, r5
 8000ecc:	2a02      	cmp	r2, #2
 8000ece:	d100      	bne.n	8000ed2 <HAL_ADC_Init+0x9a>
 8000ed0:	2004      	movs	r0, #4
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000ed2:	1d62      	adds	r2, r4, #5
 8000ed4:	7fd2      	ldrb	r2, [r2, #31]
 8000ed6:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000ed8:	433a      	orrs	r2, r7
 8000eda:	4332      	orrs	r2, r6
 8000edc:	4302      	orrs	r2, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ede:	7ee0      	ldrb	r0, [r4, #27]
 8000ee0:	2801      	cmp	r0, #1
 8000ee2:	d104      	bne.n	8000eee <HAL_ADC_Init+0xb6>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000ee4:	2900      	cmp	r1, #0
 8000ee6:	d12c      	bne.n	8000f42 <HAL_ADC_Init+0x10a>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000ee8:	2180      	movs	r1, #128	; 0x80
 8000eea:	0249      	lsls	r1, r1, #9
 8000eec:	430a      	orrs	r2, r1
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000eee:	20c2      	movs	r0, #194	; 0xc2
 8000ef0:	69e1      	ldr	r1, [r4, #28]
 8000ef2:	30ff      	adds	r0, #255	; 0xff
 8000ef4:	4281      	cmp	r1, r0
 8000ef6:	d002      	beq.n	8000efe <HAL_ADC_Init+0xc6>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000ef8:	6a20      	ldr	r0, [r4, #32]
 8000efa:	4301      	orrs	r1, r0
 8000efc:	430a      	orrs	r2, r1
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000efe:	2080      	movs	r0, #128	; 0x80
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000f00:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000f02:	0540      	lsls	r0, r0, #21
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000f04:	4311      	orrs	r1, r2
 8000f06:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000f08:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000f0a:	4281      	cmp	r1, r0
 8000f0c:	d002      	beq.n	8000f14 <HAL_ADC_Init+0xdc>
 8000f0e:	1e48      	subs	r0, r1, #1
 8000f10:	2806      	cmp	r0, #6
 8000f12:	d807      	bhi.n	8000f24 <HAL_ADC_Init+0xec>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000f14:	2507      	movs	r5, #7
 8000f16:	6958      	ldr	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000f18:	4029      	ands	r1, r5
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000f1a:	43a8      	bics	r0, r5
 8000f1c:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000f1e:	6958      	ldr	r0, [r3, #20]
 8000f20:	4301      	orrs	r1, r0
 8000f22:	6159      	str	r1, [r3, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000f24:	68db      	ldr	r3, [r3, #12]
 8000f26:	4916      	ldr	r1, [pc, #88]	; (8000f80 <HAL_ADC_Init+0x148>)
 8000f28:	400b      	ands	r3, r1
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d111      	bne.n	8000f52 <HAL_ADC_Init+0x11a>
      ADC_CLEAR_ERRORCODE(hadc);
 8000f2e:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8000f30:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 8000f32:	63e0      	str	r0, [r4, #60]	; 0x3c
      ADC_STATE_CLR_SET(hadc->State,
 8000f34:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000f36:	4393      	bics	r3, r2
 8000f38:	001a      	movs	r2, r3
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8000f40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f42:	2120      	movs	r1, #32
 8000f44:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8000f46:	4329      	orrs	r1, r5
 8000f48:	63a1      	str	r1, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f4a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8000f4c:	4308      	orrs	r0, r1
 8000f4e:	63e0      	str	r0, [r4, #60]	; 0x3c
 8000f50:	e7cd      	b.n	8000eee <HAL_ADC_Init+0xb6>
      ADC_STATE_CLR_SET(hadc->State,
 8000f52:	2212      	movs	r2, #18
 8000f54:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f56:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8000f58:	4393      	bics	r3, r2
 8000f5a:	001a      	movs	r2, r3
 8000f5c:	2310      	movs	r3, #16
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f62:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000f64:	4303      	orrs	r3, r0
 8000f66:	63e3      	str	r3, [r4, #60]	; 0x3c
 8000f68:	e7ea      	b.n	8000f40 <HAL_ADC_Init+0x108>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f6a:	2310      	movs	r3, #16
 8000f6c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 8000f6e:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f70:	4313      	orrs	r3, r2
 8000f72:	63a3      	str	r3, [r4, #56]	; 0x38
 8000f74:	e7e4      	b.n	8000f40 <HAL_ADC_Init+0x108>
 8000f76:	46c0      	nop			; (mov r8, r8)
 8000f78:	fffffefd 	.word	0xfffffefd
 8000f7c:	fffe0219 	.word	0xfffe0219
 8000f80:	833fffe7 	.word	0x833fffe7

08000f84 <HAL_ADC_Start_DMA>:
{
 8000f84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000f86:	6803      	ldr	r3, [r0, #0]
{
 8000f88:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000f8a:	689b      	ldr	r3, [r3, #8]
{
 8000f8c:	000f      	movs	r7, r1
 8000f8e:	9201      	str	r2, [sp, #4]
    tmp_hal_status = HAL_BUSY;
 8000f90:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000f92:	075b      	lsls	r3, r3, #29
 8000f94:	d430      	bmi.n	8000ff8 <HAL_ADC_Start_DMA+0x74>
    __HAL_LOCK(hadc);
 8000f96:	0026      	movs	r6, r4
 8000f98:	3634      	adds	r6, #52	; 0x34
 8000f9a:	7833      	ldrb	r3, [r6, #0]
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d02b      	beq.n	8000ff8 <HAL_ADC_Start_DMA+0x74>
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	7033      	strb	r3, [r6, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000fa4:	7e63      	ldrb	r3, [r4, #25]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d127      	bne.n	8000ffa <HAL_ADC_Start_DMA+0x76>
      ADC_STATE_CLR_SET(hadc->State,
 8000faa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000fac:	4a16      	ldr	r2, [pc, #88]	; (8001008 <HAL_ADC_Start_DMA+0x84>)
      ADC_CLEAR_ERRORCODE(hadc);
 8000fae:	2500      	movs	r5, #0
      ADC_STATE_CLR_SET(hadc->State,
 8000fb0:	401a      	ands	r2, r3
 8000fb2:	2380      	movs	r3, #128	; 0x80
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	63a3      	str	r3, [r4, #56]	; 0x38
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000fba:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8000fbc:	4b13      	ldr	r3, [pc, #76]	; (800100c <HAL_ADC_Start_DMA+0x88>)
      ADC_CLEAR_ERRORCODE(hadc);
 8000fbe:	63e5      	str	r5, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hadc);
 8000fc0:	7035      	strb	r5, [r6, #0]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000fc2:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000fc4:	4b12      	ldr	r3, [pc, #72]	; (8001010 <HAL_ADC_Start_DMA+0x8c>)
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000fc6:	6821      	ldr	r1, [r4, #0]
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000fc8:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000fca:	4b12      	ldr	r3, [pc, #72]	; (8001014 <HAL_ADC_Start_DMA+0x90>)
 8000fcc:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000fce:	231c      	movs	r3, #28
 8000fd0:	600b      	str	r3, [r1, #0]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000fd2:	684a      	ldr	r2, [r1, #4]
 8000fd4:	3b0c      	subs	r3, #12
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	604b      	str	r3, [r1, #4]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	68ca      	ldr	r2, [r1, #12]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	60cb      	str	r3, [r1, #12]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000fe2:	003a      	movs	r2, r7
 8000fe4:	3140      	adds	r1, #64	; 0x40
 8000fe6:	9b01      	ldr	r3, [sp, #4]
 8000fe8:	f000 f9b8 	bl	800135c <HAL_DMA_Start_IT>
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000fec:	2304      	movs	r3, #4
 8000fee:	0028      	movs	r0, r5
 8000ff0:	6822      	ldr	r2, [r4, #0]
 8000ff2:	6891      	ldr	r1, [r2, #8]
 8000ff4:	430b      	orrs	r3, r1
 8000ff6:	6093      	str	r3, [r2, #8]
}
 8000ff8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8000ffa:	0020      	movs	r0, r4
 8000ffc:	f7ff fed0 	bl	8000da0 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8001000:	2800      	cmp	r0, #0
 8001002:	d0d2      	beq.n	8000faa <HAL_ADC_Start_DMA+0x26>
 8001004:	e7f8      	b.n	8000ff8 <HAL_ADC_Start_DMA+0x74>
 8001006:	46c0      	nop			; (mov r8, r8)
 8001008:	fffff0fe 	.word	0xfffff0fe
 800100c:	08001019 	.word	0x08001019
 8001010:	0800108b 	.word	0x0800108b
 8001014:	08001097 	.word	0x08001097

08001018 <ADC_DMAConvCplt>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001018:	2250      	movs	r2, #80	; 0x50
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800101a:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 800101c:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800101e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001020:	4211      	tst	r1, r2
 8001022:	d12a      	bne.n	800107a <ADC_DMAConvCplt+0x62>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001024:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001026:	32b1      	adds	r2, #177	; 0xb1
 8001028:	32ff      	adds	r2, #255	; 0xff
 800102a:	430a      	orrs	r2, r1
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800102c:	21c0      	movs	r1, #192	; 0xc0
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800102e:	639a      	str	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	0109      	lsls	r1, r1, #4
 8001034:	68d0      	ldr	r0, [r2, #12]
 8001036:	4208      	tst	r0, r1
 8001038:	d112      	bne.n	8001060 <ADC_DMAConvCplt+0x48>
 800103a:	7e99      	ldrb	r1, [r3, #26]
 800103c:	2900      	cmp	r1, #0
 800103e:	d10f      	bne.n	8001060 <ADC_DMAConvCplt+0x48>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001040:	6811      	ldr	r1, [r2, #0]
 8001042:	0709      	lsls	r1, r1, #28
 8001044:	d50c      	bpl.n	8001060 <ADC_DMAConvCplt+0x48>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001046:	6891      	ldr	r1, [r2, #8]
 8001048:	0749      	lsls	r1, r1, #29
 800104a:	d40d      	bmi.n	8001068 <ADC_DMAConvCplt+0x50>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800104c:	200c      	movs	r0, #12
 800104e:	6851      	ldr	r1, [r2, #4]
 8001050:	4381      	bics	r1, r0
 8001052:	6051      	str	r1, [r2, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001054:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001056:	490b      	ldr	r1, [pc, #44]	; (8001084 <ADC_DMAConvCplt+0x6c>)
 8001058:	4011      	ands	r1, r2
 800105a:	2201      	movs	r2, #1
 800105c:	430a      	orrs	r2, r1
 800105e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001060:	0018      	movs	r0, r3
 8001062:	f7ff fb77 	bl	8000754 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8001066:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001068:	2220      	movs	r2, #32
 800106a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800106c:	430a      	orrs	r2, r1
 800106e:	639a      	str	r2, [r3, #56]	; 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001070:	2201      	movs	r2, #1
 8001072:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001074:	430a      	orrs	r2, r1
 8001076:	63da      	str	r2, [r3, #60]	; 0x3c
 8001078:	e7f2      	b.n	8001060 <ADC_DMAConvCplt+0x48>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800107a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	4798      	blx	r3
}
 8001080:	e7f1      	b.n	8001066 <ADC_DMAConvCplt+0x4e>
 8001082:	46c0      	nop			; (mov r8, r8)
 8001084:	fffffefe 	.word	0xfffffefe

08001088 <HAL_ADC_ConvHalfCpltCallback>:
 8001088:	4770      	bx	lr

0800108a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800108a:	b510      	push	{r4, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 800108c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800108e:	f7ff fffb 	bl	8001088 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001092:	bd10      	pop	{r4, pc}

08001094 <HAL_ADC_ErrorCallback>:
 8001094:	4770      	bx	lr

08001096 <ADC_DMAError>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001096:	2340      	movs	r3, #64	; 0x40
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001098:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 800109a:	b510      	push	{r4, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800109c:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800109e:	4313      	orrs	r3, r2
 80010a0:	6383      	str	r3, [r0, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80010a2:	2304      	movs	r3, #4
 80010a4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80010a6:	4313      	orrs	r3, r2
 80010a8:	63c3      	str	r3, [r0, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 80010aa:	f7ff fff3 	bl	8001094 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80010ae:	bd10      	pop	{r4, pc}

080010b0 <HAL_ADC_ConfigChannel>:
{
 80010b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0U;
 80010b2:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 80010b4:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0U;
 80010b6:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80010b8:	3434      	adds	r4, #52	; 0x34
 80010ba:	7822      	ldrb	r2, [r4, #0]
{
 80010bc:	0003      	movs	r3, r0
  __HAL_LOCK(hadc);
 80010be:	2002      	movs	r0, #2
 80010c0:	2a01      	cmp	r2, #1
 80010c2:	d02b      	beq.n	800111c <HAL_ADC_ConfigChannel+0x6c>
 80010c4:	2201      	movs	r2, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80010c6:	681d      	ldr	r5, [r3, #0]
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80010c8:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80010ca:	68a8      	ldr	r0, [r5, #8]
  __HAL_LOCK(hadc);
 80010cc:	7022      	strb	r2, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80010ce:	0740      	lsls	r0, r0, #29
 80010d0:	d45a      	bmi.n	8001188 <HAL_ADC_ConfigChannel+0xd8>
 80010d2:	680b      	ldr	r3, [r1, #0]
    if (sConfig->Rank != ADC_RANK_NONE)
 80010d4:	482f      	ldr	r0, [pc, #188]	; (8001194 <HAL_ADC_ConfigChannel+0xe4>)
 80010d6:	001f      	movs	r7, r3
 80010d8:	4684      	mov	ip, r0
 80010da:	6848      	ldr	r0, [r1, #4]
 80010dc:	409a      	lsls	r2, r3
 80010de:	3f10      	subs	r7, #16
 80010e0:	4560      	cmp	r0, ip
 80010e2:	d03b      	beq.n	800115c <HAL_ADC_ConfigChannel+0xac>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80010e4:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 80010e6:	4310      	orrs	r0, r2
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80010e8:	2280      	movs	r2, #128	; 0x80
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80010ea:	62a8      	str	r0, [r5, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80010ec:	0552      	lsls	r2, r2, #21
 80010ee:	4296      	cmp	r6, r2
 80010f0:	d00f      	beq.n	8001112 <HAL_ADC_ConfigChannel+0x62>
 80010f2:	3e01      	subs	r6, #1
 80010f4:	2e06      	cmp	r6, #6
 80010f6:	d90c      	bls.n	8001112 <HAL_ADC_ConfigChannel+0x62>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80010f8:	688a      	ldr	r2, [r1, #8]
 80010fa:	2107      	movs	r1, #7
 80010fc:	6968      	ldr	r0, [r5, #20]
 80010fe:	4008      	ands	r0, r1
 8001100:	4282      	cmp	r2, r0
 8001102:	d006      	beq.n	8001112 <HAL_ADC_ConfigChannel+0x62>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001104:	6968      	ldr	r0, [r5, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001106:	400a      	ands	r2, r1
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001108:	4388      	bics	r0, r1
 800110a:	6168      	str	r0, [r5, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800110c:	6968      	ldr	r0, [r5, #20]
 800110e:	4302      	orrs	r2, r0
 8001110:	616a      	str	r2, [r5, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001112:	2f02      	cmp	r7, #2
 8001114:	d903      	bls.n	800111e <HAL_ADC_ConfigChannel+0x6e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001116:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8001118:	2300      	movs	r3, #0
 800111a:	7023      	strb	r3, [r4, #0]
}
 800111c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800111e:	4a1e      	ldr	r2, [pc, #120]	; (8001198 <HAL_ADC_ConfigChannel+0xe8>)
 8001120:	2080      	movs	r0, #128	; 0x80
 8001122:	6811      	ldr	r1, [r2, #0]
 8001124:	2b10      	cmp	r3, #16
 8001126:	d015      	beq.n	8001154 <HAL_ADC_ConfigChannel+0xa4>
 8001128:	2b11      	cmp	r3, #17
 800112a:	d115      	bne.n	8001158 <HAL_ADC_ConfigChannel+0xa8>
 800112c:	03c0      	lsls	r0, r0, #15
 800112e:	4301      	orrs	r1, r0
 8001130:	6011      	str	r1, [r2, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001132:	2b10      	cmp	r3, #16
 8001134:	d1ef      	bne.n	8001116 <HAL_ADC_ConfigChannel+0x66>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001136:	4b19      	ldr	r3, [pc, #100]	; (800119c <HAL_ADC_ConfigChannel+0xec>)
 8001138:	4919      	ldr	r1, [pc, #100]	; (80011a0 <HAL_ADC_ConfigChannel+0xf0>)
 800113a:	6818      	ldr	r0, [r3, #0]
 800113c:	f7fe fff8 	bl	8000130 <__udivsi3>
 8001140:	230a      	movs	r3, #10
 8001142:	4358      	muls	r0, r3
 8001144:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0U)
 8001146:	9b01      	ldr	r3, [sp, #4]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d0e4      	beq.n	8001116 <HAL_ADC_ConfigChannel+0x66>
            wait_loop_index--;
 800114c:	9b01      	ldr	r3, [sp, #4]
 800114e:	3b01      	subs	r3, #1
 8001150:	9301      	str	r3, [sp, #4]
 8001152:	e7f8      	b.n	8001146 <HAL_ADC_ConfigChannel+0x96>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001154:	0400      	lsls	r0, r0, #16
 8001156:	e7ea      	b.n	800112e <HAL_ADC_ConfigChannel+0x7e>
 8001158:	0440      	lsls	r0, r0, #17
 800115a:	e7e8      	b.n	800112e <HAL_ADC_ConfigChannel+0x7e>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800115c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800115e:	4391      	bics	r1, r2
 8001160:	62a9      	str	r1, [r5, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001162:	2f02      	cmp	r7, #2
 8001164:	d8d7      	bhi.n	8001116 <HAL_ADC_ConfigChannel+0x66>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001166:	4a0c      	ldr	r2, [pc, #48]	; (8001198 <HAL_ADC_ConfigChannel+0xe8>)
 8001168:	6811      	ldr	r1, [r2, #0]
 800116a:	2b10      	cmp	r3, #16
 800116c:	d00a      	beq.n	8001184 <HAL_ADC_ConfigChannel+0xd4>
 800116e:	3b11      	subs	r3, #17
 8001170:	1e58      	subs	r0, r3, #1
 8001172:	4183      	sbcs	r3, r0
 8001174:	480b      	ldr	r0, [pc, #44]	; (80011a4 <HAL_ADC_ConfigChannel+0xf4>)
 8001176:	425b      	negs	r3, r3
 8001178:	4003      	ands	r3, r0
 800117a:	480b      	ldr	r0, [pc, #44]	; (80011a8 <HAL_ADC_ConfigChannel+0xf8>)
 800117c:	181b      	adds	r3, r3, r0
 800117e:	400b      	ands	r3, r1
 8001180:	6013      	str	r3, [r2, #0]
 8001182:	e7c8      	b.n	8001116 <HAL_ADC_ConfigChannel+0x66>
 8001184:	4b09      	ldr	r3, [pc, #36]	; (80011ac <HAL_ADC_ConfigChannel+0xfc>)
 8001186:	e7fa      	b.n	800117e <HAL_ADC_ConfigChannel+0xce>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001188:	2120      	movs	r1, #32
 800118a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800118c:	4301      	orrs	r1, r0
 800118e:	6399      	str	r1, [r3, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 8001190:	0010      	movs	r0, r2
 8001192:	e7c1      	b.n	8001118 <HAL_ADC_ConfigChannel+0x68>
 8001194:	00001001 	.word	0x00001001
 8001198:	40012708 	.word	0x40012708
 800119c:	20000000 	.word	0x20000000
 80011a0:	000f4240 	.word	0x000f4240
 80011a4:	ff400000 	.word	0xff400000
 80011a8:	ffbfffff 	.word	0xffbfffff
 80011ac:	ff7fffff 	.word	0xff7fffff

080011b0 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80011b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80011b2:	0006      	movs	r6, r0
 80011b4:	3634      	adds	r6, #52	; 0x34
 80011b6:	7833      	ldrb	r3, [r6, #0]
{
 80011b8:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 80011ba:	2002      	movs	r0, #2
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d042      	beq.n	8001246 <HAL_ADCEx_Calibration_Start+0x96>
 80011c0:	2301      	movs	r3, #1
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80011c2:	2103      	movs	r1, #3
  __HAL_LOCK(hadc);
 80011c4:	7033      	strb	r3, [r6, #0]
  if (ADC_IS_ENABLE(hadc) == RESET)
 80011c6:	6823      	ldr	r3, [r4, #0]
 80011c8:	689a      	ldr	r2, [r3, #8]
 80011ca:	400a      	ands	r2, r1
 80011cc:	2a01      	cmp	r2, #1
 80011ce:	d105      	bne.n	80011dc <HAL_ADCEx_Calibration_Start+0x2c>
 80011d0:	6819      	ldr	r1, [r3, #0]
 80011d2:	4211      	tst	r1, r2
 80011d4:	d138      	bne.n	8001248 <HAL_ADCEx_Calibration_Start+0x98>
 80011d6:	68da      	ldr	r2, [r3, #12]
 80011d8:	0412      	lsls	r2, r2, #16
 80011da:	d435      	bmi.n	8001248 <HAL_ADCEx_Calibration_Start+0x98>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 80011dc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80011de:	491d      	ldr	r1, [pc, #116]	; (8001254 <HAL_ADCEx_Calibration_Start+0xa4>)
 80011e0:	4011      	ands	r1, r2
 80011e2:	2202      	movs	r2, #2
 80011e4:	430a      	orrs	r2, r1
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80011e6:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State, 
 80011e8:	63a2      	str	r2, [r4, #56]	; 0x38
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80011ea:	68dd      	ldr	r5, [r3, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80011ec:	68da      	ldr	r2, [r3, #12]
 80011ee:	438a      	bics	r2, r1
 80011f0:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80011f2:	2280      	movs	r2, #128	; 0x80
 80011f4:	6899      	ldr	r1, [r3, #8]
 80011f6:	0612      	lsls	r2, r2, #24
 80011f8:	430a      	orrs	r2, r1
 80011fa:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 80011fc:	f7ff fdca 	bl	8000d94 <HAL_GetTick>
 8001200:	0007      	movs	r7, r0

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001202:	6823      	ldr	r3, [r4, #0]
 8001204:	689a      	ldr	r2, [r3, #8]
 8001206:	2a00      	cmp	r2, #0
 8001208:	db0e      	blt.n	8001228 <HAL_ADCEx_Calibration_Start+0x78>
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800120a:	2203      	movs	r2, #3
        return HAL_ERROR;
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 800120c:	68d9      	ldr	r1, [r3, #12]
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800120e:	4015      	ands	r5, r2
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8001210:	430d      	orrs	r5, r1
 8001212:	60dd      	str	r5, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001214:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001216:	2000      	movs	r0, #0
    ADC_STATE_CLR_SET(hadc->State,
 8001218:	4393      	bics	r3, r2
 800121a:	001a      	movs	r2, r3
 800121c:	2301      	movs	r3, #1
 800121e:	4313      	orrs	r3, r2
 8001220:	63a3      	str	r3, [r4, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001222:	2300      	movs	r3, #0
 8001224:	7033      	strb	r3, [r6, #0]
  
  /* Return function status */
  return tmp_hal_status;
 8001226:	e00e      	b.n	8001246 <HAL_ADCEx_Calibration_Start+0x96>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001228:	f7ff fdb4 	bl	8000d94 <HAL_GetTick>
 800122c:	1bc0      	subs	r0, r0, r7
 800122e:	2802      	cmp	r0, #2
 8001230:	d9e7      	bls.n	8001202 <HAL_ADCEx_Calibration_Start+0x52>
        ADC_STATE_CLR_SET(hadc->State,
 8001232:	2212      	movs	r2, #18
 8001234:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        return HAL_ERROR;
 8001236:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 8001238:	4393      	bics	r3, r2
 800123a:	001a      	movs	r2, r3
 800123c:	2310      	movs	r3, #16
 800123e:	4313      	orrs	r3, r2
 8001240:	63a3      	str	r3, [r4, #56]	; 0x38
        __HAL_UNLOCK(hadc);
 8001242:	2300      	movs	r3, #0
 8001244:	7033      	strb	r3, [r6, #0]
}
 8001246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001248:	2320      	movs	r3, #32
 800124a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 800124c:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800124e:	4313      	orrs	r3, r2
 8001250:	63a3      	str	r3, [r4, #56]	; 0x38
 8001252:	e7e6      	b.n	8001222 <HAL_ADCEx_Calibration_Start+0x72>
 8001254:	fffffefd 	.word	0xfffffefd

08001258 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001258:	b530      	push	{r4, r5, lr}
 800125a:	25ff      	movs	r5, #255	; 0xff
 800125c:	2403      	movs	r4, #3
 800125e:	002a      	movs	r2, r5
 8001260:	b2c3      	uxtb	r3, r0
 8001262:	401c      	ands	r4, r3
 8001264:	00e4      	lsls	r4, r4, #3
 8001266:	40a2      	lsls	r2, r4
 8001268:	0189      	lsls	r1, r1, #6
 800126a:	4029      	ands	r1, r5
 800126c:	43d2      	mvns	r2, r2
 800126e:	40a1      	lsls	r1, r4
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8001270:	2800      	cmp	r0, #0
 8001272:	db0a      	blt.n	800128a <HAL_NVIC_SetPriority+0x32>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001274:	24c0      	movs	r4, #192	; 0xc0
 8001276:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <HAL_NVIC_SetPriority+0x4c>)
 8001278:	0880      	lsrs	r0, r0, #2
 800127a:	0080      	lsls	r0, r0, #2
 800127c:	18c0      	adds	r0, r0, r3
 800127e:	00a4      	lsls	r4, r4, #2
 8001280:	5903      	ldr	r3, [r0, r4]
 8001282:	401a      	ands	r2, r3
 8001284:	4311      	orrs	r1, r2
 8001286:	5101      	str	r1, [r0, r4]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8001288:	bd30      	pop	{r4, r5, pc}
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800128a:	200f      	movs	r0, #15
 800128c:	4003      	ands	r3, r0
 800128e:	3b08      	subs	r3, #8
 8001290:	4805      	ldr	r0, [pc, #20]	; (80012a8 <HAL_NVIC_SetPriority+0x50>)
 8001292:	089b      	lsrs	r3, r3, #2
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	181b      	adds	r3, r3, r0
 8001298:	69d8      	ldr	r0, [r3, #28]
 800129a:	4002      	ands	r2, r0
 800129c:	4311      	orrs	r1, r2
 800129e:	61d9      	str	r1, [r3, #28]
 80012a0:	e7f2      	b.n	8001288 <HAL_NVIC_SetPriority+0x30>
 80012a2:	46c0      	nop			; (mov r8, r8)
 80012a4:	e000e100 	.word	0xe000e100
 80012a8:	e000ed00 	.word	0xe000ed00

080012ac <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80012ac:	2800      	cmp	r0, #0
 80012ae:	db05      	blt.n	80012bc <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012b0:	231f      	movs	r3, #31
 80012b2:	4018      	ands	r0, r3
 80012b4:	3b1e      	subs	r3, #30
 80012b6:	4083      	lsls	r3, r0
 80012b8:	4a01      	ldr	r2, [pc, #4]	; (80012c0 <HAL_NVIC_EnableIRQ+0x14>)
 80012ba:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80012bc:	4770      	bx	lr
 80012be:	46c0      	nop			; (mov r8, r8)
 80012c0:	e000e100 	.word	0xe000e100

080012c4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012c4:	4a09      	ldr	r2, [pc, #36]	; (80012ec <HAL_SYSTICK_Config+0x28>)
 80012c6:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 80012c8:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d80d      	bhi.n	80012ea <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012ce:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012d0:	4a07      	ldr	r2, [pc, #28]	; (80012f0 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012d2:	4808      	ldr	r0, [pc, #32]	; (80012f4 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012d4:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012d6:	6a03      	ldr	r3, [r0, #32]
 80012d8:	0609      	lsls	r1, r1, #24
 80012da:	021b      	lsls	r3, r3, #8
 80012dc:	0a1b      	lsrs	r3, r3, #8
 80012de:	430b      	orrs	r3, r1
 80012e0:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012e2:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012e4:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012e6:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012e8:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80012ea:	4770      	bx	lr
 80012ec:	00ffffff 	.word	0x00ffffff
 80012f0:	e000e010 	.word	0xe000e010
 80012f4:	e000ed00 	.word	0xe000ed00

080012f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80012f8:	b570      	push	{r4, r5, r6, lr}
 80012fa:	0004      	movs	r4, r0
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
  {
    return HAL_ERROR;
 80012fc:	2501      	movs	r5, #1
  if(NULL == hdma)
 80012fe:	2800      	cmp	r0, #0
 8001300:	d024      	beq.n	800134c <HAL_DMA_Init+0x54>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001302:	2302      	movs	r3, #2
 8001304:	1c86      	adds	r6, r0, #2

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001306:	6800      	ldr	r0, [r0, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8001308:	77f3      	strb	r3, [r6, #31]
  tmp = hdma->Instance->CCR;
 800130a:	6802      	ldr	r2, [r0, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800130c:	4b10      	ldr	r3, [pc, #64]	; (8001350 <HAL_DMA_Init+0x58>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800130e:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001310:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8001312:	6863      	ldr	r3, [r4, #4]
 8001314:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001316:	68e1      	ldr	r1, [r4, #12]
 8001318:	430b      	orrs	r3, r1
 800131a:	6921      	ldr	r1, [r4, #16]
 800131c:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800131e:	6961      	ldr	r1, [r4, #20]
 8001320:	430b      	orrs	r3, r1
 8001322:	69a1      	ldr	r1, [r4, #24]
 8001324:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8001326:	69e1      	ldr	r1, [r4, #28]
 8001328:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 800132a:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800132c:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800132e:	4b09      	ldr	r3, [pc, #36]	; (8001354 <HAL_DMA_Init+0x5c>)
 8001330:	2114      	movs	r1, #20
 8001332:	18c0      	adds	r0, r0, r3
 8001334:	f7fe fefc 	bl	8000130 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8001338:	4b07      	ldr	r3, [pc, #28]	; (8001358 <HAL_DMA_Init+0x60>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800133a:	0080      	lsls	r0, r0, #2
  hdma->DmaBaseAddress = DMA1;
 800133c:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800133e:	2300      	movs	r3, #0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001340:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001342:	63a3      	str	r3, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8001344:	77f5      	strb	r5, [r6, #31]
  hdma->Lock = HAL_UNLOCKED;
 8001346:	1964      	adds	r4, r4, r5
  return HAL_OK;
 8001348:	001d      	movs	r5, r3
  hdma->Lock = HAL_UNLOCKED;
 800134a:	77e3      	strb	r3, [r4, #31]
}  
 800134c:	0028      	movs	r0, r5
 800134e:	bd70      	pop	{r4, r5, r6, pc}
 8001350:	ffffc00f 	.word	0xffffc00f
 8001354:	bffdfff8 	.word	0xbffdfff8
 8001358:	40020000 	.word	0x40020000

0800135c <HAL_DMA_Start_IT>:
{
 800135c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 800135e:	1c44      	adds	r4, r0, #1
 8001360:	7fe6      	ldrb	r6, [r4, #31]
{
 8001362:	0005      	movs	r5, r0
  __HAL_LOCK(hdma);
 8001364:	2002      	movs	r0, #2
 8001366:	2e01      	cmp	r6, #1
 8001368:	d027      	beq.n	80013ba <HAL_DMA_Start_IT+0x5e>
 800136a:	3801      	subs	r0, #1
 800136c:	77e0      	strb	r0, [r4, #31]
  if(HAL_DMA_STATE_READY == hdma->State)
 800136e:	1ca8      	adds	r0, r5, #2
 8001370:	7fc6      	ldrb	r6, [r0, #31]
 8001372:	4684      	mov	ip, r0
 8001374:	b2f6      	uxtb	r6, r6
 8001376:	2002      	movs	r0, #2
 8001378:	2700      	movs	r7, #0
 800137a:	2e01      	cmp	r6, #1
 800137c:	d128      	bne.n	80013d0 <HAL_DMA_Start_IT+0x74>
  	hdma->State = HAL_DMA_STATE_BUSY;
 800137e:	4664      	mov	r4, ip
 8001380:	77e0      	strb	r0, [r4, #31]
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001382:	682c      	ldr	r4, [r5, #0]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001384:	63af      	str	r7, [r5, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001386:	6820      	ldr	r0, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001388:	6c2f      	ldr	r7, [r5, #64]	; 0x40
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800138a:	43b0      	bics	r0, r6
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800138c:	40be      	lsls	r6, r7
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800138e:	6020      	str	r0, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001390:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8001392:	6046      	str	r6, [r0, #4]
  hdma->Instance->CNDTR = DataLength;
 8001394:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001396:	686b      	ldr	r3, [r5, #4]
 8001398:	6828      	ldr	r0, [r5, #0]
 800139a:	2b10      	cmp	r3, #16
 800139c:	d10e      	bne.n	80013bc <HAL_DMA_Start_IT+0x60>
    hdma->Instance->CPAR = DstAddress;
 800139e:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80013a0:	60e1      	str	r1, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 80013a2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80013a4:	6822      	ldr	r2, [r4, #0]
    if(NULL != hdma->XferHalfCpltCallback )
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d00b      	beq.n	80013c2 <HAL_DMA_Start_IT+0x66>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80013aa:	230e      	movs	r3, #14
 80013ac:	4313      	orrs	r3, r2
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80013ae:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80013b0:	2301      	movs	r3, #1
 80013b2:	6802      	ldr	r2, [r0, #0]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	6003      	str	r3, [r0, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80013b8:	2000      	movs	r0, #0
} 
 80013ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = SrcAddress;
 80013bc:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 80013be:	60e2      	str	r2, [r4, #12]
 80013c0:	e7ef      	b.n	80013a2 <HAL_DMA_Start_IT+0x46>
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80013c2:	230a      	movs	r3, #10
 80013c4:	4313      	orrs	r3, r2
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80013c6:	2204      	movs	r2, #4
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80013c8:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80013ca:	6823      	ldr	r3, [r4, #0]
 80013cc:	4393      	bics	r3, r2
 80013ce:	e7ee      	b.n	80013ae <HAL_DMA_Start_IT+0x52>
    __HAL_UNLOCK(hdma); 
 80013d0:	77e7      	strb	r7, [r4, #31]
 80013d2:	e7f2      	b.n	80013ba <HAL_DMA_Start_IT+0x5e>

080013d4 <HAL_DMA_IRQHandler>:
{
 80013d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80013d6:	2704      	movs	r7, #4
 80013d8:	003e      	movs	r6, r7
 80013da:	6c01      	ldr	r1, [r0, #64]	; 0x40
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80013dc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80013de:	408e      	lsls	r6, r1
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80013e0:	6815      	ldr	r5, [r2, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80013e2:	6803      	ldr	r3, [r0, #0]
 80013e4:	681c      	ldr	r4, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80013e6:	4235      	tst	r5, r6
 80013e8:	d00d      	beq.n	8001406 <HAL_DMA_IRQHandler+0x32>
 80013ea:	423c      	tst	r4, r7
 80013ec:	d00b      	beq.n	8001406 <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80013ee:	6819      	ldr	r1, [r3, #0]
 80013f0:	0689      	lsls	r1, r1, #26
 80013f2:	d402      	bmi.n	80013fa <HAL_DMA_IRQHandler+0x26>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80013f4:	6819      	ldr	r1, [r3, #0]
 80013f6:	43b9      	bics	r1, r7
 80013f8:	6019      	str	r1, [r3, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 80013fa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80013fc:	6056      	str	r6, [r2, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d019      	beq.n	8001436 <HAL_DMA_IRQHandler+0x62>
    	hdma->XferErrorCallback(hdma);
 8001402:	4798      	blx	r3
}  
 8001404:	e017      	b.n	8001436 <HAL_DMA_IRQHandler+0x62>
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001406:	2702      	movs	r7, #2
 8001408:	003e      	movs	r6, r7
 800140a:	408e      	lsls	r6, r1
 800140c:	4235      	tst	r5, r6
 800140e:	d013      	beq.n	8001438 <HAL_DMA_IRQHandler+0x64>
 8001410:	423c      	tst	r4, r7
 8001412:	d011      	beq.n	8001438 <HAL_DMA_IRQHandler+0x64>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001414:	6819      	ldr	r1, [r3, #0]
 8001416:	0689      	lsls	r1, r1, #26
 8001418:	d406      	bmi.n	8001428 <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800141a:	240a      	movs	r4, #10
 800141c:	6819      	ldr	r1, [r3, #0]
 800141e:	43a1      	bics	r1, r4
 8001420:	6019      	str	r1, [r3, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8001422:	2101      	movs	r1, #1
 8001424:	19c3      	adds	r3, r0, r7
 8001426:	77d9      	strb	r1, [r3, #31]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001428:	6056      	str	r6, [r2, #4]
  	__HAL_UNLOCK(hdma);
 800142a:	2200      	movs	r2, #0
 800142c:	1c43      	adds	r3, r0, #1
 800142e:	77da      	strb	r2, [r3, #31]
  	if(hdma->XferCpltCallback != NULL)
 8001430:	6a83      	ldr	r3, [r0, #40]	; 0x28
    if(hdma->XferErrorCallback != NULL)
 8001432:	4293      	cmp	r3, r2
 8001434:	d1e5      	bne.n	8001402 <HAL_DMA_IRQHandler+0x2e>
}  
 8001436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001438:	2608      	movs	r6, #8
 800143a:	0037      	movs	r7, r6
 800143c:	408f      	lsls	r7, r1
 800143e:	423d      	tst	r5, r7
 8001440:	d0f9      	beq.n	8001436 <HAL_DMA_IRQHandler+0x62>
 8001442:	4234      	tst	r4, r6
 8001444:	d0f7      	beq.n	8001436 <HAL_DMA_IRQHandler+0x62>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001446:	250e      	movs	r5, #14
 8001448:	681c      	ldr	r4, [r3, #0]
 800144a:	43ac      	bics	r4, r5
 800144c:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800144e:	2301      	movs	r3, #1
 8001450:	001c      	movs	r4, r3
 8001452:	408c      	lsls	r4, r1
 8001454:	6054      	str	r4, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;    
 8001456:	1c82      	adds	r2, r0, #2
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001458:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 800145a:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma); 
 800145c:	2200      	movs	r2, #0
 800145e:	18c3      	adds	r3, r0, r3
 8001460:	77da      	strb	r2, [r3, #31]
    if(hdma->XferErrorCallback != NULL)
 8001462:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001464:	e7e5      	b.n	8001432 <HAL_DMA_IRQHandler+0x5e>
	...

08001468 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001468:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800146a:	680b      	ldr	r3, [r1, #0]
{ 
 800146c:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800146e:	9303      	str	r3, [sp, #12]
  uint32_t position = 0x00u;
 8001470:	2300      	movs	r3, #0
{ 
 8001472:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001474:	9a03      	ldr	r2, [sp, #12]
 8001476:	40da      	lsrs	r2, r3
 8001478:	d101      	bne.n	800147e <HAL_GPIO_Init+0x16>
      }
    }

    position++;
  } 
}
 800147a:	b007      	add	sp, #28
 800147c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800147e:	2201      	movs	r2, #1
 8001480:	409a      	lsls	r2, r3
 8001482:	9202      	str	r2, [sp, #8]
 8001484:	9902      	ldr	r1, [sp, #8]
 8001486:	9a03      	ldr	r2, [sp, #12]
 8001488:	400a      	ands	r2, r1
 800148a:	9200      	str	r2, [sp, #0]
    if (iocurrent != 0x00u)
 800148c:	d100      	bne.n	8001490 <HAL_GPIO_Init+0x28>
 800148e:	e088      	b.n	80015a2 <HAL_GPIO_Init+0x13a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001490:	9a01      	ldr	r2, [sp, #4]
 8001492:	2110      	movs	r1, #16
 8001494:	6852      	ldr	r2, [r2, #4]
 8001496:	0016      	movs	r6, r2
 8001498:	438e      	bics	r6, r1
 800149a:	2e02      	cmp	r6, #2
 800149c:	d10e      	bne.n	80014bc <HAL_GPIO_Init+0x54>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800149e:	2507      	movs	r5, #7
 80014a0:	401d      	ands	r5, r3
 80014a2:	00ad      	lsls	r5, r5, #2
 80014a4:	3901      	subs	r1, #1
 80014a6:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3u];
 80014a8:	08dc      	lsrs	r4, r3, #3
 80014aa:	00a4      	lsls	r4, r4, #2
 80014ac:	1904      	adds	r4, r0, r4
 80014ae:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014b0:	438f      	bics	r7, r1
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014b2:	9901      	ldr	r1, [sp, #4]
 80014b4:	6909      	ldr	r1, [r1, #16]
 80014b6:	40a9      	lsls	r1, r5
 80014b8:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3u] = temp;
 80014ba:	6227      	str	r7, [r4, #32]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80014bc:	2403      	movs	r4, #3
 80014be:	005f      	lsls	r7, r3, #1
 80014c0:	40bc      	lsls	r4, r7
 80014c2:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 80014c4:	6805      	ldr	r5, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014c6:	3e01      	subs	r6, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80014c8:	4025      	ands	r5, r4
 80014ca:	46ac      	mov	ip, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014cc:	2503      	movs	r5, #3
 80014ce:	4015      	ands	r5, r2
 80014d0:	40bd      	lsls	r5, r7
 80014d2:	4661      	mov	r1, ip
 80014d4:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 80014d6:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014d8:	2e01      	cmp	r6, #1
 80014da:	d80f      	bhi.n	80014fc <HAL_GPIO_Init+0x94>
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014dc:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR;
 80014de:	6886      	ldr	r6, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014e0:	68cd      	ldr	r5, [r1, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80014e2:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014e4:	40bd      	lsls	r5, r7
 80014e6:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 80014e8:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 80014ea:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014ec:	9902      	ldr	r1, [sp, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80014ee:	0915      	lsrs	r5, r2, #4
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014f0:	438e      	bics	r6, r1
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80014f2:	2101      	movs	r1, #1
 80014f4:	400d      	ands	r5, r1
 80014f6:	409d      	lsls	r5, r3
 80014f8:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 80014fa:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 80014fc:	68c5      	ldr	r5, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80014fe:	9901      	ldr	r1, [sp, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001500:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001502:	688d      	ldr	r5, [r1, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001504:	2180      	movs	r1, #128	; 0x80
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001506:	40bd      	lsls	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001508:	0549      	lsls	r1, r1, #21
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800150a:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 800150c:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800150e:	420a      	tst	r2, r1
 8001510:	d047      	beq.n	80015a2 <HAL_GPIO_Init+0x13a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001512:	2101      	movs	r1, #1
 8001514:	4c24      	ldr	r4, [pc, #144]	; (80015a8 <HAL_GPIO_Init+0x140>)
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001516:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001518:	69a5      	ldr	r5, [r4, #24]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800151a:	401e      	ands	r6, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800151c:	430d      	orrs	r5, r1
 800151e:	61a5      	str	r5, [r4, #24]
 8001520:	69a4      	ldr	r4, [r4, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001522:	089d      	lsrs	r5, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001524:	400c      	ands	r4, r1
 8001526:	9405      	str	r4, [sp, #20]
 8001528:	9c05      	ldr	r4, [sp, #20]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800152a:	240f      	movs	r4, #15
 800152c:	491f      	ldr	r1, [pc, #124]	; (80015ac <HAL_GPIO_Init+0x144>)
 800152e:	00ad      	lsls	r5, r5, #2
 8001530:	00b6      	lsls	r6, r6, #2
 8001532:	186d      	adds	r5, r5, r1
 8001534:	40b4      	lsls	r4, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001536:	2190      	movs	r1, #144	; 0x90
        temp = SYSCFG->EXTICR[position >> 2u];
 8001538:	68af      	ldr	r7, [r5, #8]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800153a:	05c9      	lsls	r1, r1, #23
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800153c:	43a7      	bics	r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800153e:	2400      	movs	r4, #0
 8001540:	4288      	cmp	r0, r1
 8001542:	d008      	beq.n	8001556 <HAL_GPIO_Init+0xee>
 8001544:	491a      	ldr	r1, [pc, #104]	; (80015b0 <HAL_GPIO_Init+0x148>)
 8001546:	3401      	adds	r4, #1
 8001548:	4288      	cmp	r0, r1
 800154a:	d004      	beq.n	8001556 <HAL_GPIO_Init+0xee>
 800154c:	4919      	ldr	r1, [pc, #100]	; (80015b4 <HAL_GPIO_Init+0x14c>)
 800154e:	3404      	adds	r4, #4
 8001550:	4288      	cmp	r0, r1
 8001552:	d100      	bne.n	8001556 <HAL_GPIO_Init+0xee>
 8001554:	3c03      	subs	r4, #3
 8001556:	40b4      	lsls	r4, r6
        temp &= ~(iocurrent);
 8001558:	9900      	ldr	r1, [sp, #0]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800155a:	433c      	orrs	r4, r7
          temp |= iocurrent;
 800155c:	000e      	movs	r6, r1
        SYSCFG->EXTICR[position >> 2u] = temp;
 800155e:	60ac      	str	r4, [r5, #8]
        temp = EXTI->IMR;
 8001560:	4c15      	ldr	r4, [pc, #84]	; (80015b8 <HAL_GPIO_Init+0x150>)
        temp &= ~(iocurrent);
 8001562:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 8001564:	6827      	ldr	r7, [r4, #0]
          temp |= iocurrent;
 8001566:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001568:	03d1      	lsls	r1, r2, #15
 800156a:	d401      	bmi.n	8001570 <HAL_GPIO_Init+0x108>
        temp &= ~(iocurrent);
 800156c:	003e      	movs	r6, r7
 800156e:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 8001570:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 8001572:	6867      	ldr	r7, [r4, #4]
          temp |= iocurrent;
 8001574:	9e00      	ldr	r6, [sp, #0]
 8001576:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001578:	0391      	lsls	r1, r2, #14
 800157a:	d401      	bmi.n	8001580 <HAL_GPIO_Init+0x118>
        temp &= ~(iocurrent);
 800157c:	003e      	movs	r6, r7
 800157e:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 8001580:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 8001582:	68a7      	ldr	r7, [r4, #8]
          temp |= iocurrent;
 8001584:	9e00      	ldr	r6, [sp, #0]
 8001586:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001588:	02d1      	lsls	r1, r2, #11
 800158a:	d401      	bmi.n	8001590 <HAL_GPIO_Init+0x128>
        temp &= ~(iocurrent);
 800158c:	003e      	movs	r6, r7
 800158e:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 8001590:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 8001592:	68e6      	ldr	r6, [r4, #12]
          temp |= iocurrent;
 8001594:	9f00      	ldr	r7, [sp, #0]
 8001596:	4337      	orrs	r7, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001598:	0292      	lsls	r2, r2, #10
 800159a:	d401      	bmi.n	80015a0 <HAL_GPIO_Init+0x138>
        temp &= ~(iocurrent);
 800159c:	402e      	ands	r6, r5
 800159e:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 80015a0:	60e7      	str	r7, [r4, #12]
    position++;
 80015a2:	3301      	adds	r3, #1
 80015a4:	e766      	b.n	8001474 <HAL_GPIO_Init+0xc>
 80015a6:	46c0      	nop			; (mov r8, r8)
 80015a8:	40021000 	.word	0x40021000
 80015ac:	40010000 	.word	0x40010000
 80015b0:	48000400 	.word	0x48000400
 80015b4:	48000800 	.word	0x48000800
 80015b8:	40010400 	.word	0x40010400

080015bc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015bc:	2a00      	cmp	r2, #0
 80015be:	d001      	beq.n	80015c4 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015c0:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015c2:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015c4:	6281      	str	r1, [r0, #40]	; 0x28
}
 80015c6:	e7fc      	b.n	80015c2 <HAL_GPIO_WritePin+0x6>

080015c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015c8:	b570      	push	{r4, r5, r6, lr}
 80015ca:	0004      	movs	r4, r0
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
  {
    return HAL_ERROR;
 80015cc:	2001      	movs	r0, #1
  if (hi2c == NULL)
 80015ce:	2c00      	cmp	r4, #0
 80015d0:	d03f      	beq.n	8001652 <HAL_I2C_Init+0x8a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015d2:	0025      	movs	r5, r4
 80015d4:	3541      	adds	r5, #65	; 0x41
 80015d6:	782b      	ldrb	r3, [r5, #0]
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d105      	bne.n	80015ea <HAL_I2C_Init+0x22>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015de:	0022      	movs	r2, r4
 80015e0:	3240      	adds	r2, #64	; 0x40
 80015e2:	7013      	strb	r3, [r2, #0]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80015e4:	0020      	movs	r0, r4
 80015e6:	f7ff f967 	bl	80008b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015ea:	2324      	movs	r3, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015ec:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 80015ee:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 80015f0:	6823      	ldr	r3, [r4, #0]
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80015f2:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	68a6      	ldr	r6, [r4, #8]
 80015f8:	438a      	bics	r2, r1
 80015fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80015fc:	6861      	ldr	r1, [r4, #4]
 80015fe:	4a1a      	ldr	r2, [pc, #104]	; (8001668 <HAL_I2C_Init+0xa0>)
 8001600:	400a      	ands	r2, r1
 8001602:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001604:	6899      	ldr	r1, [r3, #8]
 8001606:	4a19      	ldr	r2, [pc, #100]	; (800166c <HAL_I2C_Init+0xa4>)
 8001608:	4011      	ands	r1, r2
 800160a:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800160c:	2801      	cmp	r0, #1
 800160e:	d121      	bne.n	8001654 <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001610:	2180      	movs	r1, #128	; 0x80
 8001612:	0209      	lsls	r1, r1, #8
 8001614:	4331      	orrs	r1, r6
 8001616:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001618:	6858      	ldr	r0, [r3, #4]
 800161a:	4915      	ldr	r1, [pc, #84]	; (8001670 <HAL_I2C_Init+0xa8>)
 800161c:	4301      	orrs	r1, r0
 800161e:	6059      	str	r1, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001620:	68d9      	ldr	r1, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001622:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001624:	400a      	ands	r2, r1
 8001626:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001628:	6961      	ldr	r1, [r4, #20]
 800162a:	6922      	ldr	r2, [r4, #16]
 800162c:	430a      	orrs	r2, r1
 800162e:	69a1      	ldr	r1, [r4, #24]
 8001630:	0209      	lsls	r1, r1, #8
 8001632:	430a      	orrs	r2, r1
 8001634:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001636:	6a21      	ldr	r1, [r4, #32]
 8001638:	69e2      	ldr	r2, [r4, #28]
 800163a:	430a      	orrs	r2, r1
 800163c:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800163e:	2201      	movs	r2, #1
 8001640:	6819      	ldr	r1, [r3, #0]
 8001642:	430a      	orrs	r2, r1
 8001644:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8001646:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001648:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800164a:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 800164c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800164e:	3442      	adds	r4, #66	; 0x42
 8001650:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8001652:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001654:	2184      	movs	r1, #132	; 0x84
 8001656:	0209      	lsls	r1, r1, #8
 8001658:	4331      	orrs	r1, r6
 800165a:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800165c:	2802      	cmp	r0, #2
 800165e:	d1db      	bne.n	8001618 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001660:	2180      	movs	r1, #128	; 0x80
 8001662:	0109      	lsls	r1, r1, #4
 8001664:	6059      	str	r1, [r3, #4]
 8001666:	e7d7      	b.n	8001618 <HAL_I2C_Init+0x50>
 8001668:	f0ffffff 	.word	0xf0ffffff
 800166c:	ffff7fff 	.word	0xffff7fff
 8001670:	02008000 	.word	0x02008000

08001674 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001674:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001676:	0004      	movs	r4, r0
 8001678:	3441      	adds	r4, #65	; 0x41
 800167a:	7822      	ldrb	r2, [r4, #0]
{
 800167c:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800167e:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001680:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001682:	2a20      	cmp	r2, #32
 8001684:	d118      	bne.n	80016b8 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_LOCK(hi2c);
 8001686:	001d      	movs	r5, r3
 8001688:	3540      	adds	r5, #64	; 0x40
 800168a:	782e      	ldrb	r6, [r5, #0]
 800168c:	2e01      	cmp	r6, #1
 800168e:	d013      	beq.n	80016b8 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_I2C_DISABLE(hi2c);
 8001690:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001692:	3022      	adds	r0, #34	; 0x22
 8001694:	7020      	strb	r0, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 8001696:	681e      	ldr	r6, [r3, #0]
 8001698:	3823      	subs	r0, #35	; 0x23
 800169a:	4386      	bics	r6, r0
 800169c:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800169e:	681e      	ldr	r6, [r3, #0]
 80016a0:	4f06      	ldr	r7, [pc, #24]	; (80016bc <HAL_I2CEx_ConfigAnalogFilter+0x48>)
 80016a2:	403e      	ands	r6, r7
 80016a4:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 80016a6:	681e      	ldr	r6, [r3, #0]
 80016a8:	4331      	orrs	r1, r6
 80016aa:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 80016ac:	6819      	ldr	r1, [r3, #0]
 80016ae:	4308      	orrs	r0, r1
 80016b0:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 80016b2:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80016b4:	7022      	strb	r2, [r4, #0]
    __HAL_UNLOCK(hi2c);
 80016b6:	7028      	strb	r0, [r5, #0]
  }
}
 80016b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016ba:	46c0      	nop			; (mov r8, r8)
 80016bc:	ffffefff 	.word	0xffffefff

080016c0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80016c0:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016c2:	0005      	movs	r5, r0
 80016c4:	3541      	adds	r5, #65	; 0x41
 80016c6:	782a      	ldrb	r2, [r5, #0]
{
 80016c8:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80016ca:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80016cc:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80016ce:	2a20      	cmp	r2, #32
 80016d0:	d117      	bne.n	8001702 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 80016d2:	001c      	movs	r4, r3
 80016d4:	3440      	adds	r4, #64	; 0x40
 80016d6:	7826      	ldrb	r6, [r4, #0]
 80016d8:	2e01      	cmp	r6, #1
 80016da:	d012      	beq.n	8001702 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_I2C_DISABLE(hi2c);
 80016dc:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80016de:	3022      	adds	r0, #34	; 0x22
 80016e0:	7028      	strb	r0, [r5, #0]
    __HAL_I2C_DISABLE(hi2c);
 80016e2:	681e      	ldr	r6, [r3, #0]
 80016e4:	3823      	subs	r0, #35	; 0x23
 80016e6:	4386      	bics	r6, r0
 80016e8:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 80016ea:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 80016ec:	4f05      	ldr	r7, [pc, #20]	; (8001704 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    tmpreg |= DigitalFilter << 8U;
 80016ee:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 80016f0:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 80016f2:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 80016f4:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 80016f6:	6819      	ldr	r1, [r3, #0]
 80016f8:	4308      	orrs	r0, r1
 80016fa:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 80016fc:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80016fe:	702a      	strb	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8001700:	7020      	strb	r0, [r4, #0]
  }
}
 8001702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001704:	fffff0ff 	.word	0xfffff0ff

08001708 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800170a:	0004      	movs	r4, r0
 800170c:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800170e:	2800      	cmp	r0, #0
 8001710:	d102      	bne.n	8001718 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8001712:	2001      	movs	r0, #1
      }
    }
  }

  return HAL_OK;
}
 8001714:	b005      	add	sp, #20
 8001716:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001718:	6803      	ldr	r3, [r0, #0]
 800171a:	07db      	lsls	r3, r3, #31
 800171c:	d433      	bmi.n	8001786 <HAL_RCC_OscConfig+0x7e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800171e:	6823      	ldr	r3, [r4, #0]
 8001720:	079b      	lsls	r3, r3, #30
 8001722:	d500      	bpl.n	8001726 <HAL_RCC_OscConfig+0x1e>
 8001724:	e087      	b.n	8001836 <HAL_RCC_OscConfig+0x12e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001726:	6823      	ldr	r3, [r4, #0]
 8001728:	071b      	lsls	r3, r3, #28
 800172a:	d500      	bpl.n	800172e <HAL_RCC_OscConfig+0x26>
 800172c:	e0c8      	b.n	80018c0 <HAL_RCC_OscConfig+0x1b8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800172e:	6823      	ldr	r3, [r4, #0]
 8001730:	075b      	lsls	r3, r3, #29
 8001732:	d500      	bpl.n	8001736 <HAL_RCC_OscConfig+0x2e>
 8001734:	e0eb      	b.n	800190e <HAL_RCC_OscConfig+0x206>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001736:	6823      	ldr	r3, [r4, #0]
 8001738:	06db      	lsls	r3, r3, #27
 800173a:	d51a      	bpl.n	8001772 <HAL_RCC_OscConfig+0x6a>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800173c:	6962      	ldr	r2, [r4, #20]
 800173e:	4dbc      	ldr	r5, [pc, #752]	; (8001a30 <HAL_RCC_OscConfig+0x328>)
 8001740:	2304      	movs	r3, #4
 8001742:	2a01      	cmp	r2, #1
 8001744:	d000      	beq.n	8001748 <HAL_RCC_OscConfig+0x40>
 8001746:	e157      	b.n	80019f8 <HAL_RCC_OscConfig+0x2f0>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001748:	6b69      	ldr	r1, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800174a:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 800174c:	430b      	orrs	r3, r1
 800174e:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8001750:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001752:	431a      	orrs	r2, r3
 8001754:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001756:	f7ff fb1d 	bl	8000d94 <HAL_GetTick>
 800175a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800175c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800175e:	4233      	tst	r3, r6
 8001760:	d100      	bne.n	8001764 <HAL_RCC_OscConfig+0x5c>
 8001762:	e142      	b.n	80019ea <HAL_RCC_OscConfig+0x2e2>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001764:	21f8      	movs	r1, #248	; 0xf8
 8001766:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001768:	69a3      	ldr	r3, [r4, #24]
 800176a:	438a      	bics	r2, r1
 800176c:	00db      	lsls	r3, r3, #3
 800176e:	4313      	orrs	r3, r2
 8001770:	636b      	str	r3, [r5, #52]	; 0x34
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001772:	6823      	ldr	r3, [r4, #0]
 8001774:	069b      	lsls	r3, r3, #26
 8001776:	d500      	bpl.n	800177a <HAL_RCC_OscConfig+0x72>
 8001778:	e166      	b.n	8001a48 <HAL_RCC_OscConfig+0x340>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800177a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800177c:	2a00      	cmp	r2, #0
 800177e:	d000      	beq.n	8001782 <HAL_RCC_OscConfig+0x7a>
 8001780:	e1a3      	b.n	8001aca <HAL_RCC_OscConfig+0x3c2>
  return HAL_OK;
 8001782:	2000      	movs	r0, #0
 8001784:	e7c6      	b.n	8001714 <HAL_RCC_OscConfig+0xc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001786:	210c      	movs	r1, #12
 8001788:	4da9      	ldr	r5, [pc, #676]	; (8001a30 <HAL_RCC_OscConfig+0x328>)
 800178a:	686a      	ldr	r2, [r5, #4]
 800178c:	400a      	ands	r2, r1
 800178e:	2a04      	cmp	r2, #4
 8001790:	d00b      	beq.n	80017aa <HAL_RCC_OscConfig+0xa2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001792:	686b      	ldr	r3, [r5, #4]
 8001794:	400b      	ands	r3, r1
 8001796:	2b08      	cmp	r3, #8
 8001798:	d10e      	bne.n	80017b8 <HAL_RCC_OscConfig+0xb0>
 800179a:	22c0      	movs	r2, #192	; 0xc0
 800179c:	686b      	ldr	r3, [r5, #4]
 800179e:	0252      	lsls	r2, r2, #9
 80017a0:	4013      	ands	r3, r2
 80017a2:	2280      	movs	r2, #128	; 0x80
 80017a4:	0252      	lsls	r2, r2, #9
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d106      	bne.n	80017b8 <HAL_RCC_OscConfig+0xb0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017aa:	682b      	ldr	r3, [r5, #0]
 80017ac:	039b      	lsls	r3, r3, #14
 80017ae:	d5b6      	bpl.n	800171e <HAL_RCC_OscConfig+0x16>
 80017b0:	6863      	ldr	r3, [r4, #4]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d1b3      	bne.n	800171e <HAL_RCC_OscConfig+0x16>
 80017b6:	e7ac      	b.n	8001712 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017b8:	6863      	ldr	r3, [r4, #4]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d113      	bne.n	80017e6 <HAL_RCC_OscConfig+0xde>
 80017be:	2380      	movs	r3, #128	; 0x80
 80017c0:	682a      	ldr	r2, [r5, #0]
 80017c2:	025b      	lsls	r3, r3, #9
 80017c4:	4313      	orrs	r3, r2
 80017c6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80017c8:	f7ff fae4 	bl	8000d94 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017cc:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80017ce:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017d0:	02b6      	lsls	r6, r6, #10
 80017d2:	682b      	ldr	r3, [r5, #0]
 80017d4:	4233      	tst	r3, r6
 80017d6:	d1a2      	bne.n	800171e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017d8:	f7ff fadc 	bl	8000d94 <HAL_GetTick>
 80017dc:	1bc0      	subs	r0, r0, r7
 80017de:	2864      	cmp	r0, #100	; 0x64
 80017e0:	d9f7      	bls.n	80017d2 <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 80017e2:	2003      	movs	r0, #3
 80017e4:	e796      	b.n	8001714 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d115      	bne.n	8001816 <HAL_RCC_OscConfig+0x10e>
 80017ea:	682b      	ldr	r3, [r5, #0]
 80017ec:	4a91      	ldr	r2, [pc, #580]	; (8001a34 <HAL_RCC_OscConfig+0x32c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ee:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017f0:	4013      	ands	r3, r2
 80017f2:	602b      	str	r3, [r5, #0]
 80017f4:	682b      	ldr	r3, [r5, #0]
 80017f6:	4a90      	ldr	r2, [pc, #576]	; (8001a38 <HAL_RCC_OscConfig+0x330>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017f8:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017fa:	4013      	ands	r3, r2
 80017fc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80017fe:	f7ff fac9 	bl	8000d94 <HAL_GetTick>
 8001802:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001804:	682b      	ldr	r3, [r5, #0]
 8001806:	4233      	tst	r3, r6
 8001808:	d089      	beq.n	800171e <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800180a:	f7ff fac3 	bl	8000d94 <HAL_GetTick>
 800180e:	1bc0      	subs	r0, r0, r7
 8001810:	2864      	cmp	r0, #100	; 0x64
 8001812:	d9f7      	bls.n	8001804 <HAL_RCC_OscConfig+0xfc>
 8001814:	e7e5      	b.n	80017e2 <HAL_RCC_OscConfig+0xda>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001816:	2b05      	cmp	r3, #5
 8001818:	d105      	bne.n	8001826 <HAL_RCC_OscConfig+0x11e>
 800181a:	2380      	movs	r3, #128	; 0x80
 800181c:	682a      	ldr	r2, [r5, #0]
 800181e:	02db      	lsls	r3, r3, #11
 8001820:	4313      	orrs	r3, r2
 8001822:	602b      	str	r3, [r5, #0]
 8001824:	e7cb      	b.n	80017be <HAL_RCC_OscConfig+0xb6>
 8001826:	682b      	ldr	r3, [r5, #0]
 8001828:	4a82      	ldr	r2, [pc, #520]	; (8001a34 <HAL_RCC_OscConfig+0x32c>)
 800182a:	4013      	ands	r3, r2
 800182c:	602b      	str	r3, [r5, #0]
 800182e:	682b      	ldr	r3, [r5, #0]
 8001830:	4a81      	ldr	r2, [pc, #516]	; (8001a38 <HAL_RCC_OscConfig+0x330>)
 8001832:	4013      	ands	r3, r2
 8001834:	e7c7      	b.n	80017c6 <HAL_RCC_OscConfig+0xbe>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001836:	220c      	movs	r2, #12
 8001838:	4d7d      	ldr	r5, [pc, #500]	; (8001a30 <HAL_RCC_OscConfig+0x328>)
 800183a:	686b      	ldr	r3, [r5, #4]
 800183c:	4213      	tst	r3, r2
 800183e:	d00b      	beq.n	8001858 <HAL_RCC_OscConfig+0x150>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001840:	686b      	ldr	r3, [r5, #4]
 8001842:	4013      	ands	r3, r2
 8001844:	2b08      	cmp	r3, #8
 8001846:	d116      	bne.n	8001876 <HAL_RCC_OscConfig+0x16e>
 8001848:	22c0      	movs	r2, #192	; 0xc0
 800184a:	686b      	ldr	r3, [r5, #4]
 800184c:	0252      	lsls	r2, r2, #9
 800184e:	4013      	ands	r3, r2
 8001850:	2280      	movs	r2, #128	; 0x80
 8001852:	0212      	lsls	r2, r2, #8
 8001854:	4293      	cmp	r3, r2
 8001856:	d10e      	bne.n	8001876 <HAL_RCC_OscConfig+0x16e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001858:	682b      	ldr	r3, [r5, #0]
 800185a:	079b      	lsls	r3, r3, #30
 800185c:	d503      	bpl.n	8001866 <HAL_RCC_OscConfig+0x15e>
 800185e:	68e3      	ldr	r3, [r4, #12]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d000      	beq.n	8001866 <HAL_RCC_OscConfig+0x15e>
 8001864:	e755      	b.n	8001712 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001866:	21f8      	movs	r1, #248	; 0xf8
 8001868:	682a      	ldr	r2, [r5, #0]
 800186a:	6923      	ldr	r3, [r4, #16]
 800186c:	438a      	bics	r2, r1
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	4313      	orrs	r3, r2
 8001872:	602b      	str	r3, [r5, #0]
 8001874:	e757      	b.n	8001726 <HAL_RCC_OscConfig+0x1e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001876:	68e2      	ldr	r2, [r4, #12]
 8001878:	2301      	movs	r3, #1
 800187a:	2a00      	cmp	r2, #0
 800187c:	d00f      	beq.n	800189e <HAL_RCC_OscConfig+0x196>
        __HAL_RCC_HSI_ENABLE();
 800187e:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001880:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 8001882:	4313      	orrs	r3, r2
 8001884:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001886:	f7ff fa85 	bl	8000d94 <HAL_GetTick>
 800188a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800188c:	682b      	ldr	r3, [r5, #0]
 800188e:	4233      	tst	r3, r6
 8001890:	d1e9      	bne.n	8001866 <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001892:	f7ff fa7f 	bl	8000d94 <HAL_GetTick>
 8001896:	1bc0      	subs	r0, r0, r7
 8001898:	2802      	cmp	r0, #2
 800189a:	d9f7      	bls.n	800188c <HAL_RCC_OscConfig+0x184>
 800189c:	e7a1      	b.n	80017e2 <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_HSI_DISABLE();
 800189e:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018a0:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 80018a2:	439a      	bics	r2, r3
 80018a4:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 80018a6:	f7ff fa75 	bl	8000d94 <HAL_GetTick>
 80018aa:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ac:	682b      	ldr	r3, [r5, #0]
 80018ae:	4233      	tst	r3, r6
 80018b0:	d100      	bne.n	80018b4 <HAL_RCC_OscConfig+0x1ac>
 80018b2:	e738      	b.n	8001726 <HAL_RCC_OscConfig+0x1e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018b4:	f7ff fa6e 	bl	8000d94 <HAL_GetTick>
 80018b8:	1bc0      	subs	r0, r0, r7
 80018ba:	2802      	cmp	r0, #2
 80018bc:	d9f6      	bls.n	80018ac <HAL_RCC_OscConfig+0x1a4>
 80018be:	e790      	b.n	80017e2 <HAL_RCC_OscConfig+0xda>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018c0:	69e2      	ldr	r2, [r4, #28]
 80018c2:	2301      	movs	r3, #1
 80018c4:	4d5a      	ldr	r5, [pc, #360]	; (8001a30 <HAL_RCC_OscConfig+0x328>)
 80018c6:	2a00      	cmp	r2, #0
 80018c8:	d010      	beq.n	80018ec <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_LSI_ENABLE();
 80018ca:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018cc:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 80018ce:	4313      	orrs	r3, r2
 80018d0:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 80018d2:	f7ff fa5f 	bl	8000d94 <HAL_GetTick>
 80018d6:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018d8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80018da:	4233      	tst	r3, r6
 80018dc:	d000      	beq.n	80018e0 <HAL_RCC_OscConfig+0x1d8>
 80018de:	e726      	b.n	800172e <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018e0:	f7ff fa58 	bl	8000d94 <HAL_GetTick>
 80018e4:	1bc0      	subs	r0, r0, r7
 80018e6:	2802      	cmp	r0, #2
 80018e8:	d9f6      	bls.n	80018d8 <HAL_RCC_OscConfig+0x1d0>
 80018ea:	e77a      	b.n	80017e2 <HAL_RCC_OscConfig+0xda>
      __HAL_RCC_LSI_DISABLE();
 80018ec:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018ee:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 80018f0:	439a      	bics	r2, r3
 80018f2:	626a      	str	r2, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 80018f4:	f7ff fa4e 	bl	8000d94 <HAL_GetTick>
 80018f8:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018fa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80018fc:	4233      	tst	r3, r6
 80018fe:	d100      	bne.n	8001902 <HAL_RCC_OscConfig+0x1fa>
 8001900:	e715      	b.n	800172e <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001902:	f7ff fa47 	bl	8000d94 <HAL_GetTick>
 8001906:	1bc0      	subs	r0, r0, r7
 8001908:	2802      	cmp	r0, #2
 800190a:	d9f6      	bls.n	80018fa <HAL_RCC_OscConfig+0x1f2>
 800190c:	e769      	b.n	80017e2 <HAL_RCC_OscConfig+0xda>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800190e:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001910:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001912:	4d47      	ldr	r5, [pc, #284]	; (8001a30 <HAL_RCC_OscConfig+0x328>)
 8001914:	0552      	lsls	r2, r2, #21
 8001916:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 8001918:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800191a:	4213      	tst	r3, r2
 800191c:	d108      	bne.n	8001930 <HAL_RCC_OscConfig+0x228>
      __HAL_RCC_PWR_CLK_ENABLE();
 800191e:	69eb      	ldr	r3, [r5, #28]
 8001920:	4313      	orrs	r3, r2
 8001922:	61eb      	str	r3, [r5, #28]
 8001924:	69eb      	ldr	r3, [r5, #28]
 8001926:	4013      	ands	r3, r2
 8001928:	9303      	str	r3, [sp, #12]
 800192a:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 800192c:	2301      	movs	r3, #1
 800192e:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001930:	2780      	movs	r7, #128	; 0x80
 8001932:	4e42      	ldr	r6, [pc, #264]	; (8001a3c <HAL_RCC_OscConfig+0x334>)
 8001934:	007f      	lsls	r7, r7, #1
 8001936:	6833      	ldr	r3, [r6, #0]
 8001938:	423b      	tst	r3, r7
 800193a:	d006      	beq.n	800194a <HAL_RCC_OscConfig+0x242>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800193c:	68a3      	ldr	r3, [r4, #8]
 800193e:	2b01      	cmp	r3, #1
 8001940:	d113      	bne.n	800196a <HAL_RCC_OscConfig+0x262>
 8001942:	6a2a      	ldr	r2, [r5, #32]
 8001944:	4313      	orrs	r3, r2
 8001946:	622b      	str	r3, [r5, #32]
 8001948:	e030      	b.n	80019ac <HAL_RCC_OscConfig+0x2a4>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800194a:	6833      	ldr	r3, [r6, #0]
 800194c:	433b      	orrs	r3, r7
 800194e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001950:	f7ff fa20 	bl	8000d94 <HAL_GetTick>
 8001954:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001956:	6833      	ldr	r3, [r6, #0]
 8001958:	423b      	tst	r3, r7
 800195a:	d1ef      	bne.n	800193c <HAL_RCC_OscConfig+0x234>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800195c:	f7ff fa1a 	bl	8000d94 <HAL_GetTick>
 8001960:	9b01      	ldr	r3, [sp, #4]
 8001962:	1ac0      	subs	r0, r0, r3
 8001964:	2864      	cmp	r0, #100	; 0x64
 8001966:	d9f6      	bls.n	8001956 <HAL_RCC_OscConfig+0x24e>
 8001968:	e73b      	b.n	80017e2 <HAL_RCC_OscConfig+0xda>
 800196a:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800196c:	2b00      	cmp	r3, #0
 800196e:	d114      	bne.n	800199a <HAL_RCC_OscConfig+0x292>
 8001970:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001972:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001974:	4393      	bics	r3, r2
 8001976:	622b      	str	r3, [r5, #32]
 8001978:	6a2b      	ldr	r3, [r5, #32]
 800197a:	3203      	adds	r2, #3
 800197c:	4393      	bics	r3, r2
 800197e:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8001980:	f7ff fa08 	bl	8000d94 <HAL_GetTick>
 8001984:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001986:	6a2b      	ldr	r3, [r5, #32]
 8001988:	423b      	tst	r3, r7
 800198a:	d025      	beq.n	80019d8 <HAL_RCC_OscConfig+0x2d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800198c:	f7ff fa02 	bl	8000d94 <HAL_GetTick>
 8001990:	4b2b      	ldr	r3, [pc, #172]	; (8001a40 <HAL_RCC_OscConfig+0x338>)
 8001992:	1b80      	subs	r0, r0, r6
 8001994:	4298      	cmp	r0, r3
 8001996:	d9f6      	bls.n	8001986 <HAL_RCC_OscConfig+0x27e>
 8001998:	e723      	b.n	80017e2 <HAL_RCC_OscConfig+0xda>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800199a:	2b05      	cmp	r3, #5
 800199c:	d10b      	bne.n	80019b6 <HAL_RCC_OscConfig+0x2ae>
 800199e:	6a29      	ldr	r1, [r5, #32]
 80019a0:	3b01      	subs	r3, #1
 80019a2:	430b      	orrs	r3, r1
 80019a4:	622b      	str	r3, [r5, #32]
 80019a6:	6a2b      	ldr	r3, [r5, #32]
 80019a8:	431a      	orrs	r2, r3
 80019aa:	622a      	str	r2, [r5, #32]
      tickstart = HAL_GetTick();
 80019ac:	f7ff f9f2 	bl	8000d94 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019b0:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 80019b2:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019b4:	e00d      	b.n	80019d2 <HAL_RCC_OscConfig+0x2ca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019b6:	6a2b      	ldr	r3, [r5, #32]
 80019b8:	4393      	bics	r3, r2
 80019ba:	2204      	movs	r2, #4
 80019bc:	622b      	str	r3, [r5, #32]
 80019be:	6a2b      	ldr	r3, [r5, #32]
 80019c0:	4393      	bics	r3, r2
 80019c2:	e7c0      	b.n	8001946 <HAL_RCC_OscConfig+0x23e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019c4:	f7ff f9e6 	bl	8000d94 <HAL_GetTick>
 80019c8:	4b1d      	ldr	r3, [pc, #116]	; (8001a40 <HAL_RCC_OscConfig+0x338>)
 80019ca:	1b80      	subs	r0, r0, r6
 80019cc:	4298      	cmp	r0, r3
 80019ce:	d900      	bls.n	80019d2 <HAL_RCC_OscConfig+0x2ca>
 80019d0:	e707      	b.n	80017e2 <HAL_RCC_OscConfig+0xda>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019d2:	6a2b      	ldr	r3, [r5, #32]
 80019d4:	423b      	tst	r3, r7
 80019d6:	d0f5      	beq.n	80019c4 <HAL_RCC_OscConfig+0x2bc>
    if(pwrclkchanged == SET)
 80019d8:	9b00      	ldr	r3, [sp, #0]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d000      	beq.n	80019e0 <HAL_RCC_OscConfig+0x2d8>
 80019de:	e6aa      	b.n	8001736 <HAL_RCC_OscConfig+0x2e>
      __HAL_RCC_PWR_CLK_DISABLE();
 80019e0:	69eb      	ldr	r3, [r5, #28]
 80019e2:	4a18      	ldr	r2, [pc, #96]	; (8001a44 <HAL_RCC_OscConfig+0x33c>)
 80019e4:	4013      	ands	r3, r2
 80019e6:	61eb      	str	r3, [r5, #28]
 80019e8:	e6a5      	b.n	8001736 <HAL_RCC_OscConfig+0x2e>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80019ea:	f7ff f9d3 	bl	8000d94 <HAL_GetTick>
 80019ee:	1bc0      	subs	r0, r0, r7
 80019f0:	2802      	cmp	r0, #2
 80019f2:	d800      	bhi.n	80019f6 <HAL_RCC_OscConfig+0x2ee>
 80019f4:	e6b2      	b.n	800175c <HAL_RCC_OscConfig+0x54>
 80019f6:	e6f4      	b.n	80017e2 <HAL_RCC_OscConfig+0xda>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80019f8:	3205      	adds	r2, #5
 80019fa:	d103      	bne.n	8001a04 <HAL_RCC_OscConfig+0x2fc>
      __HAL_RCC_HSI14ADC_ENABLE();
 80019fc:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80019fe:	439a      	bics	r2, r3
 8001a00:	636a      	str	r2, [r5, #52]	; 0x34
 8001a02:	e6af      	b.n	8001764 <HAL_RCC_OscConfig+0x5c>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001a04:	6b6a      	ldr	r2, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001a06:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8001a08:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8001a0a:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8001a0c:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8001a0e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001a10:	4393      	bics	r3, r2
 8001a12:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001a14:	f7ff f9be 	bl	8000d94 <HAL_GetTick>
 8001a18:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001a1a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001a1c:	4233      	tst	r3, r6
 8001a1e:	d100      	bne.n	8001a22 <HAL_RCC_OscConfig+0x31a>
 8001a20:	e6a7      	b.n	8001772 <HAL_RCC_OscConfig+0x6a>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001a22:	f7ff f9b7 	bl	8000d94 <HAL_GetTick>
 8001a26:	1bc0      	subs	r0, r0, r7
 8001a28:	2802      	cmp	r0, #2
 8001a2a:	d9f6      	bls.n	8001a1a <HAL_RCC_OscConfig+0x312>
 8001a2c:	e6d9      	b.n	80017e2 <HAL_RCC_OscConfig+0xda>
 8001a2e:	46c0      	nop			; (mov r8, r8)
 8001a30:	40021000 	.word	0x40021000
 8001a34:	fffeffff 	.word	0xfffeffff
 8001a38:	fffbffff 	.word	0xfffbffff
 8001a3c:	40007000 	.word	0x40007000
 8001a40:	00001388 	.word	0x00001388
 8001a44:	efffffff 	.word	0xefffffff
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001a48:	210c      	movs	r1, #12
 8001a4a:	4d53      	ldr	r5, [pc, #332]	; (8001b98 <HAL_RCC_OscConfig+0x490>)
 8001a4c:	686a      	ldr	r2, [r5, #4]
 8001a4e:	400a      	ands	r2, r1
 8001a50:	428a      	cmp	r2, r1
 8001a52:	d009      	beq.n	8001a68 <HAL_RCC_OscConfig+0x360>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001a54:	686b      	ldr	r3, [r5, #4]
 8001a56:	400b      	ands	r3, r1
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001a58:	2b08      	cmp	r3, #8
 8001a5a:	d10e      	bne.n	8001a7a <HAL_RCC_OscConfig+0x372>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001a5c:	22c0      	movs	r2, #192	; 0xc0
 8001a5e:	686b      	ldr	r3, [r5, #4]
 8001a60:	0252      	lsls	r2, r2, #9
 8001a62:	4013      	ands	r3, r2
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d108      	bne.n	8001a7a <HAL_RCC_OscConfig+0x372>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001a68:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001a6a:	03db      	lsls	r3, r3, #15
 8001a6c:	d400      	bmi.n	8001a70 <HAL_RCC_OscConfig+0x368>
 8001a6e:	e684      	b.n	800177a <HAL_RCC_OscConfig+0x72>
 8001a70:	6a23      	ldr	r3, [r4, #32]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d000      	beq.n	8001a78 <HAL_RCC_OscConfig+0x370>
 8001a76:	e64c      	b.n	8001712 <HAL_RCC_OscConfig+0xa>
 8001a78:	e67f      	b.n	800177a <HAL_RCC_OscConfig+0x72>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a7a:	6a23      	ldr	r3, [r4, #32]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d011      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x39c>
        __HAL_RCC_HSI48_ENABLE();
 8001a80:	2680      	movs	r6, #128	; 0x80
 8001a82:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001a84:	0276      	lsls	r6, r6, #9
 8001a86:	4333      	orrs	r3, r6
 8001a88:	636b      	str	r3, [r5, #52]	; 0x34
        tickstart = HAL_GetTick();
 8001a8a:	f7ff f983 	bl	8000d94 <HAL_GetTick>
 8001a8e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001a90:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001a92:	4233      	tst	r3, r6
 8001a94:	d000      	beq.n	8001a98 <HAL_RCC_OscConfig+0x390>
 8001a96:	e670      	b.n	800177a <HAL_RCC_OscConfig+0x72>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a98:	f7ff f97c 	bl	8000d94 <HAL_GetTick>
 8001a9c:	1bc0      	subs	r0, r0, r7
 8001a9e:	2802      	cmp	r0, #2
 8001aa0:	d9f6      	bls.n	8001a90 <HAL_RCC_OscConfig+0x388>
 8001aa2:	e69e      	b.n	80017e2 <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_HSI48_DISABLE();
 8001aa4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001aa6:	4a3d      	ldr	r2, [pc, #244]	; (8001b9c <HAL_RCC_OscConfig+0x494>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001aa8:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_HSI48_DISABLE();
 8001aaa:	4013      	ands	r3, r2
 8001aac:	636b      	str	r3, [r5, #52]	; 0x34
        tickstart = HAL_GetTick();
 8001aae:	f7ff f971 	bl	8000d94 <HAL_GetTick>
 8001ab2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001ab4:	0276      	lsls	r6, r6, #9
 8001ab6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001ab8:	4233      	tst	r3, r6
 8001aba:	d100      	bne.n	8001abe <HAL_RCC_OscConfig+0x3b6>
 8001abc:	e65d      	b.n	800177a <HAL_RCC_OscConfig+0x72>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001abe:	f7ff f969 	bl	8000d94 <HAL_GetTick>
 8001ac2:	1bc0      	subs	r0, r0, r7
 8001ac4:	2802      	cmp	r0, #2
 8001ac6:	d9f6      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x3ae>
 8001ac8:	e68b      	b.n	80017e2 <HAL_RCC_OscConfig+0xda>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001aca:	200c      	movs	r0, #12
 8001acc:	4b32      	ldr	r3, [pc, #200]	; (8001b98 <HAL_RCC_OscConfig+0x490>)
 8001ace:	6859      	ldr	r1, [r3, #4]
 8001ad0:	001d      	movs	r5, r3
 8001ad2:	4001      	ands	r1, r0
 8001ad4:	2908      	cmp	r1, #8
 8001ad6:	d044      	beq.n	8001b62 <HAL_RCC_OscConfig+0x45a>
        __HAL_RCC_PLL_DISABLE();
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4931      	ldr	r1, [pc, #196]	; (8001ba0 <HAL_RCC_OscConfig+0x498>)
 8001adc:	400b      	ands	r3, r1
 8001ade:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ae0:	2a02      	cmp	r2, #2
 8001ae2:	d12f      	bne.n	8001b44 <HAL_RCC_OscConfig+0x43c>
        tickstart = HAL_GetTick();
 8001ae4:	f7ff f956 	bl	8000d94 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ae8:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8001aea:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aec:	04b6      	lsls	r6, r6, #18
 8001aee:	682b      	ldr	r3, [r5, #0]
 8001af0:	4233      	tst	r3, r6
 8001af2:	d121      	bne.n	8001b38 <HAL_RCC_OscConfig+0x430>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001af4:	220f      	movs	r2, #15
 8001af6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001af8:	4393      	bics	r3, r2
 8001afa:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001afc:	4313      	orrs	r3, r2
 8001afe:	62eb      	str	r3, [r5, #44]	; 0x2c
 8001b00:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001b02:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001b04:	686a      	ldr	r2, [r5, #4]
 8001b06:	430b      	orrs	r3, r1
 8001b08:	4926      	ldr	r1, [pc, #152]	; (8001ba4 <HAL_RCC_OscConfig+0x49c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b0a:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b0c:	400a      	ands	r2, r1
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001b12:	2380      	movs	r3, #128	; 0x80
 8001b14:	682a      	ldr	r2, [r5, #0]
 8001b16:	045b      	lsls	r3, r3, #17
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001b1c:	f7ff f93a 	bl	8000d94 <HAL_GetTick>
 8001b20:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b22:	04a4      	lsls	r4, r4, #18
 8001b24:	682b      	ldr	r3, [r5, #0]
 8001b26:	4223      	tst	r3, r4
 8001b28:	d000      	beq.n	8001b2c <HAL_RCC_OscConfig+0x424>
 8001b2a:	e62a      	b.n	8001782 <HAL_RCC_OscConfig+0x7a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b2c:	f7ff f932 	bl	8000d94 <HAL_GetTick>
 8001b30:	1b80      	subs	r0, r0, r6
 8001b32:	2802      	cmp	r0, #2
 8001b34:	d9f6      	bls.n	8001b24 <HAL_RCC_OscConfig+0x41c>
 8001b36:	e654      	b.n	80017e2 <HAL_RCC_OscConfig+0xda>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b38:	f7ff f92c 	bl	8000d94 <HAL_GetTick>
 8001b3c:	1bc0      	subs	r0, r0, r7
 8001b3e:	2802      	cmp	r0, #2
 8001b40:	d9d5      	bls.n	8001aee <HAL_RCC_OscConfig+0x3e6>
 8001b42:	e64e      	b.n	80017e2 <HAL_RCC_OscConfig+0xda>
        tickstart = HAL_GetTick();
 8001b44:	f7ff f926 	bl	8000d94 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b48:	2480      	movs	r4, #128	; 0x80
        tickstart = HAL_GetTick();
 8001b4a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b4c:	04a4      	lsls	r4, r4, #18
 8001b4e:	682b      	ldr	r3, [r5, #0]
 8001b50:	4223      	tst	r3, r4
 8001b52:	d100      	bne.n	8001b56 <HAL_RCC_OscConfig+0x44e>
 8001b54:	e615      	b.n	8001782 <HAL_RCC_OscConfig+0x7a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b56:	f7ff f91d 	bl	8000d94 <HAL_GetTick>
 8001b5a:	1b80      	subs	r0, r0, r6
 8001b5c:	2802      	cmp	r0, #2
 8001b5e:	d9f6      	bls.n	8001b4e <HAL_RCC_OscConfig+0x446>
 8001b60:	e63f      	b.n	80017e2 <HAL_RCC_OscConfig+0xda>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b62:	2a01      	cmp	r2, #1
 8001b64:	d100      	bne.n	8001b68 <HAL_RCC_OscConfig+0x460>
 8001b66:	e5d4      	b.n	8001712 <HAL_RCC_OscConfig+0xa>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b68:	22c0      	movs	r2, #192	; 0xc0
        pll_config  = RCC->CFGR;
 8001b6a:	6858      	ldr	r0, [r3, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b6c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001b6e:	0252      	lsls	r2, r2, #9
        pll_config2 = RCC->CFGR2;
 8001b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b72:	4002      	ands	r2, r0
 8001b74:	428a      	cmp	r2, r1
 8001b76:	d000      	beq.n	8001b7a <HAL_RCC_OscConfig+0x472>
 8001b78:	e5cb      	b.n	8001712 <HAL_RCC_OscConfig+0xa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001b7a:	220f      	movs	r2, #15
 8001b7c:	4013      	ands	r3, r2
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b7e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d000      	beq.n	8001b86 <HAL_RCC_OscConfig+0x47e>
 8001b84:	e5c5      	b.n	8001712 <HAL_RCC_OscConfig+0xa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001b86:	23f0      	movs	r3, #240	; 0xf0
 8001b88:	039b      	lsls	r3, r3, #14
 8001b8a:	4018      	ands	r0, r3
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001b8c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001b8e:	1ac0      	subs	r0, r0, r3
 8001b90:	1e43      	subs	r3, r0, #1
 8001b92:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 8001b94:	b2c0      	uxtb	r0, r0
 8001b96:	e5bd      	b.n	8001714 <HAL_RCC_OscConfig+0xc>
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	fffeffff 	.word	0xfffeffff
 8001ba0:	feffffff 	.word	0xfeffffff
 8001ba4:	ffc27fff 	.word	0xffc27fff

08001ba8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ba8:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001baa:	4c1b      	ldr	r4, [pc, #108]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x70>)
{
 8001bac:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001bae:	2210      	movs	r2, #16
 8001bb0:	0021      	movs	r1, r4
 8001bb2:	4668      	mov	r0, sp
 8001bb4:	f000 fb48 	bl	8002248 <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001bb8:	0021      	movs	r1, r4
 8001bba:	ad04      	add	r5, sp, #16
 8001bbc:	2210      	movs	r2, #16
 8001bbe:	3110      	adds	r1, #16
 8001bc0:	0028      	movs	r0, r5
 8001bc2:	f000 fb41 	bl	8002248 <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001bc6:	200c      	movs	r0, #12
  tmpreg = RCC->CFGR;
 8001bc8:	4a14      	ldr	r2, [pc, #80]	; (8001c1c <HAL_RCC_GetSysClockFreq+0x74>)
 8001bca:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001bcc:	4018      	ands	r0, r3
 8001bce:	2808      	cmp	r0, #8
 8001bd0:	d009      	beq.n	8001be6 <HAL_RCC_GetSysClockFreq+0x3e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001bd2:	380c      	subs	r0, #12
 8001bd4:	4243      	negs	r3, r0
 8001bd6:	4158      	adcs	r0, r3
 8001bd8:	4b11      	ldr	r3, [pc, #68]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x78>)
 8001bda:	4240      	negs	r0, r0
 8001bdc:	4018      	ands	r0, r3
 8001bde:	4b11      	ldr	r3, [pc, #68]	; (8001c24 <HAL_RCC_GetSysClockFreq+0x7c>)
 8001be0:	18c0      	adds	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001be2:	b009      	add	sp, #36	; 0x24
 8001be4:	bd30      	pop	{r4, r5, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001be6:	200f      	movs	r0, #15
 8001be8:	466c      	mov	r4, sp
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001bea:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001bec:	0c99      	lsrs	r1, r3, #18
 8001bee:	4001      	ands	r1, r0
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001bf0:	4002      	ands	r2, r0
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001bf2:	5c64      	ldrb	r4, [r4, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001bf4:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001bf6:	22c0      	movs	r2, #192	; 0xc0
 8001bf8:	2080      	movs	r0, #128	; 0x80
 8001bfa:	0252      	lsls	r2, r2, #9
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	0240      	lsls	r0, r0, #9
 8001c00:	4283      	cmp	r3, r0
 8001c02:	d101      	bne.n	8001c08 <HAL_RCC_GetSysClockFreq+0x60>
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001c04:	4807      	ldr	r0, [pc, #28]	; (8001c24 <HAL_RCC_GetSysClockFreq+0x7c>)
 8001c06:	e002      	b.n	8001c0e <HAL_RCC_GetSysClockFreq+0x66>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d1fb      	bne.n	8001c04 <HAL_RCC_GetSysClockFreq+0x5c>
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001c0c:	4806      	ldr	r0, [pc, #24]	; (8001c28 <HAL_RCC_GetSysClockFreq+0x80>)
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001c0e:	f7fe fa8f 	bl	8000130 <__udivsi3>
 8001c12:	4360      	muls	r0, r4
 8001c14:	e7e5      	b.n	8001be2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c16:	46c0      	nop			; (mov r8, r8)
 8001c18:	08002284 	.word	0x08002284
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	02625a00 	.word	0x02625a00
 8001c24:	007a1200 	.word	0x007a1200
 8001c28:	02dc6c00 	.word	0x02dc6c00

08001c2c <HAL_RCC_ClockConfig>:
{
 8001c2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001c2e:	0005      	movs	r5, r0
 8001c30:	000f      	movs	r7, r1
  if(RCC_ClkInitStruct == NULL)
 8001c32:	2800      	cmp	r0, #0
 8001c34:	d101      	bne.n	8001c3a <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 8001c36:	2001      	movs	r0, #1
}
 8001c38:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	4c3b      	ldr	r4, [pc, #236]	; (8001d2c <HAL_RCC_ClockConfig+0x100>)
 8001c3e:	6823      	ldr	r3, [r4, #0]
 8001c40:	4013      	ands	r3, r2
 8001c42:	428b      	cmp	r3, r1
 8001c44:	d31c      	bcc.n	8001c80 <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c46:	6829      	ldr	r1, [r5, #0]
 8001c48:	078b      	lsls	r3, r1, #30
 8001c4a:	d422      	bmi.n	8001c92 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c4c:	07cb      	lsls	r3, r1, #31
 8001c4e:	d42f      	bmi.n	8001cb0 <HAL_RCC_ClockConfig+0x84>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c50:	2301      	movs	r3, #1
 8001c52:	6822      	ldr	r2, [r4, #0]
 8001c54:	401a      	ands	r2, r3
 8001c56:	42ba      	cmp	r2, r7
 8001c58:	d859      	bhi.n	8001d0e <HAL_RCC_ClockConfig+0xe2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c5a:	682b      	ldr	r3, [r5, #0]
 8001c5c:	4c34      	ldr	r4, [pc, #208]	; (8001d30 <HAL_RCC_ClockConfig+0x104>)
 8001c5e:	075b      	lsls	r3, r3, #29
 8001c60:	d45c      	bmi.n	8001d1c <HAL_RCC_ClockConfig+0xf0>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001c62:	f7ff ffa1 	bl	8001ba8 <HAL_RCC_GetSysClockFreq>
 8001c66:	6863      	ldr	r3, [r4, #4]
 8001c68:	4a32      	ldr	r2, [pc, #200]	; (8001d34 <HAL_RCC_ClockConfig+0x108>)
 8001c6a:	061b      	lsls	r3, r3, #24
 8001c6c:	0f1b      	lsrs	r3, r3, #28
 8001c6e:	5cd3      	ldrb	r3, [r2, r3]
 8001c70:	40d8      	lsrs	r0, r3
 8001c72:	4b31      	ldr	r3, [pc, #196]	; (8001d38 <HAL_RCC_ClockConfig+0x10c>)
 8001c74:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001c76:	2000      	movs	r0, #0
 8001c78:	f7ff f84c 	bl	8000d14 <HAL_InitTick>
  return HAL_OK;
 8001c7c:	2000      	movs	r0, #0
 8001c7e:	e7db      	b.n	8001c38 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c80:	6823      	ldr	r3, [r4, #0]
 8001c82:	4393      	bics	r3, r2
 8001c84:	430b      	orrs	r3, r1
 8001c86:	6023      	str	r3, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c88:	6823      	ldr	r3, [r4, #0]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	428b      	cmp	r3, r1
 8001c8e:	d1d2      	bne.n	8001c36 <HAL_RCC_ClockConfig+0xa>
 8001c90:	e7d9      	b.n	8001c46 <HAL_RCC_ClockConfig+0x1a>
 8001c92:	4a27      	ldr	r2, [pc, #156]	; (8001d30 <HAL_RCC_ClockConfig+0x104>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c94:	074b      	lsls	r3, r1, #29
 8001c96:	d504      	bpl.n	8001ca2 <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001c98:	23e0      	movs	r3, #224	; 0xe0
 8001c9a:	6850      	ldr	r0, [r2, #4]
 8001c9c:	00db      	lsls	r3, r3, #3
 8001c9e:	4303      	orrs	r3, r0
 8001ca0:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ca2:	20f0      	movs	r0, #240	; 0xf0
 8001ca4:	6853      	ldr	r3, [r2, #4]
 8001ca6:	4383      	bics	r3, r0
 8001ca8:	68a8      	ldr	r0, [r5, #8]
 8001caa:	4303      	orrs	r3, r0
 8001cac:	6053      	str	r3, [r2, #4]
 8001cae:	e7cd      	b.n	8001c4c <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cb0:	686a      	ldr	r2, [r5, #4]
 8001cb2:	4e1f      	ldr	r6, [pc, #124]	; (8001d30 <HAL_RCC_ClockConfig+0x104>)
 8001cb4:	2a01      	cmp	r2, #1
 8001cb6:	d11a      	bne.n	8001cee <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb8:	6833      	ldr	r3, [r6, #0]
 8001cba:	039b      	lsls	r3, r3, #14
 8001cbc:	d5bb      	bpl.n	8001c36 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cbe:	2103      	movs	r1, #3
 8001cc0:	6873      	ldr	r3, [r6, #4]
 8001cc2:	438b      	bics	r3, r1
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001cc8:	f7ff f864 	bl	8000d94 <HAL_GetTick>
 8001ccc:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cce:	230c      	movs	r3, #12
 8001cd0:	6872      	ldr	r2, [r6, #4]
 8001cd2:	401a      	ands	r2, r3
 8001cd4:	686b      	ldr	r3, [r5, #4]
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d0b9      	beq.n	8001c50 <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cdc:	f7ff f85a 	bl	8000d94 <HAL_GetTick>
 8001ce0:	9b01      	ldr	r3, [sp, #4]
 8001ce2:	1ac0      	subs	r0, r0, r3
 8001ce4:	4b15      	ldr	r3, [pc, #84]	; (8001d3c <HAL_RCC_ClockConfig+0x110>)
 8001ce6:	4298      	cmp	r0, r3
 8001ce8:	d9f1      	bls.n	8001cce <HAL_RCC_ClockConfig+0xa2>
        return HAL_TIMEOUT;
 8001cea:	2003      	movs	r0, #3
 8001cec:	e7a4      	b.n	8001c38 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cee:	2a02      	cmp	r2, #2
 8001cf0:	d103      	bne.n	8001cfa <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cf2:	6833      	ldr	r3, [r6, #0]
 8001cf4:	019b      	lsls	r3, r3, #6
 8001cf6:	d4e2      	bmi.n	8001cbe <HAL_RCC_ClockConfig+0x92>
 8001cf8:	e79d      	b.n	8001c36 <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001cfa:	2a03      	cmp	r2, #3
 8001cfc:	d103      	bne.n	8001d06 <HAL_RCC_ClockConfig+0xda>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001cfe:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8001d00:	03db      	lsls	r3, r3, #15
 8001d02:	d4dc      	bmi.n	8001cbe <HAL_RCC_ClockConfig+0x92>
 8001d04:	e797      	b.n	8001c36 <HAL_RCC_ClockConfig+0xa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d06:	6833      	ldr	r3, [r6, #0]
 8001d08:	079b      	lsls	r3, r3, #30
 8001d0a:	d4d8      	bmi.n	8001cbe <HAL_RCC_ClockConfig+0x92>
 8001d0c:	e793      	b.n	8001c36 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d0e:	6822      	ldr	r2, [r4, #0]
 8001d10:	439a      	bics	r2, r3
 8001d12:	6022      	str	r2, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d14:	6822      	ldr	r2, [r4, #0]
 8001d16:	421a      	tst	r2, r3
 8001d18:	d09f      	beq.n	8001c5a <HAL_RCC_ClockConfig+0x2e>
 8001d1a:	e78c      	b.n	8001c36 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001d1c:	6863      	ldr	r3, [r4, #4]
 8001d1e:	4a08      	ldr	r2, [pc, #32]	; (8001d40 <HAL_RCC_ClockConfig+0x114>)
 8001d20:	4013      	ands	r3, r2
 8001d22:	68ea      	ldr	r2, [r5, #12]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	6063      	str	r3, [r4, #4]
 8001d28:	e79b      	b.n	8001c62 <HAL_RCC_ClockConfig+0x36>
 8001d2a:	46c0      	nop			; (mov r8, r8)
 8001d2c:	40022000 	.word	0x40022000
 8001d30:	40021000 	.word	0x40021000
 8001d34:	080022e4 	.word	0x080022e4
 8001d38:	20000000 	.word	0x20000000
 8001d3c:	00001388 	.word	0x00001388
 8001d40:	fffff8ff 	.word	0xfffff8ff

08001d44 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001d44:	4b04      	ldr	r3, [pc, #16]	; (8001d58 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001d46:	4a05      	ldr	r2, [pc, #20]	; (8001d5c <HAL_RCC_GetPCLK1Freq+0x18>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	055b      	lsls	r3, r3, #21
 8001d4c:	0f5b      	lsrs	r3, r3, #29
 8001d4e:	5cd3      	ldrb	r3, [r2, r3]
 8001d50:	4a03      	ldr	r2, [pc, #12]	; (8001d60 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001d52:	6810      	ldr	r0, [r2, #0]
 8001d54:	40d8      	lsrs	r0, r3
}    
 8001d56:	4770      	bx	lr
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	080022f4 	.word	0x080022f4
 8001d60:	20000000 	.word	0x20000000

08001d64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d64:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001d66:	6803      	ldr	r3, [r0, #0]
{
 8001d68:	b085      	sub	sp, #20
 8001d6a:	0005      	movs	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001d6c:	03db      	lsls	r3, r3, #15
 8001d6e:	d528      	bpl.n	8001dc2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d70:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001d72:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d74:	4c40      	ldr	r4, [pc, #256]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8001d76:	0552      	lsls	r2, r2, #21
 8001d78:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8001d7a:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d7c:	4213      	tst	r3, r2
 8001d7e:	d108      	bne.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d80:	69e3      	ldr	r3, [r4, #28]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	61e3      	str	r3, [r4, #28]
 8001d86:	69e3      	ldr	r3, [r4, #28]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	9303      	str	r3, [sp, #12]
 8001d8c:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d92:	2780      	movs	r7, #128	; 0x80
 8001d94:	4e39      	ldr	r6, [pc, #228]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001d96:	007f      	lsls	r7, r7, #1
 8001d98:	6833      	ldr	r3, [r6, #0]
 8001d9a:	423b      	tst	r3, r7
 8001d9c:	d038      	beq.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0xac>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d9e:	22c0      	movs	r2, #192	; 0xc0
 8001da0:	6a23      	ldr	r3, [r4, #32]
 8001da2:	0092      	lsls	r2, r2, #2
 8001da4:	4013      	ands	r3, r2
 8001da6:	4e36      	ldr	r6, [pc, #216]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001da8:	d144      	bne.n	8001e34 <HAL_RCCEx_PeriphCLKConfig+0xd0>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001daa:	6a23      	ldr	r3, [r4, #32]
 8001dac:	401e      	ands	r6, r3
 8001dae:	686b      	ldr	r3, [r5, #4]
 8001db0:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001db2:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001db4:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d103      	bne.n	8001dc2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dba:	69e3      	ldr	r3, [r4, #28]
 8001dbc:	4a31      	ldr	r2, [pc, #196]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001dc2:	682a      	ldr	r2, [r5, #0]
 8001dc4:	07d3      	lsls	r3, r2, #31
 8001dc6:	d506      	bpl.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001dc8:	2003      	movs	r0, #3
 8001dca:	492b      	ldr	r1, [pc, #172]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8001dcc:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001dce:	4383      	bics	r3, r0
 8001dd0:	68a8      	ldr	r0, [r5, #8]
 8001dd2:	4303      	orrs	r3, r0
 8001dd4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001dd6:	0693      	lsls	r3, r2, #26
 8001dd8:	d506      	bpl.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001dda:	2010      	movs	r0, #16
 8001ddc:	4926      	ldr	r1, [pc, #152]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8001dde:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001de0:	4383      	bics	r3, r0
 8001de2:	68e8      	ldr	r0, [r5, #12]
 8001de4:	4303      	orrs	r3, r0
 8001de6:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001de8:	0393      	lsls	r3, r2, #14
 8001dea:	d506      	bpl.n	8001dfa <HAL_RCCEx_PeriphCLKConfig+0x96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001dec:	2080      	movs	r0, #128	; 0x80
 8001dee:	4922      	ldr	r1, [pc, #136]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8001df0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001df2:	4383      	bics	r3, r0
 8001df4:	6968      	ldr	r0, [r5, #20]
 8001df6:	4303      	orrs	r3, r0
 8001df8:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001dfa:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001dfc:	0553      	lsls	r3, r2, #21
 8001dfe:	d517      	bpl.n	8001e30 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001e00:	2140      	movs	r1, #64	; 0x40
 8001e02:	4a1d      	ldr	r2, [pc, #116]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8001e04:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001e06:	438b      	bics	r3, r1
 8001e08:	6929      	ldr	r1, [r5, #16]
 8001e0a:	430b      	orrs	r3, r1
 8001e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0e:	e00f      	b.n	8001e30 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e10:	6833      	ldr	r3, [r6, #0]
 8001e12:	433b      	orrs	r3, r7
 8001e14:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001e16:	f7fe ffbd 	bl	8000d94 <HAL_GetTick>
 8001e1a:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e1c:	6833      	ldr	r3, [r6, #0]
 8001e1e:	423b      	tst	r3, r7
 8001e20:	d1bd      	bne.n	8001d9e <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e22:	f7fe ffb7 	bl	8000d94 <HAL_GetTick>
 8001e26:	9b01      	ldr	r3, [sp, #4]
 8001e28:	1ac0      	subs	r0, r0, r3
 8001e2a:	2864      	cmp	r0, #100	; 0x64
 8001e2c:	d9f6      	bls.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0xb8>
          return HAL_TIMEOUT;
 8001e2e:	2003      	movs	r0, #3
}
 8001e30:	b005      	add	sp, #20
 8001e32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e34:	6869      	ldr	r1, [r5, #4]
 8001e36:	400a      	ands	r2, r1
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d0b6      	beq.n	8001daa <HAL_RCCEx_PeriphCLKConfig+0x46>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e3c:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e3e:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e40:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e42:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e44:	025b      	lsls	r3, r3, #9
 8001e46:	4303      	orrs	r3, r0
 8001e48:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e4a:	6a23      	ldr	r3, [r4, #32]
 8001e4c:	480e      	ldr	r0, [pc, #56]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x124>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e4e:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e50:	4003      	ands	r3, r0
 8001e52:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 8001e54:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001e56:	07d3      	lsls	r3, r2, #31
 8001e58:	d5a7      	bpl.n	8001daa <HAL_RCCEx_PeriphCLKConfig+0x46>
        tickstart = HAL_GetTick();
 8001e5a:	f7fe ff9b 	bl	8000d94 <HAL_GetTick>
 8001e5e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e60:	2202      	movs	r2, #2
 8001e62:	6a23      	ldr	r3, [r4, #32]
 8001e64:	4213      	tst	r3, r2
 8001e66:	d1a0      	bne.n	8001daa <HAL_RCCEx_PeriphCLKConfig+0x46>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e68:	f7fe ff94 	bl	8000d94 <HAL_GetTick>
 8001e6c:	4b07      	ldr	r3, [pc, #28]	; (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8001e6e:	1bc0      	subs	r0, r0, r7
 8001e70:	4298      	cmp	r0, r3
 8001e72:	d9f5      	bls.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8001e74:	e7db      	b.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0xca>
 8001e76:	46c0      	nop			; (mov r8, r8)
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	40007000 	.word	0x40007000
 8001e80:	fffffcff 	.word	0xfffffcff
 8001e84:	efffffff 	.word	0xefffffff
 8001e88:	fffeffff 	.word	0xfffeffff
 8001e8c:	00001388 	.word	0x00001388

08001e90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e90:	b570      	push	{r4, r5, r6, lr}
 8001e92:	0004      	movs	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001e94:	6925      	ldr	r5, [r4, #16]
 8001e96:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001e98:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001e9a:	432b      	orrs	r3, r5
 8001e9c:	6965      	ldr	r5, [r4, #20]
 8001e9e:	69c1      	ldr	r1, [r0, #28]
 8001ea0:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001ea2:	6810      	ldr	r0, [r2, #0]
 8001ea4:	4d43      	ldr	r5, [pc, #268]	; (8001fb4 <UART_SetConfig+0x124>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001ea6:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001ea8:	4028      	ands	r0, r5
 8001eaa:	4303      	orrs	r3, r0
 8001eac:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001eae:	6853      	ldr	r3, [r2, #4]
 8001eb0:	4841      	ldr	r0, [pc, #260]	; (8001fb8 <UART_SetConfig+0x128>)
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  tmpreg |= huart->Init.OneBitSampling;
 8001eb2:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001eb4:	4003      	ands	r3, r0
 8001eb6:	68e0      	ldr	r0, [r4, #12]
 8001eb8:	4303      	orrs	r3, r0
 8001eba:	6053      	str	r3, [r2, #4]
  tmpreg |= huart->Init.OneBitSampling;
 8001ebc:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001ebe:	6890      	ldr	r0, [r2, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8001ec0:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001ec2:	4d3e      	ldr	r5, [pc, #248]	; (8001fbc <UART_SetConfig+0x12c>)
 8001ec4:	4028      	ands	r0, r5
 8001ec6:	4303      	orrs	r3, r0
 8001ec8:	6093      	str	r3, [r2, #8]
 8001eca:	2380      	movs	r3, #128	; 0x80


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001ecc:	483c      	ldr	r0, [pc, #240]	; (8001fc0 <UART_SetConfig+0x130>)
 8001ece:	021b      	lsls	r3, r3, #8
 8001ed0:	4d3c      	ldr	r5, [pc, #240]	; (8001fc4 <UART_SetConfig+0x134>)
 8001ed2:	4282      	cmp	r2, r0
 8001ed4:	d110      	bne.n	8001ef8 <UART_SetConfig+0x68>
 8001ed6:	2003      	movs	r0, #3
 8001ed8:	4a3b      	ldr	r2, [pc, #236]	; (8001fc8 <UART_SetConfig+0x138>)
 8001eda:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001edc:	4002      	ands	r2, r0
 8001ede:	483b      	ldr	r0, [pc, #236]	; (8001fcc <UART_SetConfig+0x13c>)
 8001ee0:	5c80      	ldrb	r0, [r0, r2]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ee2:	4299      	cmp	r1, r3
 8001ee4:	d013      	beq.n	8001f0e <UART_SetConfig+0x7e>
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 8001ee6:	2808      	cmp	r0, #8
 8001ee8:	d860      	bhi.n	8001fac <UART_SetConfig+0x11c>
 8001eea:	f7fe f917 	bl	800011c <__gnu_thumb1_case_uqi>
 8001eee:	5f40      	.short	0x5f40
 8001ef0:	5f555f45 	.word	0x5f555f45
 8001ef4:	5f5f      	.short	0x5f5f
 8001ef6:	58          	.byte	0x58
 8001ef7:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001ef8:	4835      	ldr	r0, [pc, #212]	; (8001fd0 <UART_SetConfig+0x140>)
 8001efa:	4282      	cmp	r2, r0
 8001efc:	d154      	bne.n	8001fa8 <UART_SetConfig+0x118>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001efe:	4299      	cmp	r1, r3
 8001f00:	d135      	bne.n	8001f6e <UART_SetConfig+0xde>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001f02:	f7ff ff1f 	bl	8001d44 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001f06:	6863      	ldr	r3, [r4, #4]
 8001f08:	0040      	lsls	r0, r0, #1
 8001f0a:	085b      	lsrs	r3, r3, #1
 8001f0c:	e00b      	b.n	8001f26 <UART_SetConfig+0x96>
    switch (clocksource)
 8001f0e:	2808      	cmp	r0, #8
 8001f10:	d820      	bhi.n	8001f54 <UART_SetConfig+0xc4>
 8001f12:	f7fe f8f9 	bl	8000108 <__gnu_thumb1_case_sqi>
 8001f16:	1ff6      	.short	0x1ff6
 8001f18:	1f171f05 	.word	0x1f171f05
 8001f1c:	1f1f      	.short	0x1f1f
 8001f1e:	1a          	.byte	0x1a
 8001f1f:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001f20:	6863      	ldr	r3, [r4, #4]
 8001f22:	0858      	lsrs	r0, r3, #1
 8001f24:	4b2b      	ldr	r3, [pc, #172]	; (8001fd4 <UART_SetConfig+0x144>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001f26:	18c0      	adds	r0, r0, r3
 8001f28:	6861      	ldr	r1, [r4, #4]
 8001f2a:	f7fe f901 	bl	8000130 <__udivsi3>
 8001f2e:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8001f30:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001f32:	001a      	movs	r2, r3
 8001f34:	3a10      	subs	r2, #16
 8001f36:	42aa      	cmp	r2, r5
 8001f38:	d90f      	bls.n	8001f5a <UART_SetConfig+0xca>
      ret = HAL_ERROR;
 8001f3a:	2001      	movs	r0, #1
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8001f40:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8001f42:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetSysClockFreq();
 8001f44:	f7ff fe30 	bl	8001ba8 <HAL_RCC_GetSysClockFreq>
 8001f48:	e7dd      	b.n	8001f06 <UART_SetConfig+0x76>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001f4a:	6863      	ldr	r3, [r4, #4]
 8001f4c:	0858      	lsrs	r0, r3, #1
 8001f4e:	2380      	movs	r3, #128	; 0x80
 8001f50:	025b      	lsls	r3, r3, #9
 8001f52:	e7e8      	b.n	8001f26 <UART_SetConfig+0x96>
        ret = HAL_ERROR;
 8001f54:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001f56:	2300      	movs	r3, #0
 8001f58:	e7eb      	b.n	8001f32 <UART_SetConfig+0xa2>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001f5a:	220f      	movs	r2, #15
 8001f5c:	0019      	movs	r1, r3
 8001f5e:	4391      	bics	r1, r2
 8001f60:	000a      	movs	r2, r1
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001f62:	071b      	lsls	r3, r3, #28
      huart->Instance->BRR = brrtemp;
 8001f64:	6821      	ldr	r1, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001f66:	0f5b      	lsrs	r3, r3, #29
      huart->Instance->BRR = brrtemp;
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	60cb      	str	r3, [r1, #12]
 8001f6c:	e7e6      	b.n	8001f3c <UART_SetConfig+0xac>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001f6e:	f7ff fee9 	bl	8001d44 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001f72:	6863      	ldr	r3, [r4, #4]
 8001f74:	085b      	lsrs	r3, r3, #1
 8001f76:	e002      	b.n	8001f7e <UART_SetConfig+0xee>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001f78:	6863      	ldr	r3, [r4, #4]
 8001f7a:	0858      	lsrs	r0, r3, #1
 8001f7c:	4b16      	ldr	r3, [pc, #88]	; (8001fd8 <UART_SetConfig+0x148>)
 8001f7e:	18c0      	adds	r0, r0, r3
 8001f80:	6861      	ldr	r1, [r4, #4]
 8001f82:	f7fe f8d5 	bl	8000130 <__udivsi3>
 8001f86:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8001f88:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001f8a:	001a      	movs	r2, r3
 8001f8c:	3a10      	subs	r2, #16
 8001f8e:	42aa      	cmp	r2, r5
 8001f90:	d8d3      	bhi.n	8001f3a <UART_SetConfig+0xaa>
      huart->Instance->BRR = usartdiv;
 8001f92:	6822      	ldr	r2, [r4, #0]
 8001f94:	60d3      	str	r3, [r2, #12]
 8001f96:	e7d1      	b.n	8001f3c <UART_SetConfig+0xac>
        pclk = HAL_RCC_GetSysClockFreq();
 8001f98:	f7ff fe06 	bl	8001ba8 <HAL_RCC_GetSysClockFreq>
 8001f9c:	e7e9      	b.n	8001f72 <UART_SetConfig+0xe2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001f9e:	6863      	ldr	r3, [r4, #4]
 8001fa0:	0858      	lsrs	r0, r3, #1
 8001fa2:	2380      	movs	r3, #128	; 0x80
 8001fa4:	021b      	lsls	r3, r3, #8
 8001fa6:	e7ea      	b.n	8001f7e <UART_SetConfig+0xee>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001fa8:	4299      	cmp	r1, r3
 8001faa:	d0d3      	beq.n	8001f54 <UART_SetConfig+0xc4>
        ret = HAL_ERROR;
 8001fac:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	e7eb      	b.n	8001f8a <UART_SetConfig+0xfa>
 8001fb2:	46c0      	nop			; (mov r8, r8)
 8001fb4:	efff69f3 	.word	0xefff69f3
 8001fb8:	ffffcfff 	.word	0xffffcfff
 8001fbc:	fffff4ff 	.word	0xfffff4ff
 8001fc0:	40013800 	.word	0x40013800
 8001fc4:	0000ffef 	.word	0x0000ffef
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	080060fc 	.word	0x080060fc
 8001fd0:	40004400 	.word	0x40004400
 8001fd4:	00f42400 	.word	0x00f42400
 8001fd8:	007a1200 	.word	0x007a1200

08001fdc <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001fdc:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8001fde:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001fe0:	07da      	lsls	r2, r3, #31
 8001fe2:	d506      	bpl.n	8001ff2 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001fe4:	6801      	ldr	r1, [r0, #0]
 8001fe6:	4c28      	ldr	r4, [pc, #160]	; (8002088 <UART_AdvFeatureConfig+0xac>)
 8001fe8:	684a      	ldr	r2, [r1, #4]
 8001fea:	4022      	ands	r2, r4
 8001fec:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001fee:	4322      	orrs	r2, r4
 8001ff0:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001ff2:	079a      	lsls	r2, r3, #30
 8001ff4:	d506      	bpl.n	8002004 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001ff6:	6801      	ldr	r1, [r0, #0]
 8001ff8:	4c24      	ldr	r4, [pc, #144]	; (800208c <UART_AdvFeatureConfig+0xb0>)
 8001ffa:	684a      	ldr	r2, [r1, #4]
 8001ffc:	4022      	ands	r2, r4
 8001ffe:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002000:	4322      	orrs	r2, r4
 8002002:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002004:	075a      	lsls	r2, r3, #29
 8002006:	d506      	bpl.n	8002016 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002008:	6801      	ldr	r1, [r0, #0]
 800200a:	4c21      	ldr	r4, [pc, #132]	; (8002090 <UART_AdvFeatureConfig+0xb4>)
 800200c:	684a      	ldr	r2, [r1, #4]
 800200e:	4022      	ands	r2, r4
 8002010:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002012:	4322      	orrs	r2, r4
 8002014:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002016:	071a      	lsls	r2, r3, #28
 8002018:	d506      	bpl.n	8002028 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800201a:	6801      	ldr	r1, [r0, #0]
 800201c:	4c1d      	ldr	r4, [pc, #116]	; (8002094 <UART_AdvFeatureConfig+0xb8>)
 800201e:	684a      	ldr	r2, [r1, #4]
 8002020:	4022      	ands	r2, r4
 8002022:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002024:	4322      	orrs	r2, r4
 8002026:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002028:	06da      	lsls	r2, r3, #27
 800202a:	d506      	bpl.n	800203a <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800202c:	6801      	ldr	r1, [r0, #0]
 800202e:	4c1a      	ldr	r4, [pc, #104]	; (8002098 <UART_AdvFeatureConfig+0xbc>)
 8002030:	688a      	ldr	r2, [r1, #8]
 8002032:	4022      	ands	r2, r4
 8002034:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002036:	4322      	orrs	r2, r4
 8002038:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800203a:	069a      	lsls	r2, r3, #26
 800203c:	d506      	bpl.n	800204c <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800203e:	6801      	ldr	r1, [r0, #0]
 8002040:	4c16      	ldr	r4, [pc, #88]	; (800209c <UART_AdvFeatureConfig+0xc0>)
 8002042:	688a      	ldr	r2, [r1, #8]
 8002044:	4022      	ands	r2, r4
 8002046:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002048:	4322      	orrs	r2, r4
 800204a:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800204c:	065a      	lsls	r2, r3, #25
 800204e:	d510      	bpl.n	8002072 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002050:	6801      	ldr	r1, [r0, #0]
 8002052:	4d13      	ldr	r5, [pc, #76]	; (80020a0 <UART_AdvFeatureConfig+0xc4>)
 8002054:	684a      	ldr	r2, [r1, #4]
 8002056:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002058:	402a      	ands	r2, r5
 800205a:	4322      	orrs	r2, r4
 800205c:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800205e:	2280      	movs	r2, #128	; 0x80
 8002060:	0352      	lsls	r2, r2, #13
 8002062:	4294      	cmp	r4, r2
 8002064:	d105      	bne.n	8002072 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002066:	684a      	ldr	r2, [r1, #4]
 8002068:	4c0e      	ldr	r4, [pc, #56]	; (80020a4 <UART_AdvFeatureConfig+0xc8>)
 800206a:	4022      	ands	r2, r4
 800206c:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800206e:	4322      	orrs	r2, r4
 8002070:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002072:	061b      	lsls	r3, r3, #24
 8002074:	d506      	bpl.n	8002084 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002076:	6802      	ldr	r2, [r0, #0]
 8002078:	490b      	ldr	r1, [pc, #44]	; (80020a8 <UART_AdvFeatureConfig+0xcc>)
 800207a:	6853      	ldr	r3, [r2, #4]
 800207c:	400b      	ands	r3, r1
 800207e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002080:	430b      	orrs	r3, r1
 8002082:	6053      	str	r3, [r2, #4]
  }
}
 8002084:	bd30      	pop	{r4, r5, pc}
 8002086:	46c0      	nop			; (mov r8, r8)
 8002088:	fffdffff 	.word	0xfffdffff
 800208c:	fffeffff 	.word	0xfffeffff
 8002090:	fffbffff 	.word	0xfffbffff
 8002094:	ffff7fff 	.word	0xffff7fff
 8002098:	ffffefff 	.word	0xffffefff
 800209c:	ffffdfff 	.word	0xffffdfff
 80020a0:	ffefffff 	.word	0xffefffff
 80020a4:	ff9fffff 	.word	0xff9fffff
 80020a8:	fff7ffff 	.word	0xfff7ffff

080020ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80020ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80020ae:	2780      	movs	r7, #128	; 0x80
{
 80020b0:	0004      	movs	r4, r0
 80020b2:	000e      	movs	r6, r1
 80020b4:	0015      	movs	r5, r2
 80020b6:	9301      	str	r3, [sp, #4]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80020b8:	013f      	lsls	r7, r7, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020ba:	6822      	ldr	r2, [r4, #0]
 80020bc:	69d3      	ldr	r3, [r2, #28]
 80020be:	4033      	ands	r3, r6
 80020c0:	1b9b      	subs	r3, r3, r6
 80020c2:	4259      	negs	r1, r3
 80020c4:	414b      	adcs	r3, r1
 80020c6:	42ab      	cmp	r3, r5
 80020c8:	d001      	beq.n	80020ce <UART_WaitOnFlagUntilTimeout+0x22>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 80020ca:	2000      	movs	r0, #0
 80020cc:	e01c      	b.n	8002108 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 80020ce:	9b08      	ldr	r3, [sp, #32]
 80020d0:	3301      	adds	r3, #1
 80020d2:	d0f3      	beq.n	80020bc <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020d4:	f7fe fe5e 	bl	8000d94 <HAL_GetTick>
 80020d8:	9b01      	ldr	r3, [sp, #4]
 80020da:	9a08      	ldr	r2, [sp, #32]
 80020dc:	1ac0      	subs	r0, r0, r3
 80020de:	6823      	ldr	r3, [r4, #0]
 80020e0:	4290      	cmp	r0, r2
 80020e2:	d801      	bhi.n	80020e8 <UART_WaitOnFlagUntilTimeout+0x3c>
 80020e4:	2a00      	cmp	r2, #0
 80020e6:	d110      	bne.n	800210a <UART_WaitOnFlagUntilTimeout+0x5e>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	4913      	ldr	r1, [pc, #76]	; (8002138 <UART_WaitOnFlagUntilTimeout+0x8c>)
 80020ec:	400a      	ands	r2, r1
 80020ee:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020f0:	689a      	ldr	r2, [r3, #8]
 80020f2:	31a3      	adds	r1, #163	; 0xa3
 80020f4:	31ff      	adds	r1, #255	; 0xff
 80020f6:	438a      	bics	r2, r1
 80020f8:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80020fa:	2320      	movs	r3, #32
 80020fc:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80020fe:	67a3      	str	r3, [r4, #120]	; 0x78
          __HAL_UNLOCK(huart);
 8002100:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 8002102:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8002104:	3470      	adds	r4, #112	; 0x70
 8002106:	7023      	strb	r3, [r4, #0]
}
 8002108:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800210a:	2104      	movs	r1, #4
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	420a      	tst	r2, r1
 8002110:	d0d3      	beq.n	80020ba <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002112:	69da      	ldr	r2, [r3, #28]
 8002114:	423a      	tst	r2, r7
 8002116:	d0d0      	beq.n	80020ba <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002118:	621f      	str	r7, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	4906      	ldr	r1, [pc, #24]	; (8002138 <UART_WaitOnFlagUntilTimeout+0x8c>)
 800211e:	400a      	ands	r2, r1
 8002120:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002122:	689a      	ldr	r2, [r3, #8]
 8002124:	31a3      	adds	r1, #163	; 0xa3
 8002126:	31ff      	adds	r1, #255	; 0xff
 8002128:	438a      	bics	r2, r1
 800212a:	609a      	str	r2, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 800212c:	2320      	movs	r3, #32
 800212e:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8002130:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002132:	67e3      	str	r3, [r4, #124]	; 0x7c
 8002134:	e7e4      	b.n	8002100 <UART_WaitOnFlagUntilTimeout+0x54>
 8002136:	46c0      	nop			; (mov r8, r8)
 8002138:	fffffe5f 	.word	0xfffffe5f

0800213c <UART_CheckIdleState>:
{
 800213c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800213e:	2600      	movs	r6, #0
{
 8002140:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002142:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8002144:	f7fe fe26 	bl	8000d94 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002148:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800214a:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	071b      	lsls	r3, r3, #28
 8002150:	d415      	bmi.n	800217e <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002152:	6823      	ldr	r3, [r4, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	075b      	lsls	r3, r3, #29
 8002158:	d50a      	bpl.n	8002170 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800215a:	2180      	movs	r1, #128	; 0x80
 800215c:	4b0e      	ldr	r3, [pc, #56]	; (8002198 <UART_CheckIdleState+0x5c>)
 800215e:	2200      	movs	r2, #0
 8002160:	9300      	str	r3, [sp, #0]
 8002162:	03c9      	lsls	r1, r1, #15
 8002164:	002b      	movs	r3, r5
 8002166:	0020      	movs	r0, r4
 8002168:	f7ff ffa0 	bl	80020ac <UART_WaitOnFlagUntilTimeout>
 800216c:	2800      	cmp	r0, #0
 800216e:	d111      	bne.n	8002194 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8002170:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8002172:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002174:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002176:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8002178:	3470      	adds	r4, #112	; 0x70
 800217a:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 800217c:	e00b      	b.n	8002196 <UART_CheckIdleState+0x5a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800217e:	2180      	movs	r1, #128	; 0x80
 8002180:	4b05      	ldr	r3, [pc, #20]	; (8002198 <UART_CheckIdleState+0x5c>)
 8002182:	0032      	movs	r2, r6
 8002184:	9300      	str	r3, [sp, #0]
 8002186:	0389      	lsls	r1, r1, #14
 8002188:	0003      	movs	r3, r0
 800218a:	0020      	movs	r0, r4
 800218c:	f7ff ff8e 	bl	80020ac <UART_WaitOnFlagUntilTimeout>
 8002190:	2800      	cmp	r0, #0
 8002192:	d0de      	beq.n	8002152 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8002194:	2003      	movs	r0, #3
}
 8002196:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8002198:	01ffffff 	.word	0x01ffffff

0800219c <HAL_UART_Init>:
{
 800219c:	b510      	push	{r4, lr}
 800219e:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 80021a0:	d101      	bne.n	80021a6 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 80021a2:	2001      	movs	r0, #1
}
 80021a4:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 80021a6:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d104      	bne.n	80021b6 <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 80021ac:	0002      	movs	r2, r0
 80021ae:	3270      	adds	r2, #112	; 0x70
 80021b0:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 80021b2:	f7fe fbb5 	bl	8000920 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80021b6:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80021b8:	2101      	movs	r1, #1
 80021ba:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80021bc:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 80021be:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80021c0:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 80021c2:	438b      	bics	r3, r1
 80021c4:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80021c6:	f7ff fe63 	bl	8001e90 <UART_SetConfig>
 80021ca:	2801      	cmp	r0, #1
 80021cc:	d0e9      	beq.n	80021a2 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80021ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d002      	beq.n	80021da <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 80021d4:	0020      	movs	r0, r4
 80021d6:	f7ff ff01 	bl	8001fdc <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021da:	6823      	ldr	r3, [r4, #0]
 80021dc:	4907      	ldr	r1, [pc, #28]	; (80021fc <HAL_UART_Init+0x60>)
 80021de:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 80021e0:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021e2:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021e4:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021e8:	689a      	ldr	r2, [r3, #8]
 80021ea:	438a      	bics	r2, r1
 80021ec:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80021ee:	2201      	movs	r2, #1
 80021f0:	6819      	ldr	r1, [r3, #0]
 80021f2:	430a      	orrs	r2, r1
 80021f4:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80021f6:	f7ff ffa1 	bl	800213c <UART_CheckIdleState>
 80021fa:	e7d3      	b.n	80021a4 <HAL_UART_Init+0x8>
 80021fc:	ffffb7ff 	.word	0xffffb7ff

08002200 <__libc_init_array>:
 8002200:	b570      	push	{r4, r5, r6, lr}
 8002202:	2600      	movs	r6, #0
 8002204:	4d0c      	ldr	r5, [pc, #48]	; (8002238 <__libc_init_array+0x38>)
 8002206:	4c0d      	ldr	r4, [pc, #52]	; (800223c <__libc_init_array+0x3c>)
 8002208:	1b64      	subs	r4, r4, r5
 800220a:	10a4      	asrs	r4, r4, #2
 800220c:	42a6      	cmp	r6, r4
 800220e:	d109      	bne.n	8002224 <__libc_init_array+0x24>
 8002210:	2600      	movs	r6, #0
 8002212:	f000 f82b 	bl	800226c <_init>
 8002216:	4d0a      	ldr	r5, [pc, #40]	; (8002240 <__libc_init_array+0x40>)
 8002218:	4c0a      	ldr	r4, [pc, #40]	; (8002244 <__libc_init_array+0x44>)
 800221a:	1b64      	subs	r4, r4, r5
 800221c:	10a4      	asrs	r4, r4, #2
 800221e:	42a6      	cmp	r6, r4
 8002220:	d105      	bne.n	800222e <__libc_init_array+0x2e>
 8002222:	bd70      	pop	{r4, r5, r6, pc}
 8002224:	00b3      	lsls	r3, r6, #2
 8002226:	58eb      	ldr	r3, [r5, r3]
 8002228:	4798      	blx	r3
 800222a:	3601      	adds	r6, #1
 800222c:	e7ee      	b.n	800220c <__libc_init_array+0xc>
 800222e:	00b3      	lsls	r3, r6, #2
 8002230:	58eb      	ldr	r3, [r5, r3]
 8002232:	4798      	blx	r3
 8002234:	3601      	adds	r6, #1
 8002236:	e7f2      	b.n	800221e <__libc_init_array+0x1e>
 8002238:	08006100 	.word	0x08006100
 800223c:	08006100 	.word	0x08006100
 8002240:	08006100 	.word	0x08006100
 8002244:	08006104 	.word	0x08006104

08002248 <memcpy>:
 8002248:	2300      	movs	r3, #0
 800224a:	b510      	push	{r4, lr}
 800224c:	429a      	cmp	r2, r3
 800224e:	d100      	bne.n	8002252 <memcpy+0xa>
 8002250:	bd10      	pop	{r4, pc}
 8002252:	5ccc      	ldrb	r4, [r1, r3]
 8002254:	54c4      	strb	r4, [r0, r3]
 8002256:	3301      	adds	r3, #1
 8002258:	e7f8      	b.n	800224c <memcpy+0x4>

0800225a <memset>:
 800225a:	0003      	movs	r3, r0
 800225c:	1812      	adds	r2, r2, r0
 800225e:	4293      	cmp	r3, r2
 8002260:	d100      	bne.n	8002264 <memset+0xa>
 8002262:	4770      	bx	lr
 8002264:	7019      	strb	r1, [r3, #0]
 8002266:	3301      	adds	r3, #1
 8002268:	e7f9      	b.n	800225e <memset+0x4>
	...

0800226c <_init>:
 800226c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800226e:	46c0      	nop			; (mov r8, r8)
 8002270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002272:	bc08      	pop	{r3}
 8002274:	469e      	mov	lr, r3
 8002276:	4770      	bx	lr

08002278 <_fini>:
 8002278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800227a:	46c0      	nop			; (mov r8, r8)
 800227c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800227e:	bc08      	pop	{r3}
 8002280:	469e      	mov	lr, r3
 8002282:	4770      	bx	lr
